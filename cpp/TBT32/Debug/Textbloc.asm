; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\Textbloc.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_07JNGOCMA@deftabs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04PJFEOLPA@tabs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02JGOFGKFC@?$FO?$EA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05CAIFBNAL@?$CFs?$AB?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05CFAGJJJN@?$CFs?$AB?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08DOADHGLL@?$CFs?$AB?$CFs?$AB?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@IMBPAMON@?$CF50?$FL?$FO?$AB?$FN?$CFc?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@EIBCFHLL@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KNPCFHEI@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BM@GJEPBGID@?$AA?$CD?$AA?5?$AA?$CF?$AA4?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CE@CMABCPBA@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CM@KAJGGJJO@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02KPDBPKPG@?$CD?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSymbolAry@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSymbolAry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSymbol@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECRSymbol@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTextBlock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTextBlock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?trim@@YAXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?trim@@YAXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setupBuf@@YAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setConvertFile@@YAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetID@CTextBlock@@QAEHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetID@CTextBlock@@QAEHPAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetID@CTextBlock@@QAEHPAD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIDParts@CTextBlock@@QAEHPADPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIDParts@CTextBlock@@QAEHPAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIDParts@CTextBlock@@QAEHPAD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadHeader@CTextBlock@@QAEHPAU_iobuf@@PAHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadHeader2@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadHeader3@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteHeader@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteHeaderR@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteText@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRSymbol@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSymbol@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?rbuf@@3PAEA					; rbuf
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
_BSS	SEGMENT
?rbuf@@3PAEA DD	01H DUP (?)				; rbuf
?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA DD 01H DUP (?) ; `CTextBlock::ReadTextMbs'::`2'::getbuf
?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA DD 01H DUP (?) ; `CTextBlock::ReadText'::`2'::getbuf
_BSS	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	??1CSymbol@@QAE@XZ				; CSymbol::~CSymbol
PUBLIC	??_ECSymbol@@QAEPAXI@Z				; CSymbol::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCcsu /ZI
rtc$TMZ	ENDS
;	COMDAT ??_ECSymbol@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ECSymbol@@QAEPAXI@Z PROC NEAR			; CSymbol::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $L92983
	push	OFFSET FLAT:??1CSymbol@@QAE@XZ		; CSymbol::~CSymbol
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	164					; 000000a4H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L92984
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L92984:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $L92982
$L92983:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSymbol@@QAE@XZ			; CSymbol::~CSymbol
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L92986
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L92986:
	mov	eax, DWORD PTR _this$[ebp]
$L92982:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECSymbol@@QAEPAXI@Z ENDP				; CSymbol::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7CSymbol@@6B@				; CSymbol::`vftable'
EXTRN	?Read@CSymbol@@UAEHPAU_iobuf@@@Z:NEAR		; CSymbol::Read
;	COMDAT ??_7CSymbol@@6B@
; File c:\astrow32dev\tbt32\symbol.hpp
CONST	SEGMENT
??_7CSymbol@@6B@ DD FLAT:?Read@CSymbol@@UAEHPAU_iobuf@@@Z ; CSymbol::`vftable'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??1CSymbol@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CSymbol@@QAE@XZ PROC NEAR				; CSymbol::~CSymbol, COMDAT
; _this$ = ecx

; 14   : 	~CSymbol() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CSymbol@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSymbol@@QAE@XZ ENDP					; CSymbol::~CSymbol
_TEXT	ENDS
PUBLIC	??1CRSymbol@@QAE@XZ				; CRSymbol::~CRSymbol
PUBLIC	??_ECRSymbol@@QAEPAXI@Z				; CRSymbol::`vector deleting destructor'
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??_ECRSymbol@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ECRSymbol@@QAEPAXI@Z PROC NEAR			; CRSymbol::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $L93034
	push	OFFSET FLAT:??1CRSymbol@@QAE@XZ		; CRSymbol::~CRSymbol
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	164					; 000000a4H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93035
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L93035:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $L93033
$L93034:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CRSymbol@@QAE@XZ			; CRSymbol::~CRSymbol
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93037
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93037:
	mov	eax, DWORD PTR _this$[ebp]
$L93033:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECRSymbol@@QAEPAXI@Z ENDP				; CRSymbol::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7CRSymbol@@6B@				; CRSymbol::`vftable'
EXTRN	?Read@CRSymbol@@UAEHPAU_iobuf@@@Z:NEAR		; CRSymbol::Read
;	COMDAT ??_7CRSymbol@@6B@
CONST	SEGMENT
??_7CRSymbol@@6B@ DD FLAT:?Read@CRSymbol@@UAEHPAU_iobuf@@@Z ; CRSymbol::`vftable'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??1CRSymbol@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CRSymbol@@QAE@XZ PROC NEAR				; CRSymbol::~CRSymbol, COMDAT
; _this$ = ecx

; 28   : 	~CRSymbol() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CRSymbol@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSymbol@@QAE@XZ			; CSymbol::~CSymbol
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CRSymbol@@QAE@XZ ENDP				; CRSymbol::~CRSymbol
_TEXT	ENDS
PUBLIC	??1CTextBlock@@QAE@XZ				; CTextBlock::~CTextBlock
PUBLIC	??_ECTextBlock@@QAEPAXI@Z			; CTextBlock::`vector deleting destructor'
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??_ECTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ECTextBlock@@QAEPAXI@Z PROC NEAR			; CTextBlock::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $L93193
	push	OFFSET FLAT:??1CTextBlock@@QAE@XZ	; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	144					; 00000090H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93194
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L93194:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $L93192
$L93193:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93196
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93196:
	mov	eax, DWORD PTR _this$[ebp]
$L93192:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECTextBlock@@QAEPAXI@Z ENDP				; CTextBlock::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbloc.hpp
;	COMDAT ??1CTextBlock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CTextBlock@@QAE@XZ PROC NEAR				; CTextBlock::~CTextBlock, COMDAT
; _this$ = ecx

; 9    :    ~CTextBlock() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTextBlock@@QAE@XZ ENDP				; CTextBlock::~CTextBlock
_TEXT	ENDS
PUBLIC	?trim@@YAXPAG@Z					; trim
EXTRN	_wcslen:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbloc.cpp
;	COMDAT ?trim@@YAXPAG@Z
_TEXT	SEGMENT
_pe$ = -8						; size = 4
_p$ = 8							; size = 4
?trim@@YAXPAG@Z PROC NEAR				; trim, COMDAT

; 14   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15   :  wchar_t *pe = p + _tcslen(p)-1;

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _pe$[ebp], edx
$L93241:

; 16   :  while ( *pe==_T(' ')||*pe==_T('\n')||*pe==_T('\r')) {

	mov	eax, DWORD PTR _pe$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $L93243
	mov	eax, DWORD PTR _pe$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $L93243
	mov	eax, DWORD PTR _pe$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $L93238
$L93243:

; 17   : 	*pe=_T('\0');

	mov	eax, DWORD PTR _pe$[ebp]
	mov	WORD PTR [eax], 0

; 18   : 	pe--;

	mov	eax, DWORD PTR _pe$[ebp]
	sub	eax, 2
	mov	DWORD PTR _pe$[ebp], eax

; 19   : 	}

	jmp	SHORT $L93241
$L93238:

; 20   : 
; 21   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?trim@@YAXPAG@Z ENDP					; trim
_TEXT	ENDS
PUBLIC	?trim@@YAXPAD@Z					; trim
EXTRN	_strlen:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?trim@@YAXPAD@Z
_TEXT	SEGMENT
_pe$ = -8						; size = 4
_p$ = 8							; size = 4
?trim@@YAXPAD@Z PROC NEAR				; trim, COMDAT

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 26   :  char *pe = p + strlen(p)-1;

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _pe$[ebp], edx
$L93250:

; 27   :  while ( *pe==' '||*pe=='\n'||*pe=='\r') {

	mov	eax, DWORD PTR _pe$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $L93252
	mov	eax, DWORD PTR _pe$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $L93252
	mov	eax, DWORD PTR _pe$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $L93247
$L93252:

; 28   : 	*pe='\0';

	mov	eax, DWORD PTR _pe$[ebp]
	mov	BYTE PTR [eax], 0

; 29   : 	pe--;

	mov	eax, DWORD PTR _pe$[ebp]
	sub	eax, 1
	mov	DWORD PTR _pe$[ebp], eax

; 30   : 	}

	jmp	SHORT $L93250
$L93247:

; 31   : 
; 32   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?trim@@YAXPAD@Z ENDP					; trim
_TEXT	ENDS
PUBLIC	?setupBuf@@YAXH@Z				; setupBuf
EXTRN	?charsize@@3HA:DWORD				; charsize
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?setupBuf@@YAXH@Z
_TEXT	SEGMENT
$T93666 = -212						; size = 4
$T93667 = -200						; size = 4
_i$ = 8							; size = 4
?setupBuf@@YAXH@Z PROC NEAR				; setupBuf, COMDAT

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 43   :  if ( i )

	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $L93258

; 44   :     rbuf = new unsigned char[RBUFSIZ * charsize];

	mov	eax, DWORD PTR ?charsize@@3HA		; charsize
	imul	eax, 32000				; 00007d00H
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T93666[ebp], eax
	mov	ecx, DWORD PTR $T93666[ebp]
	mov	DWORD PTR ?rbuf@@3PAEA, ecx		; rbuf

; 45   :  else

	jmp	SHORT $L93257
$L93258:

; 46   :     delete rbuf;

	mov	eax, DWORD PTR ?rbuf@@3PAEA		; rbuf
	mov	DWORD PTR $T93667[ebp], eax
	mov	ecx, DWORD PTR $T93667[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93257:

; 47   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setupBuf@@YAXH@Z ENDP					; setupBuf
_TEXT	ENDS
PUBLIC	?setConvertFile@@YAXH@Z				; setConvertFile
_BSS	SEGMENT
_cvtFile DD	01H DUP (?)
; Function compile flags: /Odt /RTCcsu /ZI
_BSS	ENDS
;	COMDAT ?setConvertFile@@YAXH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?setConvertFile@@YAXH@Z PROC NEAR			; setConvertFile, COMDAT

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 51   :  cvtFile = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _cvtFile, eax

; 52   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?setConvertFile@@YAXH@Z ENDP				; setConvertFile
_TEXT	ENDS
PUBLIC	??_C@_07JNGOCMA@deftabs?$AA@			; `string'
PUBLIC	??_C@_04PJFEOLPA@tabs?$AA@			; `string'
PUBLIC	??_C@_02JGOFGKFC@?$FO?$EA?$AA@			; `string'
PUBLIC	?ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z	; CTextBlock::ReadTextMbs
PUBLIC	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
EXTRN	__imp__MultiByteToWideChar@24:NEAR
EXTRN	_fgetc:NEAR
EXTRN	_fgets:NEAR
EXTRN	__mbslen:NEAR
EXTRN	_ungetc:NEAR
EXTRN	_memset:NEAR
EXTRN	_strcpy:NEAR
EXTRN	_strnicmp:NEAR
;	COMDAT ??_C@_07JNGOCMA@deftabs?$AA@
CONST	SEGMENT
??_C@_07JNGOCMA@deftabs?$AA@ DB 'deftabs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJFEOLPA@tabs?$AA@
CONST	SEGMENT
??_C@_04PJFEOLPA@tabs?$AA@ DB 'tabs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JGOFGKFC@?$FO?$EA?$AA@
CONST	SEGMENT
??_C@_02JGOFGKFC@?$FO?$EA?$AA@ DB '^@', 00H		; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z
_TEXT	SEGMENT
$T93672 = -320						; size = 4
$T93673 = -308						; size = 4
$T93674 = -296						; size = 4
$T93675 = -284						; size = 4
_endf$ = -68						; size = 4
_c$ = -56						; size = 4
_i$ = -44						; size = 4
_widebuf$ = -32						; size = 4
_this$ = -8						; size = 4
_stream$ = 8						; size = 4
_help$ = 12						; size = 4
?ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z PROC NEAR	; CTextBlock::ReadTextMbs, COMDAT
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   :  unsigned char *buf;
; 58   :  wchar_t *widebuf;
; 59   :  static unsigned char *getbuf=NULL;
; 60   :  int i = 0, c, endf=0;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _endf$[ebp], 0

; 61   :  long size;
; 62   :  static int flag;
; 63   :  
; 64   :  if ( getbuf == NULL ) {

	cmp	DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA, 0
	jne	SHORT $L93281

; 65   : 	 getbuf = new unsigned char[10000];

	push	10000					; 00002710H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T93672[ebp], eax
	mov	eax, DWORD PTR $T93672[ebp]
	mov	DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA, eax

; 66   :      memset( getbuf,0,10000*sizeof(unsigned char));

	push	10000					; 00002710H
	push	0
	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$L93281:

; 67   :      }
; 68   :  if ( feof( stream ) ) {

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $L93287

; 69   :     delete getbuf;

	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	mov	DWORD PTR $T93673[ebp], eax
	mov	ecx, DWORD PTR $T93673[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 70   : 	getbuf = NULL;

	mov	DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA, 0

; 71   : 	return( 0 );

	xor	eax, eax
	jmp	$L93270
$L93287:

; 72   :     }
; 73   :  do {
; 74   :     if ( ferror( stream ) )

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 32					; 00000020H
	je	SHORT $L93290

; 75   :        return( 1 );

	mov	eax, 1
	jmp	$L93270
$L93290:

; 76   : 	if ( feof( stream )) { 

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $L93291

; 77   :        endf = 1;

	mov	DWORD PTR _endf$[ebp], 1

; 78   : 	   break;

	jmp	$L93289
$L93291:

; 79   : 	}
; 80   :     else
; 81   : 		c = fgetc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax

; 82   : 	if ( c=='#' && !help ) {

	cmp	DWORD PTR _c$[ebp], 35			; 00000023H
	jne	SHORT $L93293
	cmp	DWORD PTR _help$[ebp], 0
	jne	SHORT $L93293

; 83   : 	   ungetc(c,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8

; 84   : 	   endf = 1;

	mov	DWORD PTR _endf$[ebp], 1

; 85   : 	   }
; 86   : 	else

	jmp	SHORT $L93294
$L93293:

; 87   : 	   ungetc(c,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8
$L93294:

; 88   : 	if ( !endf && !_mbslen(getbuf) ) {

	cmp	DWORD PTR _endf$[ebp], 0
	jne	$L93295
	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	push	eax
	call	__mbslen
	add	esp, 4
	test	eax, eax
	jne	$L93295

; 89   : 	   fgets((char *)getbuf,10000,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	10000					; 00002710H
	mov	ecx, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 90   :        if ( getbuf[0] == '#' && help )

	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $L93297
	cmp	DWORD PTR _help$[ebp], 0
	je	SHORT $L93297

; 91   :           fgets((char *)getbuf,100,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	100					; 00000064H
	mov	ecx, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH
$L93297:

; 92   :        if ( help && (!strnicmp((char *)getbuf,"deftabs",7) || !strnicmp((char *)getbuf,"tabs",4) || !strnicmp((char *)getbuf,"^@",2)) )

	cmp	DWORD PTR _help$[ebp], 0
	je	SHORT $L93295
	push	7
	push	OFFSET FLAT:??_C@_07JNGOCMA@deftabs?$AA@
	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $L93303
	push	4
	push	OFFSET FLAT:??_C@_04PJFEOLPA@tabs?$AA@
	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $L93303
	push	2
	push	OFFSET FLAT:??_C@_02JGOFGKFC@?$FO?$EA?$AA@
	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L93295
$L93303:

; 93   : 		endf = 1;

	mov	DWORD PTR _endf$[ebp], 1
$L93295:

; 94   : 	   }
; 95   : 	if ( !endf ) {

	cmp	DWORD PTR _endf$[ebp], 0
	jne	SHORT $L93288

; 96   : 	   strcpy((char *)&rbuf[i],(char *)getbuf);

	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	push	eax
	mov	ecx, DWORD PTR ?rbuf@@3PAEA		; rbuf
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 97   : 	   i+= strlen((char *)getbuf);

	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i$[ebp], eax

; 98   : 	   getbuf[0]='\0';

	mov	eax, DWORD PTR ?getbuf@?1??ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAEA
	mov	BYTE PTR [eax], 0
$L93288:

; 99   : 	   }
; 100  :     } while ( i < RBUFSIZ && !endf );

	cmp	DWORD PTR _i$[ebp], 32000		; 00007d00H
	jge	SHORT $L93289
	cmp	DWORD PTR _endf$[ebp], 0
	je	$L93287
$L93289:

; 101  :  rbuf[i++] = '\0';

	mov	eax, DWORD PTR ?rbuf@@3PAEA		; rbuf
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 102  :  _text_len = strlen((char *)rbuf);

	mov	eax, DWORD PTR ?rbuf@@3PAEA		; rbuf
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 103  :  widebuf = new wchar_t[_text_len+1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	lea	edx, DWORD PTR [ecx+ecx+2]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T93674[ebp], eax
	mov	eax, DWORD PTR $T93674[ebp]
	mov	DWORD PTR _widebuf$[ebp], eax

; 104  :  _text_len =MultiByteToWideChar(CP_UTF8,0,(LPCSTR)rbuf,_text_len,widebuf,_text_len+1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _widebuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	mov	edx, DWORD PTR ?rbuf@@3PAEA		; rbuf
	push	edx
	push	0
	push	65001					; 0000fde9H
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 105  :  //mbstowcs(widebuf,(const char *)rbuf,_mbslen(rbuf));
; 106  :  widebuf[_text_len] = L'\0';

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _widebuf$[ebp]
	mov	WORD PTR [edx+ecx*2], 0

; 107  :  _text = widebuf;

	mov	eax, DWORD PTR _widebuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=

; 108  :  delete widebuf;

	mov	eax, DWORD PTR _widebuf$[ebp]
	mov	DWORD PTR $T93675[ebp], eax
	mov	ecx, DWORD PTR $T93675[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 109  :  return( 0 );

	xor	eax, eax
$L93270:

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z ENDP	; CTextBlock::ReadTextMbs
_TEXT	ENDS
PUBLIC	??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@	; `string'
PUBLIC	?ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z	; CTextBlock::ReadText
PUBLIC	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBE@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
EXTRN	_fgetwc:NEAR
EXTRN	_ungetwc:NEAR
EXTRN	_fgetws:NEAR
EXTRN	@_RTC_Check_4_to_2@4:NEAR
EXTRN	_wcscpy:NEAR
EXTRN	__wcsnicmp:NEAR
;	COMDAT ??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@ DB 'd', 00H
	DB	'e', 00H, 'f', 00H, 't', 00H, 'a', 00H, 'b', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@ DB 't', 00H, 'a', 00H, 'b', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@
CONST	SEGMENT
??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@ DB '^', 00H, '@', 00H, 00H, 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z
_TEXT	SEGMENT
$T93678 = -284						; size = 4
$T93679 = -272						; size = 4
_endf$ = -56						; size = 4
_c$ = -44						; size = 4
_i$ = -32						; size = 4
_this$ = -8						; size = 4
_stream$ = 8						; size = 4
_help$ = 12						; size = 4
?ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z PROC NEAR	; CTextBlock::ReadText, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 116  :  TCHAR *buf;
; 117  :  static TCHAR *getbuf=NULL;
; 118  :  int i = 0, c, endf=0;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _endf$[ebp], 0

; 119  :  long size;
; 120  :  static int flag;
; 121  :  
; 122  :  if ( getbuf == NULL ) {

	cmp	DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA, 0
	jne	SHORT $L93331

; 123  : 	 getbuf = new TCHAR[10000];

	push	20000					; 00004e20H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T93678[ebp], eax
	mov	eax, DWORD PTR $T93678[ebp]
	mov	DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA, eax

; 124  :      memset( getbuf,0,10000*sizeof(TCHAR));

	push	20000					; 00004e20H
	push	0
	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$L93331:

; 125  :      }
; 126  :  if ( feof( stream ) ) {

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $L93337

; 127  :     delete getbuf;

	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	mov	DWORD PTR $T93679[ebp], eax
	mov	ecx, DWORD PTR $T93679[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 128  : 	getbuf = NULL;

	mov	DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA, 0

; 129  : 	return( 0 );

	xor	eax, eax
	jmp	$L93321
$L93337:

; 130  :     }
; 131  :  do {
; 132  :     if ( ferror( stream ) )

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 32					; 00000020H
	je	SHORT $L93340

; 133  :        return( 1 );

	mov	eax, 1
	jmp	$L93321
$L93340:

; 134  : 	if ( feof( stream )) { 

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $L93341

; 135  :        endf = 1;

	mov	DWORD PTR _endf$[ebp], 1

; 136  : 	   break;

	jmp	$L93339
$L93341:

; 137  : 	}
; 138  :     else
; 139  : 		c = _fgettc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetwc
	add	esp, 4
	movzx	ecx, ax
	mov	DWORD PTR _c$[ebp], ecx

; 140  : 	if ( c==_T('#') && !help ) {

	cmp	DWORD PTR _c$[ebp], 35			; 00000023H
	jne	SHORT $L93343
	cmp	DWORD PTR _help$[ebp], 0
	jne	SHORT $L93343

; 141  : 	   _ungettc(c,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	call	_ungetwc
	add	esp, 8

; 142  : 	   endf = 1;

	mov	DWORD PTR _endf$[ebp], 1

; 143  : 	   }
; 144  : 	else

	jmp	SHORT $L93344
$L93343:

; 145  : 	   _ungettc(c,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	call	_ungetwc
	add	esp, 8
$L93344:

; 146  : 	if ( !endf && !_tcslen(getbuf) ) {

	cmp	DWORD PTR _endf$[ebp], 0
	jne	$L93345
	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	push	eax
	call	_wcslen
	add	esp, 4
	test	eax, eax
	jne	$L93345

; 147  : 	   _fgetts(getbuf,10000,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	10000					; 00002710H
	mov	ecx, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	push	ecx
	call	_fgetws
	add	esp, 12					; 0000000cH

; 148  :        if ( getbuf[0] == _T('#') && help )

	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $L93346
	cmp	DWORD PTR _help$[ebp], 0
	je	SHORT $L93346

; 149  :           _fgetts(getbuf,100,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	100					; 00000064H
	mov	ecx, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	push	ecx
	call	_fgetws
	add	esp, 12					; 0000000cH
$L93346:

; 150  :        if ( help && (!_tcsnicmp(getbuf,_T("deftabs"),7) || !_tcsnicmp(getbuf,_T("tabs"),4) || !_tcsnicmp(getbuf,_T("^@"),2)) )

	cmp	DWORD PTR _help$[ebp], 0
	je	SHORT $L93345
	push	7
	push	OFFSET FLAT:??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	push	eax
	call	__wcsnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $L93348
	push	4
	push	OFFSET FLAT:??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	push	eax
	call	__wcsnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $L93348
	push	2
	push	OFFSET FLAT:??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@
	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	push	eax
	call	__wcsnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L93345
$L93348:

; 151  : 		endf = 1;

	mov	DWORD PTR _endf$[ebp], 1
$L93345:

; 152  : 	   }
; 153  : 	if ( !endf ) {

	cmp	DWORD PTR _endf$[ebp], 0
	jne	SHORT $L93338

; 154  : 	   _tcscpy((TCHAR *)&rbuf[i],getbuf);

	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	push	eax
	mov	ecx, DWORD PTR ?rbuf@@3PAEA		; rbuf
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_wcscpy
	add	esp, 8

; 155  : 	   i+= _tcslen(getbuf);

	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	push	eax
	call	_wcslen
	add	esp, 4
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i$[ebp], eax

; 156  : 	   getbuf[0]=_T('\0');

	mov	eax, DWORD PTR ?getbuf@?1??ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z@4PAGA
	mov	WORD PTR [eax], 0
$L93338:

; 157  : 	   }
; 158  :     } while ( i < RBUFSIZ && !endf );

	cmp	DWORD PTR _i$[ebp], 32000		; 00007d00H
	jge	SHORT $L93339
	cmp	DWORD PTR _endf$[ebp], 0
	je	$L93337
$L93339:

; 159  :  rbuf[i++] = _T('\0');

	mov	eax, DWORD PTR ?rbuf@@3PAEA		; rbuf
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 160  :  _text_len = _tcslen((const TCHAR *)rbuf);

	mov	eax, DWORD PTR ?rbuf@@3PAEA		; rbuf
	push	eax
	call	_wcslen
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 161  :  _text = rbuf;

	mov	eax, DWORD PTR ?rbuf@@3PAEA		; rbuf
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBE@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=

; 162  :  return( 0 );

	xor	eax, eax
$L93321:

; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z ENDP		; CTextBlock::ReadText
_TEXT	ENDS
PUBLIC	??_C@_05CAIFBNAL@?$CFs?$AB?$CFd?$AA@		; `string'
PUBLIC	?SetID@CTextBlock@@QAEHPADH@Z			; CTextBlock::SetID
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	_sprintf:NEAR
;	COMDAT ??_C@_05CAIFBNAL@?$CFs?$AB?$CFd?$AA@
CONST	SEGMENT
??_C@_05CAIFBNAL@?$CFs?$AB?$CFd?$AA@ DB '%s', 01H, '%d', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?SetID@CTextBlock@@QAEHPADH@Z
_TEXT	SEGMENT
_buf$ = -72						; size = 50
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_id$ = 8						; size = 4
_n$ = 12						; size = 4
?SetID@CTextBlock@@QAEHPADH@Z PROC NEAR			; CTextBlock::SetID, COMDAT
; _this$ = ecx

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 167  :  char buf[50];
; 168  : 
; 169  :  _type = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1

; 170  :  sprintf( buf, "%s\1%d", id, n );

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_05CAIFBNAL@?$CFs?$AB?$CFd?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 171  :  strcpy( _IDstring, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	_strcpy
	add	esp, 8

; 172  :  return( 1 );

	mov	eax, 1

; 173  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93688
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93688:
	DD	1
	DD	$L93687
$L93687:
	DD	-72					; ffffffb8H
	DD	50					; 00000032H
	DD	$L93684
$L93684:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetID@CTextBlock@@QAEHPADH@Z ENDP			; CTextBlock::SetID
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExW@4:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -296				; size = 4
_ver$ = -284						; size = 276
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-492]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

	mov	DWORD PTR _ver$[ebp], 276		; 00000114H

; 139  : 	::GetVersionEx( &ver );

	mov	esi, esp
	lea	eax, DWORD PTR _ver$[ebp]
	push	eax
	call	DWORD PTR __imp__GetVersionExW@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

	cmp	DWORD PTR _ver$[ebp+16], 2
	jne	SHORT $L24087
	cmp	DWORD PTR _ver$[ebp+4], 5
	jb	SHORT $L24087

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

	jmp	SHORT $L24088
$L24087:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24088:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

	mov	eax, DWORD PTR _pfnGetThreadACP$[ebp]
	push	eax
	push	OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	call	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

	mov	esi, esp
	call	DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	cmp	esi, esp
	call	__RTC_CheckEsp

; 152  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93697
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 492				; 000001ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93697:
	DD	1
	DD	$L93696
$L93696:
	DD	-284					; fffffee4H
	DD	276					; 00000114H
	DD	$L93694
$L93694:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

	mov	esi, esp
	mov	eax, DWORD PTR _pNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	call	DWORD PTR __imp__InterlockedExchange@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24075 = -52					; size = 4
_szACP$ = -40						; size = 7
_lcidThread$ = -24					; size = 4
_nACP$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

	mov	DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

	mov	esi, esp
	call	DWORD PTR __imp__GetThreadLocale@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

	mov	esi, esp
	push	7
	lea	eax, DWORD PTR _szACP$[ebp]
	push	eax
	push	4100					; 00001004H
	mov	ecx, DWORD PTR _lcidThread$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $L24074

; 111  : 	{
; 112  : 		char* pch = szACP;

	lea	eax, DWORD PTR _szACP$[ebp]
	mov	DWORD PTR _pch$24075[ebp], eax
$L24077:

; 113  : 		while (*pch != '\0')

	mov	eax, DWORD PTR _pch$24075[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L24074

; 114  : 		{
; 115  : 			nACP *= 10;

	mov	eax, DWORD PTR _nACP$[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _nACP$[ebp], eax

; 116  : 			nACP += *pch++ - '0';

	mov	eax, DWORD PTR _pch$24075[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _nACP$[ebp]
	lea	eax, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _nACP$[ebp], eax
	mov	ecx, DWORD PTR _pch$24075[ebp]
	add	ecx, 1
	mov	DWORD PTR _pch$24075[ebp], ecx

; 117  : 		}

	jmp	SHORT $L24077
$L24074:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

	cmp	DWORD PTR _nACP$[ebp], 0
	jne	SHORT $L24079

; 121  : 		nACP = ::GetACP();

	mov	esi, esp
	call	DWORD PTR __imp__GetACP@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nACP$[ebp], eax
$L24079:

; 122  : 
; 123  : 	return nACP;

	mov	eax, DWORD PTR _nACP$[ebp]

; 124  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93706
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93706:
	DD	1
	DD	$L93705
$L93705:
	DD	-40					; ffffffd8H
	DD	7
	DD	$L93703
$L93703:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	65					; 00000041H
	DB	67					; 00000043H
	DB	80					; 00000050H
	DB	0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 128  : 	return( CP_THREAD_ACP );

	mov	eax, 3

; 129  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
PUBLIC	??_C@_05CFAGJJJN@?$CFs?$AB?$CFs?$AA@		; `string'
PUBLIC	?SetID@CTextBlock@@QAEHPAD0@Z			; CTextBlock::SetID
;	COMDAT ??_C@_05CFAGJJJN@?$CFs?$AB?$CFs?$AA@
; File c:\astrow32dev\tbt32\textbloc.cpp
CONST	SEGMENT
??_C@_05CFAGJJJN@?$CFs?$AB?$CFs?$AA@ DB '%s', 01H, '%s', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?SetID@CTextBlock@@QAEHPAD0@Z
_TEXT	SEGMENT
_buf$ = -72						; size = 50
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_id1$ = 8						; size = 4
_id2$ = 12						; size = 4
?SetID@CTextBlock@@QAEHPAD0@Z PROC NEAR			; CTextBlock::SetID, COMDAT
; _this$ = ecx

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 177  :  char buf[50];
; 178  : 
; 179  :  _type = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 2

; 180  :  sprintf( buf, "%s\1%s", id1, id2 );

	mov	eax, DWORD PTR _id2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id1$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_05CFAGJJJN@?$CFs?$AB?$CFs?$AA@
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 181  :  strcpy( _IDstring, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	_strcpy
	add	esp, 8

; 182  :  return( 1 );

	mov	eax, 1

; 183  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93715
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93715:
	DD	1
	DD	$L93714
$L93714:
	DD	-72					; ffffffb8H
	DD	50					; 00000032H
	DD	$L93712
$L93712:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetID@CTextBlock@@QAEHPAD0@Z ENDP			; CTextBlock::SetID
_TEXT	ENDS
PUBLIC	??_C@_08DOADHGLL@?$CFs?$AB?$CFs?$AB?$CFs?$AA@	; `string'
PUBLIC	?SetID@CTextBlock@@QAEHPAD00@Z			; CTextBlock::SetID
;	COMDAT ??_C@_08DOADHGLL@?$CFs?$AB?$CFs?$AB?$CFs?$AA@
CONST	SEGMENT
??_C@_08DOADHGLL@?$CFs?$AB?$CFs?$AB?$CFs?$AA@ DB '%s', 01H, '%s', 01H, '%'
	DB	's', 00H					; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?SetID@CTextBlock@@QAEHPAD00@Z
_TEXT	SEGMENT
_buf$ = -72						; size = 50
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_id1$ = 8						; size = 4
_id2$ = 12						; size = 4
_id3$ = 16						; size = 4
?SetID@CTextBlock@@QAEHPAD00@Z PROC NEAR		; CTextBlock::SetID, COMDAT
; _this$ = ecx

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 187  :  char buf[50];
; 188  : 
; 189  :  _type = 3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 3

; 190  :  sprintf( buf, "%s\1%s\1%s", id1, id2, id3 );

	mov	eax, DWORD PTR _id3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id1$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_08DOADHGLL@?$CFs?$AB?$CFs?$AB?$CFs?$AA@
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 191  :  strcpy( _IDstring, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	_strcpy
	add	esp, 8

; 192  :  return( 1 );

	mov	eax, 1

; 193  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93722
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L93722:
	DD	1
	DD	$L93721
$L93721:
	DD	-72					; ffffffb8H
	DD	50					; 00000032H
	DD	$L93719
$L93719:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetID@CTextBlock@@QAEHPAD00@Z ENDP			; CTextBlock::SetID
_TEXT	ENDS
PUBLIC	??_C@_0M@IMBPAMON@?$CF50?$FL?$FO?$AB?$FN?$CFc?$CFd?$AA@ ; `string'
PUBLIC	?GetIDParts@CTextBlock@@QAEHPADPAH@Z		; CTextBlock::GetIDParts
EXTRN	_sscanf:NEAR
;	COMDAT ??_C@_0M@IMBPAMON@?$CF50?$FL?$FO?$AB?$FN?$CFc?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@IMBPAMON@?$CF50?$FL?$FO?$AB?$FN?$CFc?$CFd?$AA@ DB '%50[^', 01H, ']'
	DB	'%c%d', 00H					; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?GetIDParts@CTextBlock@@QAEHPADPAH@Z
_TEXT	SEGMENT
_dummy$ = -17						; size = 1
_this$ = -8						; size = 4
_id$ = 8						; size = 4
_n$ = 12						; size = 4
?GetIDParts@CTextBlock@@QAEHPADPAH@Z PROC NEAR		; CTextBlock::GetIDParts, COMDAT
; _this$ = ecx

; 196  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  :  char dummy;
; 198  :  return( sscanf( _IDstring, "%50[^\1]%c%d", id, &dummy, n ) );

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0M@IMBPAMON@?$CF50?$FL?$FO?$AB?$FN?$CFc?$CFd?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_sscanf
	add	esp, 20					; 00000014H

; 199  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93727
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93727:
	DD	1
	DD	$L93726
$L93726:
	DD	-17					; ffffffefH
	DD	1
	DD	$L93725
$L93725:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
?GetIDParts@CTextBlock@@QAEHPADPAH@Z ENDP		; CTextBlock::GetIDParts
_TEXT	ENDS
PUBLIC	??_C@_0M@EIBCFHLL@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@ ; `string'
PUBLIC	?GetIDParts@CTextBlock@@QAEHPAD0@Z		; CTextBlock::GetIDParts
;	COMDAT ??_C@_0M@EIBCFHLL@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@EIBCFHLL@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@ DB '%40[^', 01H, ']'
	DB	'%c%s', 00H					; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?GetIDParts@CTextBlock@@QAEHPAD0@Z
_TEXT	SEGMENT
_dummy$ = -17						; size = 1
_this$ = -8						; size = 4
_id1$ = 8						; size = 4
_id2$ = 12						; size = 4
?GetIDParts@CTextBlock@@QAEHPAD0@Z PROC NEAR		; CTextBlock::GetIDParts, COMDAT
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 203  :  char dummy;
; 204  :  return( sscanf( _IDstring, "%40[^\1]%c%s", id1, &dummy, id2 ) );

	mov	eax, DWORD PTR _id2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id1$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0M@EIBCFHLL@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_sscanf
	add	esp, 20					; 00000014H

; 205  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93732
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93732:
	DD	1
	DD	$L93731
$L93731:
	DD	-17					; ffffffefH
	DD	1
	DD	$L93730
$L93730:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
?GetIDParts@CTextBlock@@QAEHPAD0@Z ENDP			; CTextBlock::GetIDParts
_TEXT	ENDS
PUBLIC	??_C@_0BF@KNPCFHEI@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@ ; `string'
PUBLIC	?GetIDParts@CTextBlock@@QAEHPAD00@Z		; CTextBlock::GetIDParts
;	COMDAT ??_C@_0BF@KNPCFHEI@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@KNPCFHEI@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@ DB '%'
	DB	'40[^', 01H, ']%c%40[^', 01H, ']%c%s', 00H	; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?GetIDParts@CTextBlock@@QAEHPAD00@Z
_TEXT	SEGMENT
_dummy$ = -17						; size = 1
_this$ = -8						; size = 4
_id1$ = 8						; size = 4
_id2$ = 12						; size = 4
_id3$ = 16						; size = 4
?GetIDParts@CTextBlock@@QAEHPAD00@Z PROC NEAR		; CTextBlock::GetIDParts, COMDAT
; _this$ = ecx

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 209  :  char dummy;
; 210  :  return( sscanf( _IDstring, "%40[^\1]%c%40[^\1]%c%s", id1, &dummy, id2, &dummy, id3 ) );

	mov	eax, DWORD PTR _id3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id2$[ebp]
	push	edx
	lea	eax, DWORD PTR _dummy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id1$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0BF@KNPCFHEI@?$CF40?$FL?$FO?$AB?$FN?$CFc?$CF40?$FL?$FO?$AB?$FN?$CFc?$CFs?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	_sscanf
	add	esp, 28					; 0000001cH

; 211  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93737
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L93737:
	DD	1
	DD	$L93736
$L93736:
	DD	-17					; ffffffefH
	DD	1
	DD	$L93735
$L93735:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
?GetIDParts@CTextBlock@@QAEHPAD00@Z ENDP		; CTextBlock::GetIDParts
_TEXT	ENDS
PUBLIC	??_C@_1BM@GJEPBGID@?$AA?$CD?$AA?5?$AA?$CF?$AA4?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@		; `string'
PUBLIC	?ReadHeader@CTextBlock@@QAEHPAU_iobuf@@PAHPAD@Z	; CTextBlock::ReadHeader
EXTRN	_fwscanf:NEAR
EXTRN	__strupr:NEAR
EXTRN	_wcscmp:NEAR
EXTRN	_wcstombs:NEAR
;	COMDAT ??_C@_1BM@GJEPBGID@?$AA?$CD?$AA?5?$AA?$CF?$AA4?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@GJEPBGID@?$AA?$CD?$AA?5?$AA?$CF?$AA4?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@ DB '#'
	DB	00H, ' ', 00H, '%', 00H, '4', 00H, '9', 00H, 'l', 00H, '[', 00H
	DB	'^', 00H, 0aH, 00H, ']', 00H, '%', 00H, 'l', 00H, 'c', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
CONST	SEGMENT
??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@ DB '+', 00H, 00H, 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?ReadHeader@CTextBlock@@QAEHPAU_iobuf@@PAHPAD@Z
_TEXT	SEGMENT
_cmt$ = -800						; size = 600
_c$ = -192						; size = 2
_tbufi$ = -180						; size = 100
_bufi$ = -72						; size = 50
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_stream$ = 8						; size = 4
_prev$ = 12						; size = 4
_prid$ = 16						; size = 4
?ReadHeader@CTextBlock@@QAEHPAU_iobuf@@PAHPAD@Z PROC NEAR ; CTextBlock::ReadHeader, COMDAT
; _this$ = ecx

; 215  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 996				; 000003e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-996]
	mov	ecx, 249				; 000000f9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 216  :  char bufi[50];
; 217  :  TCHAR tbufi[50], c, cmt[300];
; 218  :  memset(bufi,0,50);

	push	50					; 00000032H
	push	0
	lea	eax, DWORD PTR _bufi$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 219  :  c = _fgettc( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetwc
	add	esp, 4
	mov	WORD PTR _c$[ebp], ax

; 220  :  if ( c == _TEOF )

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $L93411

; 221  :     return( 0 );

	xor	eax, eax
	jmp	$L93405
$L93411:

; 222  :  
; 223  :  if ( c == _T('@') ) {

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 64					; 00000040H
	jne	SHORT $L93412
$L93414:

; 224  : 	 while ( c == _T('@') ) {

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 64					; 00000040H
	jne	SHORT $L93415

; 225  : 	    _fgetts(cmt,299,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	299					; 0000012bH
	lea	ecx, DWORD PTR _cmt$[ebp]
	push	ecx
	call	_fgetws
	add	esp, 12					; 0000000cH

; 226  : 		c = _fgettc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetwc
	add	esp, 4
	mov	WORD PTR _c$[ebp], ax

; 227  : 	    }

	jmp	SHORT $L93414
$L93415:

; 228  : 	 _ungettc(c,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	cx, WORD PTR _c$[ebp]
	push	ecx
	call	_ungetwc
	add	esp, 8

; 229  :     }
; 230  :  else 

	jmp	SHORT $L93416
$L93412:

; 231  :     _ungettc( c, stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	cx, WORD PTR _c$[ebp]
	push	ecx
	call	_ungetwc
	add	esp, 8
$L93416:

; 232  :  _ftscanf( stream, _T("# %49l[^\n]%lc"), tbufi, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tbufi$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_1BM@GJEPBGID@?$AA?$CD?$AA?5?$AA?$CF?$AA4?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_fwscanf
	add	esp, 16					; 00000010H

; 233  :  if ( c == _T(' ') ) {

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $L93418
$L93419:

; 234  :     do {
; 235  :        c = _fgettc( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetwc
	add	esp, 4
	mov	WORD PTR _c$[ebp], ax

; 236  :        } while ( c != _T('\n') );

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $L93419
$L93418:

; 237  :     }
; 238  :  trim((wchar_t *)tbufi);

	lea	eax, DWORD PTR _tbufi$[ebp]
	push	eax
	call	?trim@@YAXPAG@Z				; trim
	add	esp, 4

; 239  :  if ( !_tcscmp( tbufi, _T("+") ) ) {

	push	OFFSET FLAT:??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
	lea	eax, DWORD PTR _tbufi$[ebp]
	push	eax
	call	_wcscmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93423

; 240  :     SetID( prid, *prev+1 );

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _prid$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetID@CTextBlock@@QAEHPADH@Z		; CTextBlock::SetID

; 241  :     *prev+=1;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [edx], ecx

; 242  :     }
; 243  :  else {

	jmp	SHORT $L93425
$L93423:

; 244  :     wcstombs(bufi,(const wchar_t *)tbufi,_tcslen(tbufi));

	lea	eax, DWORD PTR _tbufi$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _tbufi$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bufi$[ebp]
	push	edx
	call	_wcstombs
	add	esp, 12					; 0000000cH

; 245  : 	bufi[_tcslen(tbufi)]='\0';

	lea	eax, DWORD PTR _tbufi$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	mov	BYTE PTR _bufi$[ebp+eax], 0

; 246  :     SetID( _strupr(bufi), 0 );

	push	0
	lea	eax, DWORD PTR _bufi$[ebp]
	push	eax
	call	__strupr
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetID@CTextBlock@@QAEHPADH@Z		; CTextBlock::SetID

; 247  :     strcpy( prid, _strupr(bufi) );

	lea	eax, DWORD PTR _bufi$[ebp]
	push	eax
	call	__strupr
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _prid$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 248  :     *prev = 0;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [eax], 0
$L93425:

; 249  :     }
; 250  :  return( ferror( stream ) );

	mov	eax, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 32					; 00000020H
$L93405:

; 251  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93747
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 996				; 000003e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L93747:
	DD	4
	DD	$L93746
$L93746:
	DD	-72					; ffffffb8H
	DD	50					; 00000032H
	DD	$L93741
	DD	-180					; ffffff4cH
	DD	100					; 00000064H
	DD	$L93742
	DD	-192					; ffffff40H
	DD	2
	DD	$L93743
	DD	-800					; fffffce0H
	DD	600					; 00000258H
	DD	$L93744
$L93744:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	0
$L93743:
	DB	99					; 00000063H
	DB	0
$L93742:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	0
$L93741:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	0
?ReadHeader@CTextBlock@@QAEHPAU_iobuf@@PAHPAD@Z ENDP	; CTextBlock::ReadHeader
_TEXT	ENDS
PUBLIC	??_C@_1CE@CMABCPBA@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@ ; `string'
PUBLIC	?ReadHeader2@CTextBlock@@QAEHPAU_iobuf@@@Z	; CTextBlock::ReadHeader2
;	COMDAT ??_C@_1CE@CMABCPBA@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@CMABCPBA@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@ DB '#'
	DB	00H, ' ', 00H, '%', 00H, 'l', 00H, 's', 00H, ' ', 00H, '%', 00H
	DB	'3', 00H, '9', 00H, 'l', 00H, '[', 00H, '^', 00H, 0aH, 00H, ']'
	DB	00H, '%', 00H, 'l', 00H, 'c', 00H, 00H, 00H	; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?ReadHeader2@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT
_buf2$ = -904						; size = 40
_buf1$ = -856						; size = 40
_cmt$ = -808						; size = 600
_c$ = -200						; size = 2
_tbuf2$ = -188						; size = 80
_tbuf1$ = -100						; size = 80
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_stream$ = 8						; size = 4
?ReadHeader2@CTextBlock@@QAEHPAU_iobuf@@@Z PROC NEAR	; CTextBlock::ReadHeader2, COMDAT
; _this$ = ecx

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1100				; 0000044cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1100]
	mov	ecx, 275				; 00000113H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 255  :  TCHAR tbuf1[40], tbuf2[40], c, cmt[300];
; 256  :  char buf1[40], buf2[40];
; 257  : 
; 258  :  c = _fgettc( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetwc
	add	esp, 4
	mov	WORD PTR _c$[ebp], ax

; 259  :  if ( c == _TEOF )

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $L93438

; 260  :     return( 0 );

	xor	eax, eax
	jmp	$L93430
$L93438:

; 261  :   if ( c == _T('@') ) {

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 64					; 00000040H
	jne	SHORT $L93439
$L93441:

; 262  : 	 while ( c == _T('@') ) {

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 64					; 00000040H
	jne	SHORT $L93442

; 263  : 	    _fgetts(cmt,299,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	299					; 0000012bH
	lea	ecx, DWORD PTR _cmt$[ebp]
	push	ecx
	call	_fgetws
	add	esp, 12					; 0000000cH

; 264  : 		c = _fgettc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetwc
	add	esp, 4
	mov	WORD PTR _c$[ebp], ax

; 265  : 	    }

	jmp	SHORT $L93441
$L93442:

; 266  : 	 _ungettc(c,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	cx, WORD PTR _c$[ebp]
	push	ecx
	call	_ungetwc
	add	esp, 8

; 267  :     }
; 268  :  else 

	jmp	SHORT $L93443
$L93439:

; 269  :     _ungettc( c, stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	cx, WORD PTR _c$[ebp]
	push	ecx
	call	_ungetwc
	add	esp, 8
$L93443:

; 270  :  _ftscanf( stream, _T("# %ls %39l[^\n]%lc"), tbuf1, tbuf2, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tbuf2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tbuf1$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1CE@CMABCPBA@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl?$AAc?$AA?$AA@
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fwscanf
	add	esp, 20					; 00000014H

; 271  :  trim((wchar_t *)tbuf2);

	lea	eax, DWORD PTR _tbuf2$[ebp]
	push	eax
	call	?trim@@YAXPAG@Z				; trim
	add	esp, 4

; 272  :  wcstombs(buf1,(const wchar_t *)tbuf1,_tcslen(tbuf1));

	lea	eax, DWORD PTR _tbuf1$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _tbuf1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf1$[ebp]
	push	edx
	call	_wcstombs
	add	esp, 12					; 0000000cH

; 273  :  buf1[_tcslen(tbuf1)] = '\0';

	lea	eax, DWORD PTR _tbuf1$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	mov	BYTE PTR _buf1$[ebp+eax], 0

; 274  :  wcstombs(buf2,(const wchar_t *)tbuf2,_tcslen(tbuf2));

	lea	eax, DWORD PTR _tbuf2$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _tbuf2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf2$[ebp]
	push	edx
	call	_wcstombs
	add	esp, 12					; 0000000cH

; 275  :  buf2[_tcslen(tbuf2)] = '\0';

	lea	eax, DWORD PTR _tbuf2$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	mov	BYTE PTR _buf2$[ebp+eax], 0

; 276  :  SetID( _strupr(buf1), _strupr(buf2) );

	lea	eax, DWORD PTR _buf2$[ebp]
	push	eax
	call	__strupr
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _buf1$[ebp]
	push	ecx
	call	__strupr
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetID@CTextBlock@@QAEHPAD0@Z		; CTextBlock::SetID

; 277  :  return( ferror( stream ) );

	mov	eax, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 32					; 00000020H
$L93430:

; 278  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93759
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1100				; 0000044cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93759:
	DD	6
	DD	$L93758
$L93758:
	DD	-100					; ffffff9cH
	DD	80					; 00000050H
	DD	$L93751
	DD	-188					; ffffff44H
	DD	80					; 00000050H
	DD	$L93752
	DD	-200					; ffffff38H
	DD	2
	DD	$L93753
	DD	-808					; fffffcd8H
	DD	600					; 00000258H
	DD	$L93754
	DD	-856					; fffffca8H
	DD	40					; 00000028H
	DD	$L93755
	DD	-904					; fffffc78H
	DD	40					; 00000028H
	DD	$L93756
$L93756:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	50					; 00000032H
	DB	0
$L93755:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	49					; 00000031H
	DB	0
$L93754:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	0
$L93753:
	DB	99					; 00000063H
	DB	0
$L93752:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	50					; 00000032H
	DB	0
$L93751:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	49					; 00000031H
	DB	0
?ReadHeader2@CTextBlock@@QAEHPAU_iobuf@@@Z ENDP		; CTextBlock::ReadHeader2
_TEXT	ENDS
PUBLIC	??_C@_1CM@KAJGGJJO@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl@ ; `string'
PUBLIC	?ReadHeader3@CTextBlock@@QAEHPAU_iobuf@@@Z	; CTextBlock::ReadHeader3
;	COMDAT ??_C@_1CM@KAJGGJJO@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl@
CONST	SEGMENT
??_C@_1CM@KAJGGJJO@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl@ DB '#'
	DB	00H, ' ', 00H, '%', 00H, 'l', 00H, 's', 00H, ' ', 00H, '%', 00H
	DB	'l', 00H, 's', 00H, ' ', 00H, '%', 00H, '3', 00H, '9', 00H, 'l'
	DB	00H, '[', 00H, '^', 00H, 0aH, 00H, ']', 00H, '%', 00H, 'l', 00H
	DB	'c', 00H, 00H, 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?ReadHeader3@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT
_cmt$ = -1040						; size = 600
_c$ = -432						; size = 2
_tbuf3$ = -420						; size = 80
_tbuf2$ = -332						; size = 80
_tbuf1$ = -244						; size = 80
_buf3$ = -156						; size = 40
_buf2$ = -108						; size = 40
_buf1$ = -60						; size = 40
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_stream$ = 8						; size = 4
?ReadHeader3@CTextBlock@@QAEHPAU_iobuf@@@Z PROC NEAR	; CTextBlock::ReadHeader3, COMDAT
; _this$ = ecx

; 281  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1236				; 000004d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1236]
	mov	ecx, 309				; 00000135H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 282  :  char buf1[40], buf2[40], buf3[40];
; 283  :  TCHAR tbuf1[40], tbuf2[40], tbuf3[40], c, cmt[300];
; 284  :  c = _fgettc( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetwc
	add	esp, 4
	mov	WORD PTR _c$[ebp], ax

; 285  :  if ( c == _TEOF )

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $L93461

; 286  :     return( 0 );

	xor	eax, eax
	jmp	$L93451
$L93461:

; 287  :  if ( c == _T('@') ) {

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 64					; 00000040H
	jne	SHORT $L93462
$L93464:

; 288  : 	 while ( c == _T('@') ) {

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 64					; 00000040H
	jne	SHORT $L93465

; 289  : 	    _fgetts(cmt,299,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	299					; 0000012bH
	lea	ecx, DWORD PTR _cmt$[ebp]
	push	ecx
	call	_fgetws
	add	esp, 12					; 0000000cH

; 290  : 		c = _fgettc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetwc
	add	esp, 4
	mov	WORD PTR _c$[ebp], ax

; 291  : 	    }

	jmp	SHORT $L93464
$L93465:

; 292  : 	_ungettc(c,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	cx, WORD PTR _c$[ebp]
	push	ecx
	call	_ungetwc
	add	esp, 8

; 293  :     }
; 294  :  else 

	jmp	SHORT $L93466
$L93462:

; 295  :    _ungettc( c, stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	cx, WORD PTR _c$[ebp]
	push	ecx
	call	_ungetwc
	add	esp, 8
$L93466:

; 296  :  _ftscanf( stream, _T("# %ls %ls %39l[^\n]%lc"), tbuf1, tbuf2, tbuf3, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tbuf3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tbuf2$[ebp]
	push	edx
	lea	eax, DWORD PTR _tbuf1$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1CM@KAJGGJJO@?$AA?$CD?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CF?$AA3?$AA9?$AAl?$AA?$FL?$AA?$FO?$AA?6?$AA?$FN?$AA?$CF?$AAl@
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_fwscanf
	add	esp, 24					; 00000018H

; 297  :  trim((wchar_t *)tbuf3);

	lea	eax, DWORD PTR _tbuf3$[ebp]
	push	eax
	call	?trim@@YAXPAG@Z				; trim
	add	esp, 4

; 298  :  wcstombs(buf1,(const wchar_t *)tbuf1,_tcslen(tbuf1));

	lea	eax, DWORD PTR _tbuf1$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _tbuf1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf1$[ebp]
	push	edx
	call	_wcstombs
	add	esp, 12					; 0000000cH

; 299  :  buf1[_tcslen(tbuf1)] = '\0';

	lea	eax, DWORD PTR _tbuf1$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	mov	BYTE PTR _buf1$[ebp+eax], 0

; 300  :  wcstombs(buf2,(const wchar_t *)tbuf2,_tcslen(tbuf2));

	lea	eax, DWORD PTR _tbuf2$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _tbuf2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf2$[ebp]
	push	edx
	call	_wcstombs
	add	esp, 12					; 0000000cH

; 301  :  buf2[_tcslen(tbuf2)] = '\0';

	lea	eax, DWORD PTR _tbuf2$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	mov	BYTE PTR _buf2$[ebp+eax], 0

; 302  :  wcstombs(buf3,(const wchar_t *)tbuf3,_tcslen(tbuf3));

	lea	eax, DWORD PTR _tbuf3$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _tbuf3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf3$[ebp]
	push	edx
	call	_wcstombs
	add	esp, 12					; 0000000cH

; 303  :  buf3[_tcslen(tbuf3)] = '\0';

	lea	eax, DWORD PTR _tbuf3$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
	mov	BYTE PTR _buf3$[ebp+eax], 0

; 304  :  SetID( _strupr(buf1), _strupr(buf2), _strupr(buf3) );

	lea	eax, DWORD PTR _buf3$[ebp]
	push	eax
	call	__strupr
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _buf2$[ebp]
	push	ecx
	call	__strupr
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR _buf1$[ebp]
	push	edx
	call	__strupr
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetID@CTextBlock@@QAEHPAD00@Z		; CTextBlock::SetID

; 305  :  return( ferror( stream ) );

	mov	eax, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 32					; 00000020H
$L93451:

; 306  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93773
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1236				; 000004d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93773:
	DD	8
	DD	$L93772
$L93772:
	DD	-60					; ffffffc4H
	DD	40					; 00000028H
	DD	$L93763
	DD	-108					; ffffff94H
	DD	40					; 00000028H
	DD	$L93764
	DD	-156					; ffffff64H
	DD	40					; 00000028H
	DD	$L93765
	DD	-244					; ffffff0cH
	DD	80					; 00000050H
	DD	$L93766
	DD	-332					; fffffeb4H
	DD	80					; 00000050H
	DD	$L93767
	DD	-420					; fffffe5cH
	DD	80					; 00000050H
	DD	$L93768
	DD	-432					; fffffe50H
	DD	2
	DD	$L93769
	DD	-1040					; fffffbf0H
	DD	600					; 00000258H
	DD	$L93770
$L93770:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	0
$L93769:
	DB	99					; 00000063H
	DB	0
$L93768:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	51					; 00000033H
	DB	0
$L93767:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	50					; 00000032H
	DB	0
$L93766:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	49					; 00000031H
	DB	0
$L93765:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	51					; 00000033H
	DB	0
$L93764:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	50					; 00000032H
	DB	0
$L93763:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	49					; 00000031H
	DB	0
?ReadHeader3@CTextBlock@@QAEHPAU_iobuf@@@Z ENDP		; CTextBlock::ReadHeader3
_TEXT	ENDS
PUBLIC	??_C@_02KPDBPKPG@?$CD?5?$AA@			; `string'
PUBLIC	?WriteHeader@CTextBlock@@QAEHPAU_iobuf@@@Z	; CTextBlock::WriteHeader
EXTRN	_fputc:NEAR
EXTRN	_fputs:NEAR
;	COMDAT ??_C@_02KPDBPKPG@?$CD?5?$AA@
CONST	SEGMENT
??_C@_02KPDBPKPG@?$CD?5?$AA@ DB '# ', 00H		; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?WriteHeader@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT
_b$ = -20						; size = 4
_this$ = -8						; size = 4
_stream$ = 8						; size = 4
?WriteHeader@CTextBlock@@QAEHPAU_iobuf@@@Z PROC NEAR	; CTextBlock::WriteHeader, COMDAT
; _this$ = ecx

; 394  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 395  :  char *b;
; 396  : 
; 397  :  if ( _IDstring[0] == '@' )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 64					; 00000040H
	jne	SHORT $L93477

; 398  :     return( 0 );

	xor	eax, eax
	jmp	SHORT $L93475
$L93477:

; 399  :  fputs( "# ", stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_02KPDBPKPG@?$CD?5?$AA@
	call	_fputs
	add	esp, 8

; 400  :  for ( b = _IDstring; *b; b++ ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR _b$[ebp], eax
	jmp	SHORT $L93479
$L93480:
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 1
	mov	DWORD PTR _b$[ebp], eax
$L93479:
	mov	eax, DWORD PTR _b$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L93481

; 401  :      if ( *b == '\1' )

	mov	eax, DWORD PTR _b$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $L93482

; 402  : 	fputc( ' ', stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	32					; 00000020H
	call	_fputc
	add	esp, 8

; 403  :      else

	jmp	SHORT $L93483
$L93482:

; 404  : 	fputc( *b, stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	_fputc
	add	esp, 8
$L93483:

; 405  :      }

	jmp	SHORT $L93480
$L93481:

; 406  :  return( fputc( '\n', stream ) );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	10					; 0000000aH
	call	_fputc
	add	esp, 8
$L93475:

; 407  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteHeader@CTextBlock@@QAEHPAU_iobuf@@@Z ENDP		; CTextBlock::WriteHeader
_TEXT	ENDS
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	?WriteHeaderR@CTextBlock@@QAEHPAU_iobuf@@@Z	; CTextBlock::WriteHeaderR
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?WriteHeaderR@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT
_i$ = -84						; size = 4
_buf$ = -72						; size = 50
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_stream$ = 8						; size = 4
?WriteHeaderR@CTextBlock@@QAEHPAU_iobuf@@@Z PROC NEAR	; CTextBlock::WriteHeaderR, COMDAT
; _this$ = ecx

; 410  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 411  :  char buf[50];
; 412  :  int i;
; 413  :  char *b;
; 414  : 
; 415  :  if ( _IDstring[0] == '@' )

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 64					; 00000040H
	jne	SHORT $L93491

; 416  :     return( 0 );

	xor	eax, eax
	jmp	SHORT $L93487
$L93491:

; 417  :  fputs( "# ", stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_02KPDBPKPG@?$CD?5?$AA@
	call	_fputs
	add	esp, 8

; 418  :  GetIDParts( buf, &i );

	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIDParts@CTextBlock@@QAEHPADPAH@Z	; CTextBlock::GetIDParts

; 419  :  if ( !i )

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $L93492

; 420  :     fputs( buf, stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_fputs
	add	esp, 8

; 421  :  else

	jmp	SHORT $L93493
$L93492:

; 422  :     fputs( "+", stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_01MIFGBAGJ@?$CL?$AA@
	call	_fputs
	add	esp, 8
$L93493:

; 423  :  return( fputc( '\n', stream ) );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	push	10					; 0000000aH
	call	_fputc
	add	esp, 8
$L93487:

; 424  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93783
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93783:
	DD	2
	DD	$L93782
$L93782:
	DD	-72					; ffffffb8H
	DD	50					; 00000032H
	DD	$L93779
	DD	-84					; ffffffacH
	DD	4
	DD	$L93780
$L93780:
	DB	105					; 00000069H
	DB	0
$L93779:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?WriteHeaderR@CTextBlock@@QAEHPAU_iobuf@@@Z ENDP	; CTextBlock::WriteHeaderR
_TEXT	ENDS
PUBLIC	?WriteText@CTextBlock@@QAEHPAU_iobuf@@@Z	; CTextBlock::WriteText
EXTRN	_fputwc:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?WriteText@CTextBlock@@QAEHPAU_iobuf@@@Z
_TEXT	SEGMENT
_buf$ = -20						; size = 4
_this$ = -8						; size = 4
_stream$ = 8						; size = 4
?WriteText@CTextBlock@@QAEHPAU_iobuf@@@Z PROC NEAR	; CTextBlock::WriteText, COMDAT
; _this$ = ecx

; 428  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 429  :  TCHAR *buf;
; 430  :  
; 431  : // detab_buf( (const TCHAR *)_text, RBUFSIZ, (TCHAR *)rbuf );
; 432  :  buf = (TCHAR *)rbuf;

	mov	eax, DWORD PTR ?rbuf@@3PAEA		; rbuf
	mov	DWORD PTR _buf$[ebp], eax
$L93502:

; 433  : // if ( cvtFile )
; 434  : //    doConvertText( (TCHAR *)rbuf, _ANS_T_, _SRC_T_ );
; 435  : // else
; 436  : //    doConvertText( (TCHAR *)rbuf, _ANS_T_, _EDT_T_ );
; 437  :  while ( *buf ) {

	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $L93503

; 438  :        if ( *buf == _T('\r') )

	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $L93504

; 439  :           buf++;

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 2
	mov	DWORD PTR _buf$[ebp], eax
$L93504:

; 440  : #ifndef _UNICODE
; 441  : 	   if ( *buf == '~' ) {
; 442  : 	  fputc( *buf, stream );
; 443  : 	  fputc( *(buf+1), stream );
; 444  : 	  buf++;
; 445  : 	  }
; 446  :        else 
; 447  : 
; 448  : 	if (( *buf < ' ' || *buf >= '~' ) && *buf != _T('\n') ) {
; 449  : 	  _fputtc( _T('~'), stream );
; 450  : 	  _fputtc( *buf, stream );
; 451  : 	  }
; 452  :        else
; 453  : 	  _fputtc( *buf, stream );
; 454  :        buf++;
; 455  :        }
; 456  : #else
; 457  :    _fputtc( *buf, stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	dx, WORD PTR [ecx]
	push	edx
	call	_fputwc
	add	esp, 8

; 458  :        buf++;

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 2
	mov	DWORD PTR _buf$[ebp], eax

; 459  :  }

	jmp	SHORT $L93502
$L93503:

; 460  : #endif
; 461  :  return( ferror( stream ) );

	mov	eax, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 32					; 00000020H

; 462  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteText@CTextBlock@@QAEHPAU_iobuf@@@Z ENDP		; CTextBlock::WriteText
_TEXT	ENDS
PUBLIC	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBE@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=, COMDAT
; _this$ = ecx

; 1007 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1008 : 		return( operator=( reinterpret_cast< const char* >( pszSrc ) ) );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=

; 1009 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBE@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 962  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 963  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ	; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
PUBLIC	??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z	; ATL::CSimpleStringT<unsigned short,0>::operator=
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=, COMDAT
; _this$ = ecx

; 982  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 983  : 		CThisSimpleString::operator=( pszSrc );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z ; ATL::CSimpleStringT<unsigned short,0>::operator=

; 984  : 
; 985  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 986  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
_TEXT	ENDS
PUBLIC	?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ	; ATL::CSimpleStringT<unsigned short,0>::Empty
PUBLIC	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
PUBLIC	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength
PUBLIC	?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z ; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength
PUBLIC	?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
tv67 = -232						; size = 4
_pszBuffer$92707 = -32					; size = 4
_nDestLength$ = -20					; size = 4
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=, COMDAT
; _this$ = ecx

; 989  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 990  : 		// nDestLength is in XCHARs
; 991  : 		int nDestLength = (pszSrc != NULL) ? StringTraits::GetBaseTypeLength( pszSrc ) : 0;

	cmp	DWORD PTR _pszSrc$[ebp], 0
	je	SHORT $L93794
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	call	?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z ; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength
	add	esp, 4
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $L93795
$L93794:
	mov	DWORD PTR tv67[ebp], 0
$L93795:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _nDestLength$[ebp], ecx

; 992  : 		if( nDestLength > 0 )

	cmp	DWORD PTR _nDestLength$[ebp], 0
	jle	SHORT $L92706

; 993  : 		{
; 994  : 			PXSTR pszBuffer = GetBuffer( nDestLength );

	mov	eax, DWORD PTR _nDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
	mov	DWORD PTR _pszBuffer$92707[ebp], eax

; 995  : 			StringTraits::ConvertToBaseType( pszBuffer, nDestLength, pszSrc );

	push	-1
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nDestLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszBuffer$92707[ebp]
	push	edx
	call	?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType
	add	esp, 16					; 00000010H

; 996  : 			ReleaseBufferSetLength( nDestLength );

	mov	eax, DWORD PTR _nDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength

; 997  : 		}
; 998  : 		else

	jmp	SHORT $L92708
$L92706:

; 999  : 		{
; 1000 : 			Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<unsigned short,0>::Empty
$L92708:

; 1001 : 		}
; 1002 : 
; 1003 : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 1004 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
_TEXT	ENDS
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z PROC NEAR ; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength, COMDAT

; 653  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 654  : 		// Returns required buffer size in wchar_ts
; 655  : 		return ::MultiByteToWideChar( _AtlGetConversionACP(), 0, pszSrc, -1, NULL, 0 )-1;

	mov	esi, esp
	push	0
	push	0
	push	-1
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	push	0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	push	eax
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1

; 656  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z ENDP	; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 158  : 	return( g_pfnGetThreadACP() );

	mov	esi, esp
	call	DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	cmp	esi, esp
	call	__RTC_CheckEsp

; 159  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_nDestLength$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nSrcLength$ = 20					; size = 4
?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z PROC NEAR ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType, COMDAT

; 679  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 680  : 		// nLen is in wchar_ts
; 681  : 		::MultiByteToWideChar( _AtlGetConversionACP(), 0, pszSrc, nSrcLength, pszDest, nDestLength );

	mov	esi, esp
	mov	eax, DWORD PTR _nDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nSrcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	push	0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	push	eax
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp

; 682  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z ENDP ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
PUBLIC	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 262  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 		CStringData* pData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pData$[ebp], eax

; 264  : 		pData->Release();

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 265  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
_TEXT	ENDS
PUBLIC	??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@	; `string'
EXTRN	__CrtDbgReport:NEAR
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@ DB 'nRefs != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT
??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio .net 2003\vc7\atlmfc\include\at'
	DB	'lsimpstr.h', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		ATLASSERT( nRefs != 0 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $L93806
	push	OFFSET FLAT:??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
	push	0
	push	93					; 0000005dH
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93806
	int	3
$L93806:

; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	test	ecx, ecx
	jg	SHORT $L26116

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	call	DWORD PTR [edx+4]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L26116:

; 98   : 		}
; 99   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::operator=, COMDAT
; _this$ = ecx

; 315  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 		SetString( pszSrc );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString

; 317  : 
; 318  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 319  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::operator=
_TEXT	ENDS
PUBLIC	?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nMinBufferLength$ = 8					; size = 4
?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer, COMDAT
; _this$ = ecx

; 489  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 490  : 		return( PrepareWrite( nMinBufferLength ) );

	mov	eax, DWORD PTR _nMinBufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite

; 491  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetData, COMDAT
; _this$ = ecx

; 730  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 16					; 00000010H

; 732  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<unsigned short,0>::GetData
_TEXT	ENDS
PUBLIC	?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z
_TEXT	SEGMENT
_nTooShort$ = -44					; size = 4
_nShared$ = -32						; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite, COMDAT
; _this$ = ecx

; 734  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 735  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 736  : 		int nShared = 1-pOldData->nRefs;  // nShared < 0 means true, >= 0 means false

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nShared$[ebp], ecx

; 737  : 		int nTooShort = pOldData->nAllocLength-nLength;  // nTooShort < 0 means true, >= 0 means false

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR _nTooShort$[ebp], ecx

; 738  : 		if( (nShared|nTooShort) < 0 )  // If either sign bit is set (i.e. either is less than zero), we need to copy data

	mov	eax, DWORD PTR _nShared$[ebp]
	or	eax, DWORD PTR _nTooShort$[ebp]
	jge	SHORT $L92761

; 739  : 		{
; 740  : 			PrepareWrite2( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2
$L92761:

; 741  : 		}
; 742  : 
; 743  : 		return( m_pszData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 744  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite
_TEXT	ENDS
PUBLIC	?IsLocked@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsLocked
PUBLIC	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
PUBLIC	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<unsigned short,0>::SetLength
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT
_pNewData$92796 = -44					; size = 4
_pStringMgr$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::Empty, COMDAT
; _this$ = ecx

; 421  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 423  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pStringMgr$[ebp], ecx

; 424  : 		if( pOldData->nDataLength == 0 )

	mov	eax, DWORD PTR _pOldData$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L92793

; 425  : 		{
; 426  : 			return;

	jmp	SHORT $L92790
$L92793:

; 427  : 		}
; 428  : 
; 429  : 		if( pOldData->IsLocked() )

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?IsLocked@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsLocked
	movzx	eax, al
	test	eax, eax
	je	SHORT $L92794

; 430  : 		{
; 431  : 			// Don't reallocate a locked buffer that's shrinking
; 432  : 			SetLength( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetLength

; 433  : 		}
; 434  : 		else

	jmp	SHORT $L92790
$L92794:

; 435  : 		{
; 436  : 			pOldData->Release();

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 437  : 			CStringData* pNewData = pStringMgr->GetNilString();

	mov	eax, DWORD PTR _pStringMgr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [edx+12]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$92796[ebp], eax

; 438  : 			Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$92796[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L92790:

; 439  : 		}
; 440  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ ENDP		; ATL::CSimpleStringT<unsigned short,0>::Empty
_TEXT	ENDS
EXTRN	@_RTC_Check_4_to_1@4:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsLocked@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsLocked, COMDAT
; _this$ = ecx

; 75   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 		return nRefs < 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12], 0
	setl	cl
	call	@_RTC_Check_4_to_1@4

; 77   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLocked@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsLocked
_TEXT	ENDS
PUBLIC	??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@	; `string'
PUBLIC	??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@ ; `string'
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@ DB 'nLength >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT
??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@ DB 'n'
	DB	'Length <= GetData()->nAllocLength', 00H	; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::SetLength, COMDAT
; _this$ = ecx

; 789  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 790  : 		ATLASSERT( nLength >= 0 );

	cmp	DWORD PTR _nLength$[ebp], 0
	jge	SHORT $L93822
	push	OFFSET FLAT:??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
	push	0
	push	790					; 00000316H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93822
	int	3
$L93822:

; 791  : 		ATLASSERT( nLength <= GetData()->nAllocLength );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	ecx, DWORD PTR _nLength$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $L93823
	push	OFFSET FLAT:??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
	push	0
	push	791					; 00000317H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93823
	int	3
$L93823:

; 792  : 
; 793  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

	cmp	DWORD PTR _nLength$[ebp], 0
	jl	SHORT $L92769
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	ecx, DWORD PTR _nLength$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $L92768
$L92769:

; 794  : 			AtlThrow(E_INVALIDARG);

	push	-2147024809				; 80070057H
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L92768:

; 795  : 			
; 796  : 		GetData()->nDataLength = nLength;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	ecx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 797  : 		m_pszData[nLength] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nLength$[ebp]
	mov	WORD PTR [ecx+edx*2], 0
$L93821:

; 798  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::SetLength
_TEXT	ENDS
PUBLIC	??BCTraceCategory@ATL@@QBEKXZ			; ATL::CTraceCategory::operator unsigned long
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA	; `ATL::AtlThrow'::`2'::__LINE__Var
PUBLIC	??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@ ; `string'
EXTRN	?atlTraceException@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceException
EXTRN	?AfxThrowMemoryException@@YGXXZ:NEAR		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:NEAR		; AfxThrowOleException
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
CONST	SEGMENT
??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@ DB 'A'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'o', 00H
	DB	'w', 00H, ':', 00H, ' ', 00H, 'h', 00H, 'r', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'x', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA DD 03dH	; `ATL::AtlThrow'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT
??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio .net 2003\vc7\atlmfc\include\at'
	DB	'lexcept.h', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T93826 = -204						; size = 8
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
	push	0
	mov	ecx, OFFSET FLAT:?atlTraceException@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceException
	call	??BCTraceCategory@ATL@@QBEKXZ		; ATL::CTraceCategory::operator unsigned long
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
	add	ecx, 1
	push	ecx
	push	OFFSET FLAT:??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
	lea	ecx, DWORD PTR $T93826[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ ; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 20					; 00000014H

; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )

	cmp	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jne	SHORT $L25398

; 65   : 	{
; 66   : 		AfxThrowMemoryException();

	call	?AfxThrowMemoryException@@YGXXZ		; AfxThrowMemoryException
$L25398:

; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	call	?AfxThrowOleException@@YGXJ@Z		; AfxThrowOleException
$L93825:

; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );
; 74   : #endif
; 75   : };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atltrace.h
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC NEAR	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 158  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pszFileName$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nLineNo$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
PUBLIC	?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z		; ATL::CTrace::TraceV
EXTRN	?s_trace@CTrace@ATL@@2V12@A:QWORD		; ATL::CTrace::s_trace
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ PROC NEAR	; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 168  : 		va_list ptr; va_start(ptr, pszFmt);

	lea	eax, DWORD PTR _pszFmt$[ebp+4]
	mov	DWORD PTR _ptr$[ebp], eax

; 169  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwCategory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET FLAT:?s_trace@CTrace@ATL@@2V12@A
	call	?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z	; ATL::CTrace::TraceV
	add	esp, 28					; 0000001cH

; 170  : 		va_end(ptr);

	mov	DWORD PTR _ptr$[ebp], 0

; 171  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
EXTRN	_AtlTraceVU:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFileName$ = 12					; size = 4
_nLine$ = 16						; size = 4
_dwCategory$ = 20					; size = 4
_nLevel$ = 24						; size = 4
_pszFmt$ = 28						; size = 4
_args$ = 32						; size = 4
?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z PROC NEAR	; ATL::CTrace::TraceV, COMDAT

; 126  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 127  : 		AtlTraceVU(m_dwModule, pszFileName, nLine, dwCategory, nLevel, pszFmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwCategory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_AtlTraceVU
	add	esp, 28					; 0000001cH

; 128  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??BCTraceCategory@ATL@@QBEKXZ PROC NEAR			; ATL::CTraceCategory::operator unsigned long, COMDAT
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	return( m_dwCategory );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BCTraceCategory@ATL@@QBEKXZ ENDP			; ATL::CTraceCategory::operator unsigned long
_TEXT	ENDS
PUBLIC	??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@	; `string'
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
CONST	SEGMENT
??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@ DB 'nNewLength >= 0', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nNewLength$ = 8					; size = 4
?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength, COMDAT
; _this$ = ecx

; 546  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 547  : 		ATLASSERT( nNewLength >= 0 );

	cmp	DWORD PTR _nNewLength$[ebp], 0
	jge	SHORT $L93837
	push	OFFSET FLAT:??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
	push	0
	push	547					; 00000223H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93837
	int	3
$L93837:

; 548  : 		SetLength( nNewLength );

	mov	eax, DWORD PTR _nNewLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetLength

; 549  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength
_TEXT	ENDS
PUBLIC	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString
PUBLIC	?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::StringLength
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::SetString, COMDAT
; _this$ = ecx

; 579  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 580  : 		SetString( pszSrc, StringLength( pszSrc ) );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	call	?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::StringLength
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString

; 581  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::SetString
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::StringLength, COMDAT

; 685  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 686  : 		if( psz == NULL )

	cmp	DWORD PTR _psz$[ebp], 0
	jne	SHORT $L92752

; 687  : 		{
; 688  : 			return( 0 );

	xor	eax, eax
	jmp	SHORT $L92751
$L92752:

; 689  : 		}
; 690  : 		return( int( wcslen( psz ) ) );

	mov	eax, DWORD PTR _psz$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
$L92751:

; 691  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::StringLength
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Attach, COMDAT
; _this$ = ecx

; 711  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 713  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::Attach
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (this+1);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
PUBLIC	?IsShared@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsShared
PUBLIC	?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<unsigned short,0>::Fork
PUBLIC	?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<unsigned short,0>::Reallocate
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nNewLength$92813 = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2, COMDAT
; _this$ = ecx

; 746  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 748  : 		if( pOldData->nDataLength > nLength )

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _nLength$[ebp]
	jle	SHORT $L92809

; 749  : 		{
; 750  : 			nLength = pOldData->nDataLength;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nLength$[ebp], ecx
$L92809:

; 751  : 		}
; 752  : 		if( pOldData->IsShared() )

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?IsShared@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsShared
	movzx	eax, al
	test	eax, eax
	je	SHORT $L92810

; 753  : 		{
; 754  : 			Fork( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::Fork

; 755  : 		}
; 756  : 		else if( pOldData->nAllocLength < nLength )

	jmp	SHORT $L92807
$L92810:
	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _nLength$[ebp]
	jge	SHORT $L92807

; 757  : 		{
; 758  : 			// Grow exponentially, until we hit 1K.
; 759  : 			int nNewLength = pOldData->nAllocLength;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nNewLength$92813[ebp], ecx

; 760  : 			if( nNewLength > 1024 )

	cmp	DWORD PTR _nNewLength$92813[ebp], 1024	; 00000400H
	jle	SHORT $L92814

; 761  : 			{
; 762  : 				nNewLength += 1024;

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	add	eax, 1024				; 00000400H
	mov	DWORD PTR _nNewLength$92813[ebp], eax

; 763  : 			}
; 764  : 			else

	jmp	SHORT $L92815
$L92814:

; 765  : 			{
; 766  : 				nNewLength *= 2;

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	shl	eax, 1
	mov	DWORD PTR _nNewLength$92813[ebp], eax
$L92815:

; 767  : 			}
; 768  : 			if( nNewLength < nLength )

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	cmp	eax, DWORD PTR _nLength$[ebp]
	jge	SHORT $L92816

; 769  : 			{
; 770  : 				nNewLength = nLength;

	mov	eax, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR _nNewLength$92813[ebp], eax
$L92816:

; 771  : 			}
; 772  : 			Reallocate( nNewLength );

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::Reallocate
$L92807:

; 773  : 		}
; 774  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsShared@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsShared, COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return( nRefs > 1 ); 

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12], 1
	setg	cl
	call	@_RTC_Check_4_to_1@4

; 81   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShared@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsShared
_TEXT	ENDS
PUBLIC	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ	; ATL::CSimpleStringT<unsigned short,0>::GetLength
PUBLIC	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ	; ATL::CSimpleStringT<unsigned short,0>::GetString
PUBLIC	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
PUBLIC	?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT
_pszBuffer$92832 = -44					; size = 4
_nOffset$92831 = -32					; size = 4
_nOldLength$92830 = -20					; size = 4
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::SetString, COMDAT
; _this$ = ecx

; 583  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 584  : 		if( nLength == 0 )

	cmp	DWORD PTR _nLength$[ebp], 0
	jne	SHORT $L92826

; 585  : 		{
; 586  : 			Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<unsigned short,0>::Empty

; 587  : 		}
; 588  : 		else

	jmp	$L93851
$L92826:

; 589  : 		{
; 590  : 			// It is possible that pszSrc points to a location inside of our 
; 591  : 			// buffer.  GetBuffer() might change m_pszData if (1) the buffer 
; 592  : 			// is shared or (2) the buffer is too small to hold the new 
; 593  : 			// string.  We detect this aliasing, and modify pszSrc to point
; 594  : 			// into the newly allocated buffer instead.
; 595  : 			
; 596  : 			if(pszSrc == NULL)

	cmp	DWORD PTR _pszSrc$[ebp], 0
	jne	SHORT $L92828

; 597  : 				AtlThrow(E_INVALIDARG);			

	push	-2147024809				; 80070057H
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L92828:

; 598  : 				
; 599  : 			UINT nOldLength = GetLength();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	DWORD PTR _nOldLength$92830[ebp], eax

; 600  : 			UINT_PTR nOffset = pszSrc-GetString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	mov	DWORD PTR _nOffset$92831[ebp], ecx

; 601  : 			// If 0 <= nOffset <= nOldLength, then pszSrc points into our 
; 602  : 			// buffer
; 603  : 
; 604  : 			PXSTR pszBuffer = GetBuffer( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
	mov	DWORD PTR _pszBuffer$92832[ebp], eax

; 605  : 			if( nOffset <= nOldLength )

	mov	eax, DWORD PTR _nOffset$92831[ebp]
	cmp	eax, DWORD PTR _nOldLength$92830[ebp]
	ja	SHORT $L92833

; 606  : 			{
; 607  : 				CopyCharsOverlapped( pszBuffer, pszBuffer+nOffset, nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nOffset$92831[ebp]
	mov	edx, DWORD PTR _pszBuffer$92832[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _pszBuffer$92832[ebp]
	push	ecx
	call	?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped
	add	esp, 12					; 0000000cH

; 608  : 			}
; 609  : 			else

	jmp	SHORT $L92834
$L92833:

; 610  : 			{
; 611  : 				CopyChars( pszBuffer, pszSrc, nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszBuffer$92832[ebp]
	push	edx
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH
$L92834:

; 612  : 			}
; 613  : 			ReleaseBufferSetLength( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength
$L93851:

; 614  : 		}
; 615  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::SetString
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::GetLength, COMDAT
; _this$ = ecx

; 500  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 501  : 		return( GetData()->nDataLength );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	eax, DWORD PTR [eax+4]

; 502  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ENDP	; ATL::CSimpleStringT<unsigned short,0>::GetLength
_TEXT	ENDS
EXTRN	_memcpy:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CopyChars, COMDAT

; 652  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 653  : 		memcpy( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

	mov	eax, DWORD PTR _nChars$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pchSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pchDest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 654  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
_TEXT	ENDS
PUBLIC	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
tv82 = -256						; size = 4
tv74 = -256						; size = 4
_nCharsToCopy$ = -56					; size = 4
_pNewData$ = -44					; size = 4
_nOldLength$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::Fork, COMDAT
; _this$ = ecx

; 715  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 716  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 717  : 		int nOldLength = pOldData->nDataLength;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldLength$[ebp], ecx

; 718  : 		CStringData* pNewData = pOldData->pStringMgr->Clone()->Allocate( nLength, sizeof( XCHAR ) );

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pOldData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR [edx+16]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv74[ebp]
	call	DWORD PTR [edx]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$[ebp], eax

; 719  : 		if( pNewData == NULL )

	cmp	DWORD PTR _pNewData$[ebp], 0
	jne	SHORT $L92845

; 720  : 		{
; 721  : 			ThrowMemoryException();

	call	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
$L92845:

; 722  : 		}
; 723  : 		int nCharsToCopy = ((nOldLength < nLength) ? nOldLength : nLength)+1;  // Copy '\0'

	mov	eax, DWORD PTR _nOldLength$[ebp]
	cmp	eax, DWORD PTR _nLength$[ebp]
	jge	SHORT $L93858
	mov	ecx, DWORD PTR _nOldLength$[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $L93859
$L93858:
	mov	edx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR tv82[ebp], edx
$L93859:
	mov	eax, DWORD PTR tv82[ebp]
	add	eax, 1
	mov	DWORD PTR _nCharsToCopy$[ebp], eax

; 724  : 		CopyChars( PXSTR( pNewData->data() ), PCXSTR( pOldData->data() ), nCharsToCopy );

	mov	eax, DWORD PTR _nCharsToCopy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	mov	ecx, DWORD PTR _pNewData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH

; 725  : 		pNewData->nDataLength = nOldLength;

	mov	eax, DWORD PTR _pNewData$[ebp]
	mov	ecx, DWORD PTR _nOldLength$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 726  : 		pOldData->Release();

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 727  : 		Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L93857:

; 728  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP		; ATL::CSimpleStringT<unsigned short,0>::Fork
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ
_TEXT	SEGMENT
?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException, COMDAT

; 704  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 705  : 		AtlThrow( E_OUTOFMEMORY );

	push	-2147024882				; 8007000eH
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L93861:

; 706  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ENDP ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
_TEXT	ENDS
PUBLIC	??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@ ; `string'
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT
??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@ DB 'pOldDat'
	DB	'a->nAllocLength < nLength', 00H		; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_pNewData$ = -44					; size = 4
_pStringMgr$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Reallocate, COMDAT
; _this$ = ecx

; 776  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 778  : 		ATLASSERT( pOldData->nAllocLength < nLength );

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _nLength$[ebp]
	jl	SHORT $L93864
	push	OFFSET FLAT:??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
	push	0
	push	778					; 0000030aH
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93864
	int	3
$L93864:

; 779  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pStringMgr$[ebp], ecx

; 780  : 		CStringData* pNewData = pStringMgr->Reallocate( pOldData, nLength, sizeof( XCHAR ) );

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOldData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pStringMgr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [eax+8]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$[ebp], eax

; 781  : 		if( pNewData == NULL )

	cmp	DWORD PTR _pNewData$[ebp], 0
	jne	SHORT $L92855

; 782  : 		{
; 783  : 			ThrowMemoryException();

	call	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
$L92855:

; 784  : 		}
; 785  : 		Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L93863:

; 786  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::Reallocate
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetString, COMDAT
; _this$ = ecx

; 509  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		return( m_pszData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 511  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ENDP	; ATL::CSimpleStringT<unsigned short,0>::GetString
_TEXT	ENDS
EXTRN	_memmove:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped, COMDAT

; 656  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 657  : 		memmove( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

	mov	eax, DWORD PTR _nChars$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pchSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pchDest$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 658  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped
_TEXT	ENDS
END
