; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\Rtftoast.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_13ODFOLHGE@?$AA?8?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_17HIKLPLBG@?$AA?5?$AA?9?$AA?5?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15KHFHDPFH@?$AA?9?$AA?9?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_13BBDEGPLJ@?$AA?$CK?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_13PPFCDPMH@?$AA?$HM?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1M@INKOCJOG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_17IHNNDFDL@?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BK@HKPIAPHO@?$AA?5?$AA?9?$AA1?$AA2?$AA3?$AA4?$AA5?$AA6?$AA7?$AA8?$AA9?$AA0?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15GMIMALHA@?$AAp?$AAc?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_19CMKJINKI@?$AAa?$AAn?$AAs?$AAi?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15KHNANINF@?$AAq?$AAc?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15NKNIJHFP@?$AAq?$AAj?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15PPLDMIID@?$AAq?$AAl?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15OJBKLNGJ@?$AAf?$AAs?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1O@JFDDJFFG@?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_17DEBDAFOO@?$AAp?$AAa?$AAr?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15NPCHJNND@?$AA?$HO?$AA?5?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0Strbuff@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Strbuff@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?eof@Strbuff@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?flush@Strbuff@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?getstr@Strbuff@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?puts@Strbuff@@QAEXPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?putback@Strbuff@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GStrbuff@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_state@@YAHAAVStrbuff@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?hval@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?read_hex2@@YAHAAVStrbuff@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?read_int@@YAHAAVStrbuff@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?read_name@@YAHAAVStrbuff@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_state@@YAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pard@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_code_word@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_win@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rtf_read@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_caps@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_inv@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?output_bold@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?output_head@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?output_us@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?plain@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_code@@YAHPAUCODE_WORD@@AAVStrbuff@@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7Strbuff@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@	; `string'
PUBLIC	??_C@_13ODFOLHGE@?$AA?8?$AA?$AA@		; `string'
PUBLIC	??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@		; `string'
PUBLIC	??_C@_17HIKLPLBG@?$AA?5?$AA?9?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_15KHFHDPFH@?$AA?9?$AA?9?$AA?$AA@		; `string'
PUBLIC	??_C@_13BBDEGPLJ@?$AA?$CK?$AA?$AA@		; `string'
PUBLIC	??_C@_13PPFCDPMH@?$AA?$HM?$AA?$AA@		; `string'
PUBLIC	??_C@_1M@INKOCJOG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
_DATA	SEGMENT
_cwd_count DD	03bH
_state_sp DD	0ffffffffH
_curr_state DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	018H
_DATA	ENDS
;	COMDAT ??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@ DB 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13ODFOLHGE@?$AA?8?$AA?$AA@
CONST	SEGMENT
??_C@_13ODFOLHGE@?$AA?8?$AA?$AA@ DB '''', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@ DB '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17HIKLPLBG@?$AA?5?$AA?9?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_17HIKLPLBG@?$AA?5?$AA?9?$AA?5?$AA?$AA@ DB ' ', 00H, '-', 00H, ' ', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_15KHFHDPFH@?$AA?9?$AA?9?$AA?$AA@
CONST	SEGMENT
??_C@_15KHFHDPFH@?$AA?9?$AA?9?$AA?$AA@ DB '-', 00H, '-', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13BBDEGPLJ@?$AA?$CK?$AA?$AA@
CONST	SEGMENT
??_C@_13BBDEGPLJ@?$AA?$CK?$AA?$AA@ DB '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13PPFCDPMH@?$AA?$HM?$AA?$AA@
CONST	SEGMENT
??_C@_13PPFCDPMH@?$AA?$HM?$AA?$AA@ DB '|', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@INKOCJOG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1M@INKOCJOG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@ DB ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
_cwd_array DB	'p', 00H, 'a', 00H, 'r', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'b', 00H, 00H, 00H
	ORG $+56
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_bold@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'i', 00H, 00H, 00H
	ORG $+56
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_us@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'u', 00H, 'l', 00H, 00H, 00H
	ORG $+54
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_us@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'u', 00H, 'l', 00H, 'w', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_us@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'u', 00H, 'l', 00H, 'd', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_us@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'u', 00H, 'l', 00H, 'd', 00H, 'b', 00H, 00H, 00H
	ORG $+50
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_us@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'p', 00H, 'l', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 00H, 00H
	ORG $+48
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?plain@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'p', 00H, 'l', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 00H, 00H
	ORG $+48
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?plain@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'l', 00H, 'q', 00H, 'u', 00H, 'o', 00H, 't', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_13ODFOLHGE@?$AA?8?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'r', 00H, 'q', 00H, 'u', 00H, 'o', 00H, 't', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_13ODFOLHGE@?$AA?8?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'l', 00H, 'd', 00H, 'b', 00H, 'l', 00H, 'q', 00H, 'u', 00H
	DB	'o', 00H, 't', 00H, 'e', 00H, 00H, 00H
	ORG $+40
	DD	FLAT:??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'r', 00H, 'd', 00H, 'b', 00H, 'l', 00H, 'q', 00H, 'u', 00H
	DB	'o', 00H, 't', 00H, 'e', 00H, 00H, 00H
	ORG $+40
	DD	FLAT:??_C@_13NEIAEHFG@?$AA?$CC?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'a', 00H, 's', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_17HIKLPLBG@?$AA?5?$AA?9?$AA?5?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'e', 00H, 'm', 00H, 'd', 00H, 'a', 00H, 's', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_15KHFHDPFH@?$AA?9?$AA?9?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'b', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 't', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_13BBDEGPLJ@?$AA?$CK?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'o', 00H, 'o', 00H, 't', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, 'e', 00H, 00H, 00H
	ORG $+42
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'o', 00H, 'o', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'p', 00H, 'i', 00H, 'c', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, 't', 00H, 'b', 00H
	DB	'l', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	's', 00H, 't', 00H, 'y', 00H, 'l', 00H, 'e', 00H, 's', 00H
	DB	'h', 00H, 'e', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+38
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 00H, 00H
	ORG $+50
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 't', 00H
	DB	'b', 00H, 'l', 00H, 00H, 00H
	ORG $+42
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'a', 00H, 't', 00H, 'n', 00H, 'i', 00H, 'd', 00H, 00H, 00H
	ORG $+48
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+38
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'i', 00H, 'e', 00H, 'l', 00H, 'd', 00H, 00H, 00H
	ORG $+48
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'l', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'o', 00H, 'o', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'l', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'l', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'p', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 00H, 00H
	ORG $+50
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?pard@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'o', 00H, 'o', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'o', 00H, 'o', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'f', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'f', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	't', 00H, 'x', 00H, 'e', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'i', 00H, 'x', 00H, 'e', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'b', 00H, 'x', 00H, 'e', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'r', 00H, 'x', 00H, 'e', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'b', 00H, 'k', 00H, 'm', 00H, 'k', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 00H, 00H
	ORG $+40
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'b', 00H, 'k', 00H, 'm', 00H, 'k', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 00H, 00H
	ORG $+42
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 00H, 00H
	ORG $+42
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'a', 00H, 'n', 00H, 's', 00H, 'i', 00H, 00H, 00H
	ORG $+50
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?set_win@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'p', 00H, 'c', 00H, 00H, 00H
	ORG $+54
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?set_win@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	't', 00H, 'a', 00H, 'b', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_13PPFCDPMH@?$AA?$HM?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'c', 00H, 'a', 00H, 'p', 00H, 's', 00H, 00H, 00H
	ORG $+50
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?set_caps@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'v', 00H, 00H, 00H
	ORG $+56
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?set_inv@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 's', 00H, 00H, 00H
	ORG $+54
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_head@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'q', 00H, 'c', 00H, 00H, 00H
	ORG $+54
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_head@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'q', 00H, 'l', 00H, 00H, 00H
	ORG $+54
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_head@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'q', 00H, 'j', 00H, 00H, 00H
	ORG $+54
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?output_head@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 'n', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 's', 00H, 'w', 00H, 'i', 00H, 's', 00H, 's', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'n', 00H, 'i', 00H, 'l', 00H, 00H, 00H
	ORG $+50
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 's', 00H, 'y', 00H, 'm', 00H, 'b', 00H, 'o', 00H
	DB	'l', 00H, 00H, 00H
	ORG $+44
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'f', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+46
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'r', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'b', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 00H, 00H
	ORG $+50
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	'g', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, 00H, 00H
	ORG $+48
	DD	FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	DD	FLAT:?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	DB	't', 00H, 'a', 00H, 'b', 00H, 00H, 00H
	ORG $+52
	DD	FLAT:??_C@_1M@INKOCJOG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@
	DD	FLAT:?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
	ORG $+4
_winc	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	027H
	DB	027H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	020H
	DB	0adH
	DB	09bH
	DB	09cH
	DB	0afH
	DB	09dH
	DB	07cH
	DB	015H
	DB	022H
	DB	043H
	DB	0a6H
	DB	0aeH
	DB	0aaH
	DB	02dH
	DB	052H
	DB	0c4H
	DB	016H
	DB	0f1H
	DB	0fdH
	DB	02aH
	DB	027H
	DB	0e6H
	DB	014H
	DB	0f9H
	DB	02cH
	DB	027H
	DB	0a7H
	DB	0afH
	DB	0acH
	DB	0abH
	DB	03fH
	DB	0a8H
	DB	041H
	DB	041H
	DB	041H
	DB	041H
	DB	08eH
	DB	08fH
	DB	092H
	DB	080H
	DB	045H
	DB	045H
	DB	045H
	DB	090H
	DB	08dH
	DB	0a1H
	DB	08cH
	DB	08bH
	DB	044H
	DB	0a5H
	DB	04fH
	DB	04fH
	DB	04fH
	DB	04fH
	DB	099H
	DB	078H
	DB	09dH
	DB	055H
	DB	055H
	DB	055H
	DB	09aH
	DB	059H
	DB	09eH
	DB	0e1H
	DB	085H
	DB	0a0H
	DB	083H
	DB	061H
	DB	084H
	DB	086H
	DB	091H
	DB	087H
	DB	08aH
	DB	082H
	DB	088H
	DB	089H
	DB	08dH
	DB	0a1H
	DB	08cH
	DB	08bH
	DB	064H
	DB	0a4H
	DB	095H
	DB	0a2H
	DB	093H
	DB	06fH
	DB	094H
	DB	0f6H
	DB	09bH
	DB	097H
	DB	0a3H
	DB	096H
	DB	081H
	DB	079H
	DB	09eH
	DB	098H
_DATA	ENDS
PUBLIC	?hval@@YAHG@Z					; hval
EXTRN	_iswupper:NEAR
EXTRN	_iswdigit:NEAR
EXTRN	_iswxdigit:NEAR
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
;	COMDAT rtc$IMZ
; File c:\astrow32dev\tbt32\rtftoast.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCcsu /ZI
rtc$TMZ	ENDS
;	COMDAT ?hval@@YAHG@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?hval@@YAHG@Z PROC NEAR					; hval, COMDAT

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 110  :  if ( _istdigit(c) )

	mov	ax, WORD PTR _c$[ebp]
	push	eax
	call	_iswdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $L93317

; 111  :     return( c - _T('0')  );

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $L93316
$L93317:

; 112  :  else if ( _istxdigit(c) && _istupper(c) )

	mov	ax, WORD PTR _c$[ebp]
	push	eax
	call	_iswxdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $L93319
	mov	ax, WORD PTR _c$[ebp]
	push	eax
	call	_iswupper
	add	esp, 4
	test	eax, eax
	je	SHORT $L93319

; 113  :     return( c - _T('A')+10 );   

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 55					; 00000037H
	jmp	SHORT $L93316
$L93319:

; 114  :  else
; 115  :     return( c - _T('a')+10 );   

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 87					; 00000057H
$L93316:

; 116  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?hval@@YAHG@Z ENDP					; hval
_TEXT	ENDS
PUBLIC	?read_hex2@@YAHAAVStrbuff@@@Z			; read_hex2
PUBLIC	?putback@Strbuff@@QAEXG@Z			; Strbuff::putback
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	?get@Strbuff@@QAEGXZ:NEAR			; Strbuff::get
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?read_hex2@@YAHAAVStrbuff@@@Z
_TEXT	SEGMENT
_buf$ = -40						; size = 20
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_stream$ = 8						; size = 4
?read_hex2@@YAHAAVStrbuff@@@Z PROC NEAR			; read_hex2, COMDAT

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 121  :  int i;
; 122  :  TCHAR buf[10];
; 123  : 
; 124  :  buf[0] = stream.get();

	mov	ecx, DWORD PTR _stream$[ebp]
	call	?get@Strbuff@@QAEGXZ			; Strbuff::get
	mov	WORD PTR _buf$[ebp], ax

; 125  :  if ( !_istxdigit(buf[0]) ) {

	mov	ax, WORD PTR _buf$[ebp]
	push	eax
	call	_iswxdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $L93326

; 126  :     stream.putback( buf[0] );

	mov	ax, WORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?putback@Strbuff@@QAEXG@Z		; Strbuff::putback

; 127  :     return( 0 );

	xor	eax, eax
	jmp	SHORT $L93323
$L93326:

; 128  :     }
; 129  :  buf[1] = stream.get();

	mov	ecx, DWORD PTR _stream$[ebp]
	call	?get@Strbuff@@QAEGXZ			; Strbuff::get
	mov	WORD PTR _buf$[ebp+2], ax

; 130  :  if ( !_istxdigit(buf[1]) ) {

	mov	ax, WORD PTR _buf$[ebp+2]
	push	eax
	call	_iswxdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $L93327

; 131  :     stream.putback( buf[1] );

	mov	ax, WORD PTR _buf$[ebp+2]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?putback@Strbuff@@QAEXG@Z		; Strbuff::putback

; 132  :     buf[1] = _T('\0');

	mov	WORD PTR _buf$[ebp+2], 0
$L93327:

; 133  :     }
; 134  :  buf[2] = _T('\0');

	mov	WORD PTR _buf$[ebp+4], 0

; 135  :  return( (hval(buf[0])*16) + hval(buf[1]) );

	mov	ax, WORD PTR _buf$[ebp]
	push	eax
	call	?hval@@YAHG@Z				; hval
	add	esp, 4
	mov	esi, eax
	shl	esi, 4
	mov	cx, WORD PTR _buf$[ebp+2]
	push	ecx
	call	?hval@@YAHG@Z				; hval
	add	esp, 4
	add	eax, esi
$L93323:

; 136  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93718
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93718:
	DD	1
	DD	$L93717
$L93717:
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$L93714
$L93714:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?read_hex2@@YAHAAVStrbuff@@@Z ENDP			; read_hex2
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\strbuff.h
_TEXT	ENDS
;	COMDAT ?putback@Strbuff@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
?putback@Strbuff@@QAEXG@Z PROC NEAR			; Strbuff::putback, COMDAT
; _this$ = ecx

; 30   :     void putback( TCHAR c ) { index--; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+308], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?putback@Strbuff@@QAEXG@Z ENDP				; Strbuff::putback
_TEXT	ENDS
PUBLIC	?read_int@@YAHAAVStrbuff@@@Z			; read_int
PUBLIC	?eof@Strbuff@@QAEHXZ				; Strbuff::eof
EXTRN	__wtoi:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\rtftoast.cpp
;	COMDAT ?read_int@@YAHAAVStrbuff@@@Z
_TEXT	SEGMENT
_buf$ = -52						; size = 30
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_stream$ = 8						; size = 4
?read_int@@YAHAAVStrbuff@@@Z PROC NEAR			; read_int, COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 140  :  int i = 0;

	mov	DWORD PTR _i$[ebp], 0
$L93333:

; 141  :  TCHAR buf[15];
; 142  : 
; 143  :  do {
; 144  :     buf[i] = stream.get();

	mov	ecx, DWORD PTR _stream$[ebp]
	call	?get@Strbuff@@QAEGXZ			; Strbuff::get
	mov	ecx, DWORD PTR _i$[ebp]
	mov	WORD PTR _buf$[ebp+ecx*2], ax

; 145  :     if ( !_istdigit(buf[i]) ) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	cx, WORD PTR _buf$[ebp+eax*2]
	push	ecx
	call	_iswdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $L93336

; 146  :        stream.putback( buf[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	cx, WORD PTR _buf$[ebp+eax*2]
	push	ecx
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?putback@Strbuff@@QAEXG@Z		; Strbuff::putback

; 147  :        buf[i] = _T('\0');

	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR _buf$[ebp+eax*2], 0

; 148  :        break;

	jmp	SHORT $L93335
$L93336:

; 149  :        }
; 150  :     i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 151  :     } while ( _istdigit(buf[i-1]) && !stream.eof() );

	mov	eax, DWORD PTR _i$[ebp]
	mov	cx, WORD PTR _buf$[ebp+eax*2-2]
	push	ecx
	call	_iswdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $L93335
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?eof@Strbuff@@QAEHXZ			; Strbuff::eof
	test	eax, eax
	je	SHORT $L93333
$L93335:

; 152  :  buf[i] = _T('\0');

	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR _buf$[ebp+eax*2], 0

; 153  :  return( _tstoi(buf) );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	__wtoi
	add	esp, 4

; 154  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93729
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93729:
	DD	1
	DD	$L93728
$L93728:
	DD	-52					; ffffffccH
	DD	30					; 0000001eH
	DD	$L93726
$L93726:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?read_int@@YAHAAVStrbuff@@@Z ENDP			; read_int
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\strbuff.h
_TEXT	ENDS
;	COMDAT ?eof@Strbuff@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?eof@Strbuff@@QAEHXZ PROC NEAR				; Strbuff::eof, COMDAT
; _this$ = ecx

; 23   : 	BOOL eof() {return(index<len?FALSE:TRUE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+308]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+304]
	setge	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eof@Strbuff@@QAEHXZ ENDP				; Strbuff::eof
_TEXT	ENDS
PUBLIC	?read_name@@YAHAAVStrbuff@@PAG@Z		; read_name
EXTRN	_iswalpha:NEAR
EXTRN	_wcscpy:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\rtftoast.cpp
;	COMDAT ?read_name@@YAHAAVStrbuff@@PAG@Z
_TEXT	SEGMENT
_buf$ = -92						; size = 70
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_stream$ = 8						; size = 4
_str$ = 12						; size = 4
?read_name@@YAHAAVStrbuff@@PAG@Z PROC NEAR		; read_name, COMDAT

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 159  :  int i = 0;

	mov	DWORD PTR _i$[ebp], 0
$L93344:

; 160  :  TCHAR buf[35];
; 161  : 
; 162  :  do {
; 163  :     buf[i] = stream.get();

	mov	ecx, DWORD PTR _stream$[ebp]
	call	?get@Strbuff@@QAEGXZ			; Strbuff::get
	mov	ecx, DWORD PTR _i$[ebp]
	mov	WORD PTR _buf$[ebp+ecx*2], ax

; 164  :     if ( !_istalpha(buf[i]) ) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	cx, WORD PTR _buf$[ebp+eax*2]
	push	ecx
	call	_iswalpha
	add	esp, 4
	test	eax, eax
	jne	SHORT $L93347

; 165  :        stream.putback( buf[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	cx, WORD PTR _buf$[ebp+eax*2]
	push	ecx
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?putback@Strbuff@@QAEXG@Z		; Strbuff::putback

; 166  :        buf[i] = _T('\0');

	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR _buf$[ebp+eax*2], 0

; 167  :        break;

	jmp	SHORT $L93346
$L93347:

; 168  :        }
; 169  :     i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 170  :     } while ( _istalpha(buf[i-1]) && !stream.eof() );

	mov	eax, DWORD PTR _i$[ebp]
	mov	cx, WORD PTR _buf$[ebp+eax*2-2]
	push	ecx
	call	_iswalpha
	add	esp, 4
	test	eax, eax
	je	SHORT $L93346
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?eof@Strbuff@@QAEHXZ			; Strbuff::eof
	test	eax, eax
	je	SHORT $L93344
$L93346:

; 171  :  buf[i] = _T('\0');

	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR _buf$[ebp+eax*2], 0

; 172  :  _tcscpy( str, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_wcscpy
	add	esp, 8

; 173  :  return( i );

	mov	eax, DWORD PTR _i$[ebp]

; 174  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93738
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93738:
	DD	1
	DD	$L93737
$L93737:
	DD	-92					; ffffffa4H
	DD	70					; 00000046H
	DD	$L93735
$L93735:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?read_name@@YAHAAVStrbuff@@PAG@Z ENDP			; read_name
_TEXT	ENDS
PUBLIC	??_C@_17IHNNDFDL@?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?puts@Strbuff@@QAEXPBG@Z			; Strbuff::puts
EXTRN	?put@Strbuff@@QAEXG@Z:NEAR			; Strbuff::put
;	COMDAT ??_C@_17IHNNDFDL@?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_17IHNNDFDL@?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@ DB ']', 00H, 0dH, 00H, 0aH
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?pard@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?pard@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR	; pard, COMDAT

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 191  :     if ( curr_state.head )

	cmp	DWORD PTR _curr_state+20, 0
	je	SHORT $L93359

; 192  :        out.puts( _T("]\r\n")  );

	push	OFFSET FLAT:??_C@_17IHNNDFDL@?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	?puts@Strbuff@@QAEXPBG@Z		; Strbuff::puts

; 193  :     else if ( curr_state.bold )

	jmp	SHORT $L93361
$L93359:
	cmp	DWORD PTR _curr_state+12, 0
	je	SHORT $L93361

; 194  :        out.put( _T('}')  );

	push	125					; 0000007dH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put
$L93361:

; 195  :     if ( curr_state.underscore )

	cmp	DWORD PTR _curr_state+16, 0
	je	SHORT $L93363

; 196  :        out.put( _T('>')  );

	push	62					; 0000003eH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put
$L93363:

; 197  :     return( 1 );

	mov	eax, 1

; 198  :  
; 199  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pard@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP		; pard
_TEXT	ENDS
PUBLIC	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\strbuff.h
;	COMDAT ?puts@Strbuff@@QAEXPBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_p$ = 8							; size = 4
?puts@Strbuff@@QAEXPBG@Z PROC NEAR			; Strbuff::puts, COMDAT
; _this$ = ecx

; 28   : 	void puts( const _TCHAR *p ) { if ( len ) { str+=buf; len=0; } str+=p; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+304], 0
	je	SHORT $L92912
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
$L92912:
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?puts@Strbuff@@QAEXPBG@Z ENDP				; Strbuff::puts
_TEXT	ENDS
PUBLIC	??_C@_15GMIMALHA@?$AAp?$AAc?$AA?$AA@		; `string'
PUBLIC	??_C@_19CMKJINKI@?$AAa?$AAn?$AAs?$AAi?$AA?$AA@	; `string'
EXTRN	__wcsicmp:NEAR
_BSS	SEGMENT
_map_win DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_15GMIMALHA@?$AAp?$AAc?$AA?$AA@
; File c:\astrow32dev\tbt32\rtftoast.cpp
CONST	SEGMENT
??_C@_15GMIMALHA@?$AAp?$AAc?$AA?$AA@ DB 'p', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19CMKJINKI@?$AAa?$AAn?$AAs?$AAi?$AA?$AA@
CONST	SEGMENT
??_C@_19CMKJINKI@?$AAa?$AAn?$AAs?$AAi?$AA?$AA@ DB 'a', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 00H, 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?set_win@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?set_win@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR	; set_win, COMDAT

; 263  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 264  :  if ( !_tcsicmp( cwp->name, _T("pc" ) ) )

	push	OFFSET FLAT:??_C@_15GMIMALHA@?$AAp?$AAc?$AA?$AA@
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	__wcsicmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93395

; 265  :     map_win = 0;

	mov	DWORD PTR _map_win, 0

; 266  :  else if ( !_tcsicmp( cwp->name, _T("ansi" ) ) )

	jmp	SHORT $L93397
$L93395:
	push	OFFSET FLAT:??_C@_19CMKJINKI@?$AAa?$AAn?$AAs?$AAi?$AA?$AA@
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	__wcsicmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93397

; 267  :     map_win = 1;

	mov	DWORD PTR _map_win, 1
$L93397:

; 268  :  return( 0 );

	xor	eax, eax

; 269  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?set_win@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP	; set_win
_TEXT	ENDS
_BSS	SEGMENT
_brace_state DD	01H DUP (?)
; Function compile flags: /Odt /RTCcsu /ZI
_BSS	ENDS
;	COMDAT ?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
tv67 = -296						; size = 4
_cw$ = -96						; size = 64
_c$ = -24						; size = 4
_level$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR ; skip_dest, COMDAT

; 301  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 302  :  int level = brace_state, c;

	mov	eax, DWORD PTR _brace_state
	mov	DWORD PTR _level$[ebp], eax

; 303  :  CODE_WORD cw;
; 304  : 
; 305  :  curr_state.map_inv = 1;

	mov	DWORD PTR _curr_state+4, 1
$L93425:

; 306  :  do {
; 307  :     c = rtf_read( in, &cw );

	lea	eax, DWORD PTR _cw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	?rtf_read@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z ; rtf_read
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax

; 308  :     switch( c ) {

	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv67[ebp], eax

; 309  : 	  case RCBRA :
; 310  : 	       break;
; 311  : 	  case ROBRA :
; 312  : 	  case RCODE :
; 313  : 	  default :
; 314  : 	     continue;
; 315  : 	  }
; 316  :     } while ( brace_state > level-1 );

	mov	eax, DWORD PTR _level$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _brace_state, eax
	jg	SHORT $L93425

; 317  :  pop_state( out );

	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	?pop_state@@YAHAAVStrbuff@@@Z		; pop_state
	add	esp, 4

; 318  :  curr_state.map_inv = 0;

	mov	DWORD PTR _curr_state+4, 0

; 319  :  return( 1 );

	mov	eax, 1

; 320  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93751
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93751:
	DD	1
	DD	$L93750
$L93750:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$L93748
$L93748:
	DB	99					; 00000063H
	DB	119					; 00000077H
	DB	0
?skip_dest@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP	; skip_dest
_TEXT	ENDS
_BSS	SEGMENT
_state_stack DB	02bcH DUP (?)
; Function compile flags: /Odt /RTCcsu /ZI
_BSS	ENDS
;	COMDAT ?pop_state@@YAHAAVStrbuff@@@Z
_TEXT	SEGMENT
_tos$ = -32						; size = 28
_out$ = 8						; size = 4
?pop_state@@YAHAAVStrbuff@@@Z PROC NEAR			; pop_state, COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 80   :  STATE tos;
; 81   : 
; 82   :  if ( state_sp > 0 ) {

	cmp	DWORD PTR _state_sp, 0
	jle	$L93302

; 83   :     tos = state_stack[state_sp--];

	mov	esi, DWORD PTR _state_sp
	imul	esi, 28					; 0000001cH
	add	esi, OFFSET FLAT:_state_stack
	mov	ecx, 7
	lea	edi, DWORD PTR _tos$[ebp]
	rep movsd
	mov	eax, DWORD PTR _state_sp
	sub	eax, 1
	mov	DWORD PTR _state_sp, eax

; 84   :     if ( curr_state.map_inv ) {

	cmp	DWORD PTR _curr_state+4, 0
	je	SHORT $L93303

; 85   :        curr_state = tos;

	mov	ecx, 7
	lea	esi, DWORD PTR _tos$[ebp]
	mov	edi, OFFSET FLAT:_curr_state
	rep movsd

; 86   :        return( 1 );

	mov	eax, 1
	jmp	$L93300
$L93303:

; 87   :        }
; 88   :     if ( curr_state.bold && !tos.bold )

	cmp	DWORD PTR _curr_state+12, 0
	je	SHORT $L93304
	cmp	DWORD PTR _tos$[ebp+12], 0
	jne	SHORT $L93304

; 89   :        out.put( _T('}')) ;

	push	125					; 0000007dH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 90   :     else if ( !curr_state.bold && tos.bold )

	jmp	SHORT $L93305
$L93304:
	cmp	DWORD PTR _curr_state+12, 0
	jne	SHORT $L93305
	cmp	DWORD PTR _tos$[ebp+12], 0
	je	SHORT $L93305

; 91   :        out.put( _T('{')) ;

	push	123					; 0000007bH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put
$L93305:

; 92   :     if ( curr_state.underscore && !tos.underscore )

	cmp	DWORD PTR _curr_state+16, 0
	je	SHORT $L93307
	cmp	DWORD PTR _tos$[ebp+16], 0
	jne	SHORT $L93307

; 93   :        out.put( _T('>')) ;

	push	62					; 0000003eH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 94   :     else if ( !curr_state.underscore && tos.underscore )

	jmp	SHORT $L93308
$L93307:
	cmp	DWORD PTR _curr_state+16, 0
	jne	SHORT $L93308
	cmp	DWORD PTR _tos$[ebp+16], 0
	je	SHORT $L93308

; 95   :        out.put( _T('<')) ;

	push	60					; 0000003cH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put
$L93308:

; 96   :     if ( curr_state.head && !tos.head )

	cmp	DWORD PTR _curr_state+20, 0
	je	SHORT $L93310
	cmp	DWORD PTR _tos$[ebp+20], 0
	jne	SHORT $L93310

; 97   :        out.put( _T(']')  );

	push	93					; 0000005dH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 98   :     else if ( !curr_state.head && tos.head )

	jmp	SHORT $L93311
$L93310:
	cmp	DWORD PTR _curr_state+20, 0
	jne	SHORT $L93311
	cmp	DWORD PTR _tos$[ebp+20], 0
	je	SHORT $L93311

; 99   :        out.put( _T('[')  );

	push	91					; 0000005bH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put
$L93311:

; 100  :     curr_state = tos;

	mov	ecx, 7
	lea	esi, DWORD PTR _tos$[ebp]
	mov	edi, OFFSET FLAT:_curr_state
	rep movsd

; 101  :     return( 1 );

	mov	eax, 1
	jmp	SHORT $L93300
$L93302:

; 102  :     }
; 103  :  else
; 104  :     return( 0 );

	xor	eax, eax
$L93300:

; 105  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93756
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93756:
	DD	1
	DD	$L93755
$L93755:
	DD	-32					; ffffffe0H
	DD	28					; 0000001cH
	DD	$L93754
$L93754:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?pop_state@@YAHAAVStrbuff@@@Z ENDP			; pop_state
_TEXT	ENDS
EXTRN	?_get@Strbuff@@QAEGAAG@Z:NEAR			; Strbuff::_get
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?rtf_read@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z
_TEXT	SEGMENT
tv70 = -208						; size = 4
_ch$ = -8						; size = 2
_stream$ = 8						; size = 4
_cwp$ = 12						; size = 4
?rtf_read@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z PROC NEAR	; rtf_read, COMDAT

; 272  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 273  :  _TUCHAR ch;
; 274  : 
; 275  :  stream._get( ch );

	lea	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?_get@Strbuff@@QAEGAAG@Z		; Strbuff::_get

; 276  :  if (stream.eof() )

	mov	ecx, DWORD PTR _stream$[ebp]
	call	?eof@Strbuff@@QAEHXZ			; Strbuff::eof
	test	eax, eax
	je	SHORT $L93405

; 277  :     ch=_T('\0');

	mov	WORD PTR _ch$[ebp], 0
$L93405:

; 278  :  switch( ch ) {

	movzx	eax, WORD PTR _ch$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 125		; 0000007dH
	ja	SHORT $L93414
	mov	ecx, DWORD PTR tv70[ebp]
	movzx	edx, BYTE PTR $L93759[ecx]
	jmp	DWORD PTR $L93763[edx*4]
$L93410:

; 279  : 	   case _T('\0'):
; 280  : 	    return( REOF );

	or	eax, -1
	jmp	SHORT $L93403
$L93411:

; 281  : 	    break;
; 282  :        case _T('\\')  :
; 283  : 	    return( get_code_word( stream, cwp ) );

	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	?get_code_word@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z ; get_code_word
	add	esp, 8
	jmp	SHORT $L93403
$L93412:

; 284  : 	    break;
; 285  :        case _T('{')  :
; 286  : 	    ++brace_state;

	mov	eax, DWORD PTR _brace_state
	add	eax, 1
	mov	DWORD PTR _brace_state, eax

; 287  : 	    return( ROBRA );

	mov	eax, -2					; fffffffeH
	jmp	SHORT $L93403
$L93413:

; 288  : 	    break;
; 289  :        case _T('}')  :
; 290  : 	    --brace_state;

	mov	eax, DWORD PTR _brace_state
	sub	eax, 1
	mov	DWORD PTR _brace_state, eax

; 291  : 	    return( RCBRA );

	mov	eax, -3					; fffffffdH
	jmp	SHORT $L93403
$L93414:

; 292  : 	    break;
; 293  :        default :
; 294  : 	    return( (int)ch );

	movzx	eax, WORD PTR _ch$[ebp]
$L93403:

; 295  : 	    break;
; 296  :        }
; 297  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93762
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93762:
	DD	1
	DD	$L93761
$L93761:
	DD	-8					; fffffff8H
	DD	2
	DD	$L93760
$L93760:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$L93763:
	DD	$L93410
	DD	$L93411
	DD	$L93412
	DD	$L93413
	DD	$L93414
$L93759:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	3
?rtf_read@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z ENDP		; rtf_read
_TEXT	ENDS
PUBLIC	??_C@_1BK@HKPIAPHO@?$AA?5?$AA?9?$AA1?$AA2?$AA3?$AA4?$AA5?$AA6?$AA7?$AA8?$AA9?$AA0?$AA?$AA@ ; `string'
EXTRN	@_RTC_Check_4_to_2@4:NEAR
EXTRN	_wcschr:NEAR
;	COMDAT ??_C@_1BK@HKPIAPHO@?$AA?5?$AA?9?$AA1?$AA2?$AA3?$AA4?$AA5?$AA6?$AA7?$AA8?$AA9?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@HKPIAPHO@?$AA?5?$AA?9?$AA1?$AA2?$AA3?$AA4?$AA5?$AA6?$AA7?$AA8?$AA9?$AA0?$AA?$AA@ DB ' '
	DB	00H, '-', 00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H, '5', 00H
	DB	'6', 00H, '7', 00H, '8', 00H, '9', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?get_code_word@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z
_TEXT	SEGMENT
tv67 = -304						; size = 4
_c$ = -104						; size = 4
_v$ = -92						; size = 4
_buf$ = -80						; size = 70
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_stream$ = 8						; size = 4
_cwp$ = 12						; size = 4
?get_code_word@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z PROC NEAR ; get_code_word, COMDAT

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 204  :  TCHAR buf[35];
; 205  :  int v, c;
; 206  : 
; 207  :  c = stream.get();

	mov	ecx, DWORD PTR _stream$[ebp]
	call	?get@Strbuff@@QAEGXZ			; Strbuff::get
	movzx	eax, ax
	mov	DWORD PTR _c$[ebp], eax

; 208  :  switch( c ) {

	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 10					; 0000000aH
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 115		; 00000073H
	ja	SHORT $L93382
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $L93767[edx]
	jmp	DWORD PTR $L93773[eax*4]
$L93375:

; 209  :        case _T('\\')  :
; 210  :        case _T('}')   :
; 211  :        case _T('{')   :
; 212  : 	    return( c );

	mov	eax, DWORD PTR _c$[ebp]
	jmp	$L93367
$L93376:

; 213  : 	    break;
; 214  :        case _T('*')   :
; 215  : 	    stream.get();

	mov	ecx, DWORD PTR _stream$[ebp]
	call	?get@Strbuff@@QAEGXZ			; Strbuff::get

; 216  : 	    break;

	jmp	$L93372
$L93377:

; 217  : #ifndef _UNICODE
; 218  :        case _T('~')   :
; 219  : 	    return( _T(' ')  );
; 220  : 	    break;
; 221  : #else
; 222  : 	   case _T('u')  :
; 223  : 	    v = read_int(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	?read_int@@YAHAAVStrbuff@@@Z		; read_int
	add	esp, 4
	mov	DWORD PTR _v$[ebp], eax

; 224  : 		return( v );

	mov	eax, DWORD PTR _v$[ebp]
	jmp	$L93367
$L93378:

; 225  : 	   break;
; 226  : #endif
; 227  :        case _T('\xa')  :
; 228  :        case _T('\xd')  :
; 229  : 	    return( REOL );

	mov	eax, -5					; fffffffbH
	jmp	$L93367
$L93379:

; 230  : 	    break;
; 231  :        case _T('_')  :
; 232  : 	    return( _T('-')  );

	mov	eax, 45					; 0000002dH
	jmp	$L93367
$L93380:

; 233  : 	    break;
; 234  :        case _T('\'')  :
; 235  : 	    v = read_hex2( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	?read_hex2@@YAHAAVStrbuff@@@Z		; read_hex2
	add	esp, 4
	mov	DWORD PTR _v$[ebp], eax

; 236  : 	    return( v );

	mov	eax, DWORD PTR _v$[ebp]
	jmp	$L93367
$L93381:

; 237  : 	    break;
; 238  :        case _T('|')  :
; 239  : 	    break;

	jmp	$L93372
$L93382:

; 240  :        default :
; 241  : 	    stream.putback( c );

	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?putback@Strbuff@@QAEXG@Z		; Strbuff::putback

; 242  : 	    read_name( stream, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	?read_name@@YAHAAVStrbuff@@PAG@Z	; read_name
	add	esp, 8

; 243  : 	    cwp->val = 1;

	mov	eax, DWORD PTR _cwp$[ebp]
	mov	DWORD PTR [eax+60], 1

; 244  : 	    _tcscpy( cwp->name, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cwp$[ebp]
	push	ecx
	call	_wcscpy
	add	esp, 8

; 245  : 	    c = stream.get();

	mov	ecx, DWORD PTR _stream$[ebp]
	call	?get@Strbuff@@QAEGXZ			; Strbuff::get
	movzx	eax, ax
	mov	DWORD PTR _c$[ebp], eax

; 246  : 	    if ( _tcschr( _T(" -1234567890"), c ) == NULL )

	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	push	OFFSET FLAT:??_C@_1BK@HKPIAPHO@?$AA?5?$AA?9?$AA1?$AA2?$AA3?$AA4?$AA5?$AA6?$AA7?$AA8?$AA9?$AA0?$AA?$AA@
	call	_wcschr
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93383

; 247  : 	       stream.putback( c );

	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?putback@Strbuff@@QAEXG@Z		; Strbuff::putback

; 248  : 	    else if ( c != _T(' ') ) {

	jmp	SHORT $L93385
$L93383:
	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	je	SHORT $L93385

; 249  : 	       stream.putback( c );

	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?putback@Strbuff@@QAEXG@Z		; Strbuff::putback

; 250  : 	       if ( c != _T(' ') )

	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	je	SHORT $L93387

; 251  : 		  cwp->val = read_int( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	?read_int@@YAHAAVStrbuff@@@Z		; read_int
	add	esp, 4
	mov	ecx, DWORD PTR _cwp$[ebp]
	mov	DWORD PTR [ecx+60], eax
$L93387:

; 252  : 	       c = stream.get();

	mov	ecx, DWORD PTR _stream$[ebp]
	call	?get@Strbuff@@QAEGXZ			; Strbuff::get
	movzx	eax, ax
	mov	DWORD PTR _c$[ebp], eax

; 253  : 	       if ( c != _T(' ') )

	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	je	SHORT $L93385

; 254  : 		  stream.putback( c );

	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	call	?putback@Strbuff@@QAEXG@Z		; Strbuff::putback
$L93385:

; 255  : 	       }
; 256  : 	    return( RCODE );

	mov	eax, -4					; fffffffcH
	jmp	SHORT $L93367
$L93372:

; 257  : 	    break;
; 258  :        }
; 259  :  return( 0 );

	xor	eax, eax
$L93367:

; 260  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93772
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93772:
	DD	1
	DD	$L93771
$L93771:
	DD	-80					; ffffffb0H
	DD	70					; 00000046H
	DD	$L93769
$L93769:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$L93773:
	DD	$L93378
	DD	$L93380
	DD	$L93376
	DD	$L93375
	DD	$L93379
	DD	$L93377
	DD	$L93381
	DD	$L93382
$L93767:
	DB	0
	DB	7
	DB	7
	DB	0
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	1
	DB	7
	DB	7
	DB	2
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	3
	DB	7
	DB	7
	DB	4
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	5
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	3
	DB	6
	DB	3
?get_code_word@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z ENDP	; get_code_word
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?set_caps@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?set_caps@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR ; set_caps, COMDAT

; 323  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 324  :  if ( cwp->val ) {

	mov	eax, DWORD PTR _cwp$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $L93440

; 325  :     curr_state.map_caps = 1;

	mov	DWORD PTR _curr_state, 1

; 326  :     }
; 327  :  else {

	jmp	SHORT $L93441
$L93440:

; 328  :     curr_state.map_caps = 0;

	mov	DWORD PTR _curr_state, 0
$L93441:

; 329  :     }
; 330  :  return( 0 );

	xor	eax, eax

; 331  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?set_caps@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP	; set_caps
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?set_inv@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?set_inv@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR	; set_inv, COMDAT

; 334  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 335  :  if ( cwp->val ) {

	mov	eax, DWORD PTR _cwp$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $L93448

; 336  :     curr_state.map_inv = 1;

	mov	DWORD PTR _curr_state+4, 1

; 337  :     }
; 338  :  else {

	jmp	SHORT $L93449
$L93448:

; 339  :     curr_state.map_inv = 0;

	mov	DWORD PTR _curr_state+4, 0
$L93449:

; 340  :     }
; 341  :  return( 0 );

	xor	eax, eax

; 342  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?set_inv@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP	; set_inv
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?output_bold@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?output_bold@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR ; output_bold, COMDAT

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 347  :  if ( cwp->val ) {

	mov	eax, DWORD PTR _cwp$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $L93456

; 348  :     if ( !curr_state.bold && !curr_state.head ) {

	cmp	DWORD PTR _curr_state+12, 0
	jne	SHORT $L93457
	cmp	DWORD PTR _curr_state+20, 0
	jne	SHORT $L93457

; 349  :        out.put( _T('{')) ;

	push	123					; 0000007bH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 350  :        curr_state.bold = 1;

	mov	DWORD PTR _curr_state+12, 1
$L93457:

; 351  :        }
; 352  :     }
; 353  :  else {

	jmp	SHORT $L93458
$L93456:

; 354  :     if ( curr_state.bold && !curr_state.head) {

	cmp	DWORD PTR _curr_state+12, 0
	je	SHORT $L93458
	cmp	DWORD PTR _curr_state+20, 0
	jne	SHORT $L93458

; 355  :        out.put( _T('}')) ;

	push	125					; 0000007dH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 356  :        curr_state.bold = 0;

	mov	DWORD PTR _curr_state+12, 0
$L93458:

; 357  :        }
; 358  :     }
; 359  :  return( 0 );

	xor	eax, eax

; 360  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?output_bold@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP	; output_bold
_TEXT	ENDS
PUBLIC	??_C@_15KHNANINF@?$AAq?$AAc?$AA?$AA@		; `string'
PUBLIC	??_C@_15NKNIJHFP@?$AAq?$AAj?$AA?$AA@		; `string'
PUBLIC	??_C@_15PPLDMIID@?$AAq?$AAl?$AA?$AA@		; `string'
PUBLIC	??_C@_15OJBKLNGJ@?$AAf?$AAs?$AA?$AA@		; `string'
;	COMDAT ??_C@_15KHNANINF@?$AAq?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_15KHNANINF@?$AAq?$AAc?$AA?$AA@ DB 'q', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15NKNIJHFP@?$AAq?$AAj?$AA?$AA@
CONST	SEGMENT
??_C@_15NKNIJHFP@?$AAq?$AAj?$AA?$AA@ DB 'q', 00H, 'j', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15PPLDMIID@?$AAq?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_15PPLDMIID@?$AAq?$AAl?$AA?$AA@ DB 'q', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15OJBKLNGJ@?$AAf?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_15OJBKLNGJ@?$AAf?$AAs?$AA?$AA@ DB 'f', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?output_head@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?output_head@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR ; output_head, COMDAT

; 364  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 365  :  if ( !_tcsicmp( cwp->name, _T("qc") ) ) {

	push	OFFSET FLAT:??_C@_15KHNANINF@?$AAq?$AAc?$AA?$AA@
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	__wcsicmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93466

; 366  :     if ( !curr_state.head ) {

	cmp	DWORD PTR _curr_state+20, 0
	jne	SHORT $L93468

; 367  :        out.put( _T('[')) ;

	push	91					; 0000005bH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 368  :        curr_state.head = 1;

	mov	DWORD PTR _curr_state+20, 1

; 369  :        curr_state.size=14;

	mov	DWORD PTR _curr_state+24, 14		; 0000000eH
$L93468:

; 370  :        }
; 371  :     }
; 372  :  else if ( !_tcsicmp( cwp->name, _T("qj") ) || !_tcsicmp( cwp->name, _T("ql") ) ) {

	jmp	SHORT $L93469
$L93466:
	push	OFFSET FLAT:??_C@_15NKNIJHFP@?$AAq?$AAj?$AA?$AA@
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	__wcsicmp
	add	esp, 8
	test	eax, eax
	je	SHORT $L93471
	push	OFFSET FLAT:??_C@_15PPLDMIID@?$AAq?$AAl?$AA?$AA@
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	__wcsicmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93469
$L93471:

; 373  :     if ( curr_state.head ) {

	cmp	DWORD PTR _curr_state+20, 0
	je	SHORT $L93469

; 374  :        out.put(_T(']')) ;

	push	93					; 0000005dH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 375  :        curr_state.head = 0;

	mov	DWORD PTR _curr_state+20, 0

; 376  :        curr_state.size = 12;

	mov	DWORD PTR _curr_state+24, 12		; 0000000cH
$L93469:

; 377  :        }
; 378  :     }
; 379  :  if ( !_tcsicmp( cwp->name, _T("fs") ) ) {

	push	OFFSET FLAT:??_C@_15OJBKLNGJ@?$AAf?$AAs?$AA?$AA@
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	__wcsicmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93475

; 380  : 	if ( curr_state.head && cwp->val == 24 ) {

	cmp	DWORD PTR _curr_state+20, 0
	je	SHORT $L93477
	mov	eax, DWORD PTR _cwp$[ebp]
	cmp	DWORD PTR [eax+60], 24			; 00000018H
	jne	SHORT $L93477

; 381  : 	   out.put(_T(']')) ;

	push	93					; 0000005dH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 382  :        curr_state.head = 0;

	mov	DWORD PTR _curr_state+20, 0

; 383  :        curr_state.size = 12;

	mov	DWORD PTR _curr_state+24, 12		; 0000000cH

; 384  :        }
; 385  : 	else if ( !curr_state.head && cwp->val == 28 ) {

	jmp	SHORT $L93475
$L93477:
	cmp	DWORD PTR _curr_state+20, 0
	jne	SHORT $L93475
	mov	eax, DWORD PTR _cwp$[ebp]
	cmp	DWORD PTR [eax+60], 28			; 0000001cH
	jne	SHORT $L93475

; 386  :        out.put( _T('[')) ;

	push	91					; 0000005bH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 387  :        curr_state.head = 1;

	mov	DWORD PTR _curr_state+20, 1

; 388  :        curr_state.size=14;

	mov	DWORD PTR _curr_state+24, 14		; 0000000eH
$L93475:

; 389  :        }
; 390  :     }
; 391  :  
; 392  :  return( 0 );

	xor	eax, eax

; 393  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?output_head@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP	; output_head
_TEXT	ENDS
PUBLIC	??_C@_1O@JFDDJFFG@?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1O@JFDDJFFG@?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1O@JFDDJFFG@?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?$AA@ DB 'u', 00H, 'l'
	DB	00H, 'n', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?output_us@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?output_us@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR ; output_us, COMDAT

; 397  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 398  :  if ( !_tcsicmp( cwp->name, _T("ulnone") ) && curr_state.underscore ) {

	push	OFFSET FLAT:??_C@_1O@JFDDJFFG@?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?$AA@
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	__wcsicmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93486
	cmp	DWORD PTR _curr_state+16, 0
	je	SHORT $L93486

; 399  :     out.put( _T('>')) ;

	push	62					; 0000003eH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 400  :     curr_state.underscore = 0;

	mov	DWORD PTR _curr_state+16, 0

; 401  :     return( 0 );

	xor	eax, eax
	jmp	SHORT $L93485
$L93486:

; 402  :     }
; 403  :  if ( cwp->val ) {

	mov	eax, DWORD PTR _cwp$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $L93488

; 404  :     if ( !curr_state.underscore ) {

	cmp	DWORD PTR _curr_state+16, 0
	jne	SHORT $L93489

; 405  :        out.put( _T('<')) ;

	push	60					; 0000003cH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 406  :        curr_state.underscore = 1;

	mov	DWORD PTR _curr_state+16, 1
$L93489:

; 407  :        }
; 408  :     }
; 409  :  else {

	jmp	SHORT $L93490
$L93488:

; 410  :     if ( curr_state.underscore ) {

	cmp	DWORD PTR _curr_state+16, 0
	je	SHORT $L93490

; 411  :        out.put( _T('>')) ;

	push	62					; 0000003eH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 412  :        curr_state.underscore = 0;

	mov	DWORD PTR _curr_state+16, 0
$L93490:

; 413  :        }
; 414  :     }
; 415  :  return( 0 );

	xor	eax, eax
$L93485:

; 416  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?output_us@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP	; output_us
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?plain@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?plain@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR	; plain, COMDAT

; 419  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 420  :  if ( curr_state.bold ) {

	cmp	DWORD PTR _curr_state+12, 0
	je	SHORT $L93498

; 421  :     out.put( _T('}')) ;

	push	125					; 0000007dH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 422  :     curr_state.bold = 0;

	mov	DWORD PTR _curr_state+12, 0
$L93498:

; 423  :     }
; 424  :  if ( curr_state.underscore ) {

	cmp	DWORD PTR _curr_state+16, 0
	je	SHORT $L93499

; 425  :     out.put( _T('>')  );

	push	62					; 0000003eH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 426  :     curr_state.underscore = 0;

	mov	DWORD PTR _curr_state+16, 0
$L93499:

; 427  :     }
; 428  :  if ( curr_state.head ) {

	cmp	DWORD PTR _curr_state+20, 0
	je	SHORT $L93500

; 429  :     out.put( _T(']')  );

	push	93					; 0000005dH
	mov	ecx, DWORD PTR _out$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 430  :     curr_state.head = 0;

	mov	DWORD PTR _curr_state+20, 0

; 431  :     curr_state.size = 12;

	mov	DWORD PTR _curr_state+24, 12		; 0000000cH
$L93500:

; 432  :     }
; 433  : 
; 434  :  return( 1 );

	mov	eax, 1

; 435  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?plain@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP	; plain
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR	; font, COMDAT

; 438  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$L93508:

; 439  :  while (in.get() != _T(';')) ;

	mov	ecx, DWORD PTR _in$[ebp]
	call	?get@Strbuff@@QAEGXZ			; Strbuff::get
	movzx	eax, ax
	cmp	eax, 59					; 0000003bH
	je	SHORT $L93509
	jmp	SHORT $L93508
$L93509:

; 440  :  return( 1 );

	mov	eax, 1

; 441  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?font@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP		; font
_TEXT	ENDS
PUBLIC	??_C@_17DEBDAFOO@?$AAp?$AAa?$AAr?$AA?$AA@	; `string'
;	COMDAT ??_C@_17DEBDAFOO@?$AAp?$AAa?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_17DEBDAFOO@?$AAp?$AAa?$AAr?$AA?$AA@ DB 'p', 00H, 'a', 00H, 'r', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_cwp$ = 16						; size = 4
_s$ = 20						; size = 4
?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z PROC NEAR	; output, COMDAT

; 445  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 446  :  if ( !(!_tcsicmp(cwp->name,_T("par")) && curr_state.head==1) )

	push	OFFSET FLAT:??_C@_17DEBDAFOO@?$AAp?$AAa?$AAr?$AA?$AA@
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	__wcsicmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93517
	cmp	DWORD PTR _curr_state+20, 1
	je	SHORT $L93516
$L93517:

; 447  : 	out.puts( s );

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	?puts@Strbuff@@QAEXPBG@Z		; Strbuff::puts

; 448  :  else if (_tcsicmp(cwp->name,_T("par")))

	jmp	SHORT $L93519
$L93516:
	push	OFFSET FLAT:??_C@_17DEBDAFOO@?$AAp?$AAa?$AAr?$AA?$AA@
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	__wcsicmp
	add	esp, 8
	test	eax, eax
	je	SHORT $L93519

; 449  :     out.puts(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	?puts@Strbuff@@QAEXPBG@Z		; Strbuff::puts
$L93519:

; 450  :  return( 1 );

	mov	eax, 1

; 451  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?output@@YAHAAVStrbuff@@0PAUCODE_WORD@@PAG@Z ENDP	; output
_TEXT	ENDS
PUBLIC	?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z ; RTFToAst
PUBLIC	??_C@_15NPCHJNND@?$AA?$HO?$AA?5?$AA?$AA@	; `string'
PUBLIC	??0Strbuff@@QAE@XZ				; Strbuff::Strbuff
PUBLIC	??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z ; Strbuff::Strbuff
PUBLIC	??1Strbuff@@UAE@XZ				; Strbuff::~Strbuff
PUBLIC	?getstr@Strbuff@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@XZ ; Strbuff::getstr
PUBLIC	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
PUBLIC	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
EXTRN	_iswlower:NEAR
EXTRN	_iswascii:NEAR
EXTRN	_towupper:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z$1
__ehfuncinfo$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z DD 019930520H
	DD	03H
	DD	FLAT:__unwindtable$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_15NPCHJNND@?$AA?$HO?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_15NPCHJNND@?$AA?$HO?$AA?5?$AA?$AA@ DB '~', 00H, ' ', 00H, 00H, 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z
_TEXT	SEGMENT
tv75 = -956						; size = 4
$T93796 = -948						; size = 4
_instream$ = -744					; size = 316
_outstream$ = -420					; size = 316
_c$ = -96						; size = 4
_cw$ = -84						; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z PROC NEAR ; RTFToAst, COMDAT

; 467  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 944				; 000003b0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-956]
	mov	ecx, 236				; 000000ecH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR $T93796[ebp], 0

; 468  :  CODE_WORD cw;
; 469  :  int c;
; 470  :  Strbuff outstream = Strbuff();

	lea	ecx, DWORD PTR _outstream$[ebp]
	call	??0Strbuff@@QAE@XZ			; Strbuff::Strbuff
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 471  :  Strbuff instream = Strbuff(str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	lea	ecx, DWORD PTR _instream$[ebp]
	call	??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z ; Strbuff::Strbuff
	mov	BYTE PTR __$EHRec$[ebp+8], 2
$L93546:

; 472  : 
; 473  :  while ( ( c = rtf_read( instream, &cw ) ) != REOF ) {

	lea	eax, DWORD PTR _cw$[ebp]
	push	eax
	lea	ecx, DWORD PTR _instream$[ebp]
	push	ecx
	call	?rtf_read@@YAHAAVStrbuff@@PAUCODE_WORD@@@Z ; rtf_read
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
	cmp	DWORD PTR _c$[ebp], -1
	je	$L93547

; 474  :        switch( c ) {

	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR tv75[ebp]
	add	ecx, 5
	mov	DWORD PTR tv75[ebp], ecx
	cmp	DWORD PTR tv75[ebp], 99			; 00000063H
	ja	$L93560
	mov	edx, DWORD PTR tv75[ebp]
	movzx	eax, BYTE PTR $L93802[edx]
	jmp	DWORD PTR $L93811[eax*4]
$L93552:

; 475  : 		 case _T('<'):
; 476  : 		 case _T('>'):
; 477  : 	     case _T('['):
; 478  : 		 case _T(']'):
; 479  :              outstream.put(_T('~')) ;

	push	126					; 0000007eH
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 480  : 			 outstream.put(c);

	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 481  : 			 break;

	jmp	$L93549
$L93553:

; 482  :          case ROBRA :
; 483  : 		  push_state();

	call	?push_state@@YAHXZ			; push_state

; 484  : 		  break;

	jmp	$L93549
$L93554:

; 485  : 	     case RCBRA :
; 486  : 		  pop_state( outstream );

	lea	eax, DWORD PTR _outstream$[ebp]
	push	eax
	call	?pop_state@@YAHAAVStrbuff@@@Z		; pop_state
	add	esp, 4

; 487  : 		  break;

	jmp	$L93549
$L93555:

; 488  : 	     case RCODE :
; 489  : 		  do_code( &cw, instream, outstream );

	lea	eax, DWORD PTR _outstream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _instream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cw$[ebp]
	push	edx
	call	?do_code@@YAHPAUCODE_WORD@@AAVStrbuff@@1@Z ; do_code
	add	esp, 12					; 0000000cH

; 490  : 		  break;

	jmp	$L93549
$L93556:

; 491  : 	     case REOL :
; 492  : 		  outstream.put( _T('\n')) ;

	push	10					; 0000000aH
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 493  : 		  break;

	jmp	$L93549
$L93557:

; 494  : 	     case 9 :
; 495  : 		  outstream.put( _T('|')  );

	push	124					; 0000007cH
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 496  : 		  break;

	jmp	$L93549
$L93558:

; 497  : 	     case 0x0a :
; 498  : 	     case 0x0d :
; 499  : 		  break;

	jmp	$L93549
$L93559:

; 500  : #ifdef _UNICODE
; 501  : 	     case _T('^')  :
; 502  : 		  outstream.put( _T('^')) ;

	push	94					; 0000005eH
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 503  : 		  break;

	jmp	$L93549
$L93560:

; 504  : #endif
; 505  : 	     default :
; 506  : 		  if ( !curr_state.map_inv ) {

	cmp	DWORD PTR _curr_state+4, 0
	jne	$L93549

; 507  : 		     if ( c == _T(' ')  && curr_state.hi_char ) {

	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	jne	SHORT $L93562
	cmp	DWORD PTR _curr_state+8, 0
	je	SHORT $L93562

; 508  : 			curr_state.hi_char = 0;

	mov	DWORD PTR _curr_state+8, 0

; 509  : 			outstream.puts( _T("~ ") );

	push	OFFSET FLAT:??_C@_15NPCHJNND@?$AA?$HO?$AA?5?$AA?$AA@
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?puts@Strbuff@@QAEXPBG@Z		; Strbuff::puts

; 510  : 			}
; 511  : 		     else if ( curr_state.map_caps && _istascii( c ) && !_istlower( c ) )

	jmp	$L93549
$L93562:
	cmp	DWORD PTR _curr_state, 0
	je	SHORT $L93565
	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	call	_iswascii
	add	esp, 4
	test	eax, eax
	je	SHORT $L93565
	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	call	_iswlower
	add	esp, 4
	test	eax, eax
	jne	SHORT $L93565

; 512  : 			outstream.put( _totupper( c ) );

	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	call	_towupper
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 513  : 		     else if ( _istascii( c ) )

	jmp	SHORT $L93549
$L93565:
	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	call	_iswascii
	add	esp, 4
	test	eax, eax
	je	SHORT $L93567

; 514  : 			outstream.put( c);

	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put

; 515  : 		     else {

	jmp	SHORT $L93549
$L93567:

; 516  : #ifndef _UNICODE 
; 517  : 			outstream.put( _T('~')) ;
; 518  : 			outstream.put( c);
; 519  : 			curr_state.hi_char = 1;
; 520  : #else
; 521  : 		    outstream.put( c); 

	mov	ecx, DWORD PTR _c$[ebp]
	call	@_RTC_Check_4_to_2@4
	push	eax
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?put@Strbuff@@QAEXG@Z			; Strbuff::put
$L93549:

; 522  : #endif
; 523  : 			 }
; 524  : 		     }
; 525  : 		     break;
; 526  : 	     }
; 527  :        }

	jmp	$L93546
$L93547:

; 528  :  return( outstream.getstr() );

	lea	ecx, DWORD PTR _outstream$[ebp]
	call	?getstr@Strbuff@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@XZ ; Strbuff::getstr
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	eax, DWORD PTR $T93796[ebp]
	or	eax, 1
	mov	DWORD PTR $T93796[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _instream$[ebp]
	call	??1Strbuff@@UAE@XZ			; Strbuff::~Strbuff
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outstream$[ebp]
	call	??1Strbuff@@UAE@XZ			; Strbuff::~Strbuff
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 529  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93810
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 956				; 000003bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93810:
	DD	3
	DD	$L93809
$L93809:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$L93803
	DD	-420					; fffffe5cH
	DD	316					; 0000013cH
	DD	$L93804
	DD	-744					; fffffd18H
	DD	316					; 0000013cH
	DD	$L93805
$L93805:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$L93804:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$L93803:
	DB	99					; 00000063H
	DB	119					; 00000077H
	DB	0
$L93811:
	DD	$L93556
	DD	$L93555
	DD	$L93554
	DD	$L93553
	DD	$L93557
	DD	$L93558
	DD	$L93552
	DD	$L93559
	DD	$L93560
$L93802:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	4
	DB	5
	DB	8
	DB	8
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	6
	DB	7
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z$0:
	lea	ecx, DWORD PTR _outstream$[ebp]
	jmp	??1Strbuff@@UAE@XZ			; Strbuff::~Strbuff
__unwindfunclet$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z$1:
	lea	ecx, DWORD PTR _instream$[ebp]
	jmp	??1Strbuff@@UAE@XZ			; Strbuff::~Strbuff
__unwindfunclet$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z$2:
	mov	eax, DWORD PTR $T93796[ebp]
	and	eax, 1
	je	$L93797
	and	DWORD PTR $T93796[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93797:
	ret	0
__ehhandler$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z ENDP ; RTFToAst
PUBLIC	??_7Strbuff@@6B@				; Strbuff::`vftable'
PUBLIC	??_GStrbuff@@UAEPAXI@Z				; Strbuff::`scalar deleting destructor'
PUBLIC	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
EXTRN	??_EStrbuff@@UAEPAXI@Z:NEAR			; Strbuff::`vector deleting destructor'
;	COMDAT ??_7Strbuff@@6B@
; File c:\astrow32dev\tbt32\strbuff.h
CONST	SEGMENT
??_7Strbuff@@6B@ DD FLAT:??_EStrbuff@@UAEPAXI@Z		; Strbuff::`vftable'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0Strbuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Strbuff@@QAE@XZ PROC NEAR				; Strbuff::Strbuff, COMDAT
; _this$ = ecx

; 20   : 	Strbuff() { len = 0; index=0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7Strbuff@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+308], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Strbuff@@QAE@XZ ENDP					; Strbuff::Strbuff
_TEXT	ENDS
PUBLIC	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ	; ATL::CSimpleStringT<unsigned short,0>::GetLength
PUBLIC	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$0
__ehfuncinfo$??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z PROC NEAR ; Strbuff::Strbuff, COMDAT
; _this$ = ecx

; 21   : 	Strbuff(CString &s) { str=s; index=0; len=s.GetLength(); }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7Strbuff@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+308], 0
	mov	ecx, DWORD PTR _s$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+304], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__ehhandler$??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
	jmp	___CxxFrameHandler
text$x	ENDS
??0Strbuff@@QAE@AAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z ENDP ; Strbuff::Strbuff
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??1Strbuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Strbuff@@UAE@XZ PROC NEAR				; Strbuff::~Strbuff, COMDAT
; _this$ = ecx

; 22   : 	virtual ~Strbuff() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7Strbuff@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Strbuff@@UAE@XZ ENDP					; Strbuff::~Strbuff
_TEXT	ENDS
PUBLIC	?flush@Strbuff@@QAEXXZ				; Strbuff::flush
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?getstr@Strbuff@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getstr@Strbuff@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@XZ PROC NEAR ; Strbuff::getstr, COMDAT
; _this$ = ecx

; 25   : 	CString &getstr() { flush(); return str; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?flush@Strbuff@@QAEXXZ			; Strbuff::flush
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 312				; 00000138H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getstr@Strbuff@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@XZ ENDP ; Strbuff::getstr
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?flush@Strbuff@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?flush@Strbuff@@QAEXXZ PROC NEAR			; Strbuff::flush, COMDAT
; _this$ = ecx

; 24   : 	void flush() { str += buf; len=0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?flush@Strbuff@@QAEXXZ ENDP				; Strbuff::flush
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??_GStrbuff@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GStrbuff@@UAEPAXI@Z PROC NEAR			; Strbuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Strbuff@@UAE@XZ			; Strbuff::~Strbuff
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L92918
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L92918:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GStrbuff@@UAEPAXI@Z ENDP				; Strbuff::`scalar deleting destructor'
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\rtftoast.cpp
_TEXT	ENDS
;	COMDAT ?push_state@@YAHXZ
_TEXT	SEGMENT
?push_state@@YAHXZ PROC NEAR				; push_state, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 180  :  if ( state_sp < STATE_CNT-1 ) {

	cmp	DWORD PTR _state_sp, 24			; 00000018H
	jge	SHORT $L93351

; 181  :     state_stack[++state_sp] = curr_state;

	mov	eax, DWORD PTR _state_sp
	add	eax, 1
	mov	DWORD PTR _state_sp, eax
	mov	edi, DWORD PTR _state_sp
	imul	edi, 28					; 0000001cH
	add	edi, OFFSET FLAT:_state_stack
	mov	ecx, 7
	mov	esi, OFFSET FLAT:_curr_state
	rep movsd

; 182  :     return( 1 );

	mov	eax, 1
	jmp	SHORT $L93350
$L93351:

; 183  :     }
; 184  :  else
; 185  :     return( 0 );

	xor	eax, eax
$L93350:

; 186  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?push_state@@YAHXZ ENDP					; push_state
_TEXT	ENDS
EXTRN	_lfind:NEAR
EXTRN	_strcmpi:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?do_code@@YAHPAUCODE_WORD@@AAVStrbuff@@1@Z
_TEXT	SEGMENT
_cwd$ = -8						; size = 4
_cwp$ = 8						; size = 4
_in$ = 12						; size = 4
_out$ = 16						; size = 4
?do_code@@YAHPAUCODE_WORD@@AAVStrbuff@@1@Z PROC NEAR	; do_code, COMDAT

; 456  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 457  :  CWDO *cwd;
; 458  : 
; 459  :  cwd = (CWDO *)lfind( cwp->name, cwd_array, (unsigned int *)&cwd_count, sizeof( CWDO ), (matchfunc)strcmpi );

	push	OFFSET FLAT:_strcmpi
	push	68					; 00000044H
	push	OFFSET FLAT:_cwd_count
	push	OFFSET FLAT:_cwd_array
	mov	eax, DWORD PTR _cwp$[ebp]
	push	eax
	call	_lfind
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cwd$[ebp], eax

; 460  :  if ( cwd == NULL )

	cmp	DWORD PTR _cwd$[ebp], 0
	jne	SHORT $L93534

; 461  :     return( 0 );

	xor	eax, eax
	jmp	SHORT $L93528
$L93534:

; 462  :  return( cwd->df( in, out, cwp, cwd->out ) );

	mov	esi, esp
	mov	eax, DWORD PTR _cwd$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _cwp$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cwd$[ebp]
	call	DWORD PTR [edx+64]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$L93528:

; 463  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?do_code@@YAHPAUCODE_WORD@@AAVStrbuff@@1@Z ENDP		; do_code
_TEXT	ENDS
PUBLIC	??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<unsigned short,0>::operator=
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=, COMDAT
; _this$ = ecx

; 967  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 968  : 		CThisSimpleString::operator=( strSrc );

	mov	eax, DWORD PTR _strSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<unsigned short,0>::operator=

; 969  : 
; 970  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 971  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
_TEXT	ENDS
PUBLIC	??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z	; ATL::CSimpleStringT<unsigned short,0>::operator+=
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=, COMDAT
; _this$ = ecx

; 1042 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1043 : 		CThisSimpleString::operator+=( pszSrc );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z ; ATL::CSimpleStringT<unsigned short,0>::operator+=

; 1044 : 
; 1045 : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 1046 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
_TEXT	ENDS
PUBLIC	?IsLocked@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsLocked
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
PUBLIC	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ	; ATL::CSimpleStringT<unsigned short,0>::GetString
PUBLIC	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString
PUBLIC	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
PUBLIC	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
PUBLIC	?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<unsigned short,0>::CloneData
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_pNewData$93581 = -44					; size = 4
_pOldData$ = -32					; size = 4
_pSrcData$ = -20					; size = 4
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::operator=, COMDAT
; _this$ = ecx

; 273  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 274  : 		CStringData* pSrcData = strSrc.GetData();

	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pSrcData$[ebp], eax

; 275  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 276  : 		if( pSrcData != pOldData)

	mov	eax, DWORD PTR _pSrcData$[ebp]
	cmp	eax, DWORD PTR _pOldData$[ebp]
	je	SHORT $L93577

; 277  : 		{
; 278  : 			if( pOldData->IsLocked() || pSrcData->pStringMgr != pOldData->pStringMgr )

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?IsLocked@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsLocked
	movzx	eax, al
	test	eax, eax
	jne	SHORT $L93579
	mov	eax, DWORD PTR _pSrcData$[ebp]
	mov	ecx, DWORD PTR _pOldData$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $L93578
$L93579:

; 279  : 			{
; 280  : 				SetString( strSrc.GetString(), strSrc.GetLength() );

	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	push	eax
	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString

; 281  : 			}
; 282  : 			else

	jmp	SHORT $L93577
$L93578:

; 283  : 			{
; 284  : 				CStringData* pNewData = CloneData( pSrcData );

	mov	eax, DWORD PTR _pSrcData$[ebp]
	push	eax
	call	?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<unsigned short,0>::CloneData
	add	esp, 4
	mov	DWORD PTR _pNewData$93581[ebp], eax

; 285  : 				pOldData->Release();

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 286  : 				Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$93581[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L93577:

; 287  : 			}
; 288  : 		}
; 289  : 
; 290  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 291  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::operator=
_TEXT	ENDS
PUBLIC	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z	; ATL::CSimpleStringT<unsigned short,0>::Append
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::operator+=, COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 		Append( pszSrc );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::Append

; 338  : 
; 339  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 340  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::operator+=
_TEXT	ENDS
PUBLIC	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z	; ATL::CSimpleStringT<unsigned short,0>::Append
PUBLIC	?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::StringLength
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::Append, COMDAT
; _this$ = ecx

; 383  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 384  : 		Append( pszSrc, StringLength( pszSrc ) );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	call	?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::StringLength
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::Append

; 385  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::Append
_TEXT	ENDS
PUBLIC	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
PUBLIC	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength
PUBLIC	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT
_pszBuffer$ = -56					; size = 4
_nNewLength$ = -44					; size = 4
_nOldLength$ = -32					; size = 4
_nOffset$ = -20						; size = 4
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Append, COMDAT
; _this$ = ecx

; 387  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 388  : 		// See comment in SetString() about why we do this
; 389  : 		UINT_PTR nOffset = pszSrc-GetString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	mov	DWORD PTR _nOffset$[ebp], ecx

; 390  : 
; 391  : 		UINT nOldLength = GetLength();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	DWORD PTR _nOldLength$[ebp], eax

; 392  : 		int nNewLength = nOldLength+nLength;

	mov	eax, DWORD PTR _nOldLength$[ebp]
	add	eax, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR _nNewLength$[ebp], eax

; 393  : 		PXSTR pszBuffer = GetBuffer( nNewLength );

	mov	eax, DWORD PTR _nNewLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
	mov	DWORD PTR _pszBuffer$[ebp], eax

; 394  : 		if( nOffset <= nOldLength )

	mov	eax, DWORD PTR _nOffset$[ebp]
	cmp	eax, DWORD PTR _nOldLength$[ebp]
	ja	SHORT $L93592

; 395  : 		{
; 396  : 			pszSrc = pszBuffer+nOffset;

	mov	eax, DWORD PTR _nOffset$[ebp]
	mov	ecx, DWORD PTR _pszBuffer$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pszSrc$[ebp], edx
$L93592:

; 397  : 			// No need to call CopyCharsOverlapped, since the destination is
; 398  : 			// beyond the end of the original buffer
; 399  : 		}
; 400  : 		CopyChars( pszBuffer+nOldLength, pszSrc, nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nOldLength$[ebp]
	mov	eax, DWORD PTR _pszBuffer$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	push	ecx
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH

; 401  : 		ReleaseBufferSetLength( nNewLength );

	mov	eax, DWORD PTR _nNewLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength

; 402  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::Append
_TEXT	ENDS
EXTRN	@_RTC_Check_4_to_1@4:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsLocked@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsLocked, COMDAT
; _this$ = ecx

; 75   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 		return nRefs < 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12], 0
	setl	cl
	call	@_RTC_Check_4_to_1@4

; 77   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLocked@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsLocked
_TEXT	ENDS
PUBLIC	??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@	; `string'
EXTRN	__CrtDbgReport:NEAR
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@ DB 'nRefs != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT
??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio .net 2003\vc7\atlmfc\include\at'
	DB	'lsimpstr.h', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		ATLASSERT( nRefs != 0 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $L93858
	push	OFFSET FLAT:??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
	push	0
	push	93					; 0000005dH
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93858
	int	3
$L93858:

; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	test	ecx, ecx
	jg	SHORT $L26116

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	call	DWORD PTR [edx+4]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L26116:

; 98   : 		}
; 99   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
PUBLIC	?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 796  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>

; 797  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z	; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 814  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _strSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>

; 815  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 962  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 963  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ	; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::GetLength, COMDAT
; _this$ = ecx

; 500  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 501  : 		return( GetData()->nDataLength );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	eax, DWORD PTR [eax+4]

; 502  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ENDP	; ATL::CSimpleStringT<unsigned short,0>::GetLength
_TEXT	ENDS
PUBLIC	??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@	; `string'
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@ DB 'pStringMgr != 0', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 210  : 	explicit CSimpleStringT( IAtlStringMgr* pStringMgr ) throw()

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 	{
; 212  : 		ATLASSERT( pStringMgr != NULL );

	cmp	DWORD PTR _pStringMgr$[ebp], 0
	jne	SHORT $L93870
	push	OFFSET FLAT:??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
	push	0
	push	212					; 000000d4H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93870
	int	3
$L93870:

; 213  : 		CStringData* pData = pStringMgr->GetNilString();

	mov	eax, DWORD PTR _pStringMgr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [edx+12]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pData$[ebp], eax

; 214  : 		Attach( pData );

	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach

; 215  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_pNewData$ = -32					; size = 4
_pSrcData$ = -20					; size = 4
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 217  : 	CSimpleStringT( const CSimpleStringT& strSrc )

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	{
; 219  : 		CStringData* pSrcData = strSrc.GetData();

	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pSrcData$[ebp], eax

; 220  : 		CStringData* pNewData = CloneData( pSrcData );

	mov	eax, DWORD PTR _pSrcData$[ebp]
	push	eax
	call	?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<unsigned short,0>::CloneData
	add	esp, 4
	mov	DWORD PTR _pNewData$[ebp], eax

; 221  : 		Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach

; 222  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 262  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 		CStringData* pData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pData$[ebp], eax

; 264  : 		pData->Release();

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 265  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
_TEXT	ENDS
PUBLIC	?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nMinBufferLength$ = 8					; size = 4
?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer, COMDAT
; _this$ = ecx

; 489  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 490  : 		return( PrepareWrite( nMinBufferLength ) );

	mov	eax, DWORD PTR _nMinBufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite

; 491  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
_TEXT	ENDS
EXTRN	_wcslen:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::StringLength, COMDAT

; 685  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 686  : 		if( psz == NULL )

	cmp	DWORD PTR _psz$[ebp], 0
	jne	SHORT $L92752

; 687  : 		{
; 688  : 			return( 0 );

	xor	eax, eax
	jmp	SHORT $L92751
$L92752:

; 689  : 		}
; 690  : 		return( int( wcslen( psz ) ) );

	mov	eax, DWORD PTR _psz$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
$L92751:

; 691  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::StringLength
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetData, COMDAT
; _this$ = ecx

; 730  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 16					; 00000010H

; 732  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<unsigned short,0>::GetData
_TEXT	ENDS
PUBLIC	?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z
_TEXT	SEGMENT
_nTooShort$ = -44					; size = 4
_nShared$ = -32						; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite, COMDAT
; _this$ = ecx

; 734  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 735  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 736  : 		int nShared = 1-pOldData->nRefs;  // nShared < 0 means true, >= 0 means false

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nShared$[ebp], ecx

; 737  : 		int nTooShort = pOldData->nAllocLength-nLength;  // nTooShort < 0 means true, >= 0 means false

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR _nTooShort$[ebp], ecx

; 738  : 		if( (nShared|nTooShort) < 0 )  // If either sign bit is set (i.e. either is less than zero), we need to copy data

	mov	eax, DWORD PTR _nShared$[ebp]
	or	eax, DWORD PTR _nTooShort$[ebp]
	jge	SHORT $L92761

; 739  : 		{
; 740  : 			PrepareWrite2( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2
$L92761:

; 741  : 		}
; 742  : 
; 743  : 		return( m_pszData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 744  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite
_TEXT	ENDS
EXTRN	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ:NEAR ; AfxGetStringManager
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afxstr.h
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ PROC NEAR ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager, COMDAT

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 50   : 		return( AfxGetStringManager() );

	call	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager

; 51   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ENDP ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
_TEXT	ENDS
PUBLIC	??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@	; `string'
PUBLIC	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<unsigned short,0>::SetLength
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
CONST	SEGMENT
??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@ DB 'nNewLength >= 0', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nNewLength$ = 8					; size = 4
?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength, COMDAT
; _this$ = ecx

; 546  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 547  : 		ATLASSERT( nNewLength >= 0 );

	cmp	DWORD PTR _nNewLength$[ebp], 0
	jge	SHORT $L93887
	push	OFFSET FLAT:??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
	push	0
	push	547					; 00000223H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93887
	int	3
$L93887:

; 548  : 		SetLength( nNewLength );

	mov	eax, DWORD PTR _nNewLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetLength

; 549  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength
_TEXT	ENDS
PUBLIC	??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@	; `string'
PUBLIC	??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@ ; `string'
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@ DB 'nLength >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT
??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@ DB 'n'
	DB	'Length <= GetData()->nAllocLength', 00H	; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::SetLength, COMDAT
; _this$ = ecx

; 789  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 790  : 		ATLASSERT( nLength >= 0 );

	cmp	DWORD PTR _nLength$[ebp], 0
	jge	SHORT $L93890
	push	OFFSET FLAT:??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
	push	0
	push	790					; 00000316H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93890
	int	3
$L93890:

; 791  : 		ATLASSERT( nLength <= GetData()->nAllocLength );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	ecx, DWORD PTR _nLength$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $L93891
	push	OFFSET FLAT:??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
	push	0
	push	791					; 00000317H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93891
	int	3
$L93891:

; 792  : 
; 793  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

	cmp	DWORD PTR _nLength$[ebp], 0
	jl	SHORT $L92769
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	ecx, DWORD PTR _nLength$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $L92768
$L92769:

; 794  : 			AtlThrow(E_INVALIDARG);

	push	-2147024809				; 80070057H
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L92768:

; 795  : 			
; 796  : 		GetData()->nDataLength = nLength;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	ecx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 797  : 		m_pszData[nLength] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nLength$[ebp]
	mov	WORD PTR [ecx+edx*2], 0
$L93889:

; 798  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::SetLength
_TEXT	ENDS
PUBLIC	??BCTraceCategory@ATL@@QBEKXZ			; ATL::CTraceCategory::operator unsigned long
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA	; `ATL::AtlThrow'::`2'::__LINE__Var
PUBLIC	??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@ ; `string'
EXTRN	?atlTraceException@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceException
EXTRN	?AfxThrowMemoryException@@YGXXZ:NEAR		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:NEAR		; AfxThrowOleException
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
CONST	SEGMENT
??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@ DB 'A'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'o', 00H
	DB	'w', 00H, ':', 00H, ' ', 00H, 'h', 00H, 'r', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'x', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA DD 03dH	; `ATL::AtlThrow'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT
??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio .net 2003\vc7\atlmfc\include\at'
	DB	'lexcept.h', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T93894 = -204						; size = 8
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
	push	0
	mov	ecx, OFFSET FLAT:?atlTraceException@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceException
	call	??BCTraceCategory@ATL@@QBEKXZ		; ATL::CTraceCategory::operator unsigned long
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
	add	ecx, 1
	push	ecx
	push	OFFSET FLAT:??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
	lea	ecx, DWORD PTR $T93894[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ ; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 20					; 00000014H

; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )

	cmp	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jne	SHORT $L25398

; 65   : 	{
; 66   : 		AfxThrowMemoryException();

	call	?AfxThrowMemoryException@@YGXXZ		; AfxThrowMemoryException
$L25398:

; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	call	?AfxThrowOleException@@YGXJ@Z		; AfxThrowOleException
$L93893:

; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );
; 74   : #endif
; 75   : };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atltrace.h
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC NEAR	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 158  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pszFileName$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nLineNo$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
PUBLIC	?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z		; ATL::CTrace::TraceV
EXTRN	?s_trace@CTrace@ATL@@2V12@A:QWORD		; ATL::CTrace::s_trace
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ PROC NEAR	; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 168  : 		va_list ptr; va_start(ptr, pszFmt);

	lea	eax, DWORD PTR _pszFmt$[ebp+4]
	mov	DWORD PTR _ptr$[ebp], eax

; 169  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwCategory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET FLAT:?s_trace@CTrace@ATL@@2V12@A
	call	?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z	; ATL::CTrace::TraceV
	add	esp, 28					; 0000001cH

; 170  : 		va_end(ptr);

	mov	DWORD PTR _ptr$[ebp], 0

; 171  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
EXTRN	_AtlTraceVU:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFileName$ = 12					; size = 4
_nLine$ = 16						; size = 4
_dwCategory$ = 20					; size = 4
_nLevel$ = 24						; size = 4
_pszFmt$ = 28						; size = 4
_args$ = 32						; size = 4
?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z PROC NEAR	; ATL::CTrace::TraceV, COMDAT

; 126  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 127  : 		AtlTraceVU(m_dwModule, pszFileName, nLine, dwCategory, nLevel, pszFmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwCategory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_AtlTraceVU
	add	esp, 28					; 0000001cH

; 128  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??BCTraceCategory@ATL@@QBEKXZ PROC NEAR			; ATL::CTraceCategory::operator unsigned long, COMDAT
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	return( m_dwCategory );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BCTraceCategory@ATL@@QBEKXZ ENDP			; ATL::CTraceCategory::operator unsigned long
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Attach, COMDAT
; _this$ = ecx

; 711  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 713  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::Attach
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (this+1);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
PUBLIC	?IsShared@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsShared
PUBLIC	?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<unsigned short,0>::Fork
PUBLIC	?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<unsigned short,0>::Reallocate
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nNewLength$92813 = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2, COMDAT
; _this$ = ecx

; 746  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 748  : 		if( pOldData->nDataLength > nLength )

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _nLength$[ebp]
	jle	SHORT $L92809

; 749  : 		{
; 750  : 			nLength = pOldData->nDataLength;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nLength$[ebp], ecx
$L92809:

; 751  : 		}
; 752  : 		if( pOldData->IsShared() )

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?IsShared@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsShared
	movzx	eax, al
	test	eax, eax
	je	SHORT $L92810

; 753  : 		{
; 754  : 			Fork( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::Fork

; 755  : 		}
; 756  : 		else if( pOldData->nAllocLength < nLength )

	jmp	SHORT $L92807
$L92810:
	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _nLength$[ebp]
	jge	SHORT $L92807

; 757  : 		{
; 758  : 			// Grow exponentially, until we hit 1K.
; 759  : 			int nNewLength = pOldData->nAllocLength;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nNewLength$92813[ebp], ecx

; 760  : 			if( nNewLength > 1024 )

	cmp	DWORD PTR _nNewLength$92813[ebp], 1024	; 00000400H
	jle	SHORT $L92814

; 761  : 			{
; 762  : 				nNewLength += 1024;

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	add	eax, 1024				; 00000400H
	mov	DWORD PTR _nNewLength$92813[ebp], eax

; 763  : 			}
; 764  : 			else

	jmp	SHORT $L92815
$L92814:

; 765  : 			{
; 766  : 				nNewLength *= 2;

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	shl	eax, 1
	mov	DWORD PTR _nNewLength$92813[ebp], eax
$L92815:

; 767  : 			}
; 768  : 			if( nNewLength < nLength )

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	cmp	eax, DWORD PTR _nLength$[ebp]
	jge	SHORT $L92816

; 769  : 			{
; 770  : 				nNewLength = nLength;

	mov	eax, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR _nNewLength$92813[ebp], eax
$L92816:

; 771  : 			}
; 772  : 			Reallocate( nNewLength );

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::Reallocate
$L92807:

; 773  : 		}
; 774  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsShared@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsShared, COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return( nRefs > 1 ); 

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12], 1
	setg	cl
	call	@_RTC_Check_4_to_1@4

; 81   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShared@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsShared
_TEXT	ENDS
PUBLIC	?AddRef@CStringData@ATL@@QAEXXZ			; ATL::CStringData::AddRef
PUBLIC	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT
_pNewStringMgr$ = -20					; size = 4
_pNewData$ = -8						; size = 4
_pData$ = 8						; size = 4
?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CloneData, COMDAT

; 801  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 802  : 		CStringData* pNewData = NULL;

	mov	DWORD PTR _pNewData$[ebp], 0

; 803  : 
; 804  : 		IAtlStringMgr* pNewStringMgr = pData->pStringMgr->Clone();

	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR [edx+16]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewStringMgr$[ebp], eax

; 805  : 		if( !pData->IsLocked() && (pNewStringMgr == pData->pStringMgr) )

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?IsLocked@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsLocked
	movzx	eax, al
	test	eax, eax
	jne	SHORT $L92820
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _pNewStringMgr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $L92820

; 806  : 		{
; 807  : 			pNewData = pData;

	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pNewData$[ebp], eax

; 808  : 			pNewData->AddRef();

	mov	ecx, DWORD PTR _pNewData$[ebp]
	call	?AddRef@CStringData@ATL@@QAEXXZ		; ATL::CStringData::AddRef

; 809  : 		}
; 810  : 		else

	jmp	SHORT $L92821
$L92820:

; 811  : 		{
; 812  : 			pNewData = pNewStringMgr->Allocate( pData->nDataLength, sizeof( XCHAR ) );

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pNewStringMgr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pNewStringMgr$[ebp]
	call	DWORD PTR [eax]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$[ebp], eax

; 813  : 			if( pNewData == NULL )

	cmp	DWORD PTR _pNewData$[ebp], 0
	jne	SHORT $L92823

; 814  : 			{
; 815  : 				ThrowMemoryException();

	call	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
$L92823:

; 816  : 			}
; 817  : 			pNewData->nDataLength = pData->nDataLength;

	mov	eax, DWORD PTR _pNewData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 818  : 			CopyChars( PXSTR( pNewData->data() ), PCXSTR( pData->data() ), pData->nDataLength+1 );  // Copy '\0'

	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _pData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	mov	ecx, DWORD PTR _pNewData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH
$L92821:

; 819  : 		}
; 820  : 
; 821  : 		return( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
$L93912:

; 822  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CloneData
_TEXT	ENDS
PUBLIC	??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@		; `string'
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@ DB 'nRefs > 0', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AddRef@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::AddRef, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		ATLASSERT(nRefs > 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jg	SHORT $L93915
	push	OFFSET FLAT:??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
	push	0
	push	71					; 00000047H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93915
	int	3
$L93915:

; 72   : 		_InterlockedIncrement(&nRefs);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, 1
	lock	 xadd	 DWORD PTR [eax], ecx

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AddRef@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::AddRef
_TEXT	ENDS
PUBLIC	?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ	; ATL::CSimpleStringT<unsigned short,0>::Empty
PUBLIC	?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT
_pszBuffer$92832 = -44					; size = 4
_nOffset$92831 = -32					; size = 4
_nOldLength$92830 = -20					; size = 4
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::SetString, COMDAT
; _this$ = ecx

; 583  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 584  : 		if( nLength == 0 )

	cmp	DWORD PTR _nLength$[ebp], 0
	jne	SHORT $L92826

; 585  : 		{
; 586  : 			Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<unsigned short,0>::Empty

; 587  : 		}
; 588  : 		else

	jmp	$L93917
$L92826:

; 589  : 		{
; 590  : 			// It is possible that pszSrc points to a location inside of our 
; 591  : 			// buffer.  GetBuffer() might change m_pszData if (1) the buffer 
; 592  : 			// is shared or (2) the buffer is too small to hold the new 
; 593  : 			// string.  We detect this aliasing, and modify pszSrc to point
; 594  : 			// into the newly allocated buffer instead.
; 595  : 			
; 596  : 			if(pszSrc == NULL)

	cmp	DWORD PTR _pszSrc$[ebp], 0
	jne	SHORT $L92828

; 597  : 				AtlThrow(E_INVALIDARG);			

	push	-2147024809				; 80070057H
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L92828:

; 598  : 				
; 599  : 			UINT nOldLength = GetLength();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	DWORD PTR _nOldLength$92830[ebp], eax

; 600  : 			UINT_PTR nOffset = pszSrc-GetString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	mov	DWORD PTR _nOffset$92831[ebp], ecx

; 601  : 			// If 0 <= nOffset <= nOldLength, then pszSrc points into our 
; 602  : 			// buffer
; 603  : 
; 604  : 			PXSTR pszBuffer = GetBuffer( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
	mov	DWORD PTR _pszBuffer$92832[ebp], eax

; 605  : 			if( nOffset <= nOldLength )

	mov	eax, DWORD PTR _nOffset$92831[ebp]
	cmp	eax, DWORD PTR _nOldLength$92830[ebp]
	ja	SHORT $L92833

; 606  : 			{
; 607  : 				CopyCharsOverlapped( pszBuffer, pszBuffer+nOffset, nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nOffset$92831[ebp]
	mov	edx, DWORD PTR _pszBuffer$92832[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _pszBuffer$92832[ebp]
	push	ecx
	call	?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped
	add	esp, 12					; 0000000cH

; 608  : 			}
; 609  : 			else

	jmp	SHORT $L92834
$L92833:

; 610  : 			{
; 611  : 				CopyChars( pszBuffer, pszSrc, nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszBuffer$92832[ebp]
	push	edx
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH
$L92834:

; 612  : 			}
; 613  : 			ReleaseBufferSetLength( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength
$L93917:

; 614  : 		}
; 615  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::SetString
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT
_pNewData$92796 = -44					; size = 4
_pStringMgr$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::Empty, COMDAT
; _this$ = ecx

; 421  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 423  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pStringMgr$[ebp], ecx

; 424  : 		if( pOldData->nDataLength == 0 )

	mov	eax, DWORD PTR _pOldData$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L92793

; 425  : 		{
; 426  : 			return;

	jmp	SHORT $L92790
$L92793:

; 427  : 		}
; 428  : 
; 429  : 		if( pOldData->IsLocked() )

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?IsLocked@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsLocked
	movzx	eax, al
	test	eax, eax
	je	SHORT $L92794

; 430  : 		{
; 431  : 			// Don't reallocate a locked buffer that's shrinking
; 432  : 			SetLength( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetLength

; 433  : 		}
; 434  : 		else

	jmp	SHORT $L92790
$L92794:

; 435  : 		{
; 436  : 			pOldData->Release();

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 437  : 			CStringData* pNewData = pStringMgr->GetNilString();

	mov	eax, DWORD PTR _pStringMgr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [edx+12]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$92796[ebp], eax

; 438  : 			Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$92796[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L92790:

; 439  : 		}
; 440  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ ENDP		; ATL::CSimpleStringT<unsigned short,0>::Empty
_TEXT	ENDS
EXTRN	_memcpy:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CopyChars, COMDAT

; 652  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 653  : 		memcpy( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

	mov	eax, DWORD PTR _nChars$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pchSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pchDest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 654  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ
_TEXT	SEGMENT
?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException, COMDAT

; 704  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 705  : 		AtlThrow( E_OUTOFMEMORY );

	push	-2147024882				; 8007000eH
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L93923:

; 706  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ENDP ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
tv82 = -256						; size = 4
tv74 = -256						; size = 4
_nCharsToCopy$ = -56					; size = 4
_pNewData$ = -44					; size = 4
_nOldLength$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::Fork, COMDAT
; _this$ = ecx

; 715  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 716  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 717  : 		int nOldLength = pOldData->nDataLength;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldLength$[ebp], ecx

; 718  : 		CStringData* pNewData = pOldData->pStringMgr->Clone()->Allocate( nLength, sizeof( XCHAR ) );

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pOldData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR [edx+16]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv74[ebp]
	call	DWORD PTR [edx]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$[ebp], eax

; 719  : 		if( pNewData == NULL )

	cmp	DWORD PTR _pNewData$[ebp], 0
	jne	SHORT $L92845

; 720  : 		{
; 721  : 			ThrowMemoryException();

	call	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
$L92845:

; 722  : 		}
; 723  : 		int nCharsToCopy = ((nOldLength < nLength) ? nOldLength : nLength)+1;  // Copy '\0'

	mov	eax, DWORD PTR _nOldLength$[ebp]
	cmp	eax, DWORD PTR _nLength$[ebp]
	jge	SHORT $L93926
	mov	ecx, DWORD PTR _nOldLength$[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $L93927
$L93926:
	mov	edx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR tv82[ebp], edx
$L93927:
	mov	eax, DWORD PTR tv82[ebp]
	add	eax, 1
	mov	DWORD PTR _nCharsToCopy$[ebp], eax

; 724  : 		CopyChars( PXSTR( pNewData->data() ), PCXSTR( pOldData->data() ), nCharsToCopy );

	mov	eax, DWORD PTR _nCharsToCopy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	mov	ecx, DWORD PTR _pNewData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH

; 725  : 		pNewData->nDataLength = nOldLength;

	mov	eax, DWORD PTR _pNewData$[ebp]
	mov	ecx, DWORD PTR _nOldLength$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 726  : 		pOldData->Release();

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 727  : 		Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L93925:

; 728  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP		; ATL::CSimpleStringT<unsigned short,0>::Fork
_TEXT	ENDS
PUBLIC	??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@ ; `string'
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT
??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@ DB 'pOldDat'
	DB	'a->nAllocLength < nLength', 00H		; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_pNewData$ = -44					; size = 4
_pStringMgr$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Reallocate, COMDAT
; _this$ = ecx

; 776  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 778  : 		ATLASSERT( pOldData->nAllocLength < nLength );

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _nLength$[ebp]
	jl	SHORT $L93930
	push	OFFSET FLAT:??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
	push	0
	push	778					; 0000030aH
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93930
	int	3
$L93930:

; 779  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pStringMgr$[ebp], ecx

; 780  : 		CStringData* pNewData = pStringMgr->Reallocate( pOldData, nLength, sizeof( XCHAR ) );

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOldData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pStringMgr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [eax+8]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$[ebp], eax

; 781  : 		if( pNewData == NULL )

	cmp	DWORD PTR _pNewData$[ebp], 0
	jne	SHORT $L92855

; 782  : 		{
; 783  : 			ThrowMemoryException();

	call	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
$L92855:

; 784  : 		}
; 785  : 		Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L93929:

; 786  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::Reallocate
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetString, COMDAT
; _this$ = ecx

; 509  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		return( m_pszData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 511  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ENDP	; ATL::CSimpleStringT<unsigned short,0>::GetString
_TEXT	ENDS
EXTRN	_memmove:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped, COMDAT

; 656  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 657  : 		memmove( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

	mov	eax, DWORD PTR _nChars$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pchSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pchDest$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 658  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped
_TEXT	ENDS
END
