; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\Textbary.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_02BKFDOEMK@wt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BMJICGCB@rt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15JJPIMNBO@?$AAr?$AAb?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSymbolAry@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSymbolAry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSymbol@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECRSymbol@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTextBlock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTextBlock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IDstring@CTextBlock@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CTextBlockCmp@@YAHPBX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CTextBlockAry@@QAEHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CTextBlockAry@@QAEHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRSymbol@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSymbol@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?charsize@@3HA					; charsize
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
_DATA	SEGMENT
?charsize@@3HA DD 01H					; charsize
_DATA	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	??1CSymbol@@QAE@XZ				; CSymbol::~CSymbol
PUBLIC	??_ECSymbol@@QAEPAXI@Z				; CSymbol::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	__RTC_InitBase:NEAR
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCcsu /ZI
rtc$TMZ	ENDS
;	COMDAT ??_ECSymbol@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ECSymbol@@QAEPAXI@Z PROC NEAR			; CSymbol::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $L93031
	push	OFFSET FLAT:??1CSymbol@@QAE@XZ		; CSymbol::~CSymbol
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	164					; 000000a4H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93032
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L93032:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $L93030
$L93031:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSymbol@@QAE@XZ			; CSymbol::~CSymbol
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93034
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93034:
	mov	eax, DWORD PTR _this$[ebp]
$L93030:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECSymbol@@QAEPAXI@Z ENDP				; CSymbol::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7CSymbol@@6B@				; CSymbol::`vftable'
EXTRN	?Read@CSymbol@@UAEHPAU_iobuf@@@Z:NEAR		; CSymbol::Read
;	COMDAT ??_7CSymbol@@6B@
; File c:\astrow32dev\tbt32\symbol.hpp
CONST	SEGMENT
??_7CSymbol@@6B@ DD FLAT:?Read@CSymbol@@UAEHPAU_iobuf@@@Z ; CSymbol::`vftable'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??1CSymbol@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CSymbol@@QAE@XZ PROC NEAR				; CSymbol::~CSymbol, COMDAT
; _this$ = ecx

; 14   : 	~CSymbol() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CSymbol@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSymbol@@QAE@XZ ENDP					; CSymbol::~CSymbol
_TEXT	ENDS
PUBLIC	??1CRSymbol@@QAE@XZ				; CRSymbol::~CRSymbol
PUBLIC	??_ECRSymbol@@QAEPAXI@Z				; CRSymbol::`vector deleting destructor'
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??_ECRSymbol@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ECRSymbol@@QAEPAXI@Z PROC NEAR			; CRSymbol::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $L93082
	push	OFFSET FLAT:??1CRSymbol@@QAE@XZ		; CRSymbol::~CRSymbol
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	164					; 000000a4H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93083
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L93083:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $L93081
$L93082:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CRSymbol@@QAE@XZ			; CRSymbol::~CRSymbol
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93085
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93085:
	mov	eax, DWORD PTR _this$[ebp]
$L93081:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECRSymbol@@QAEPAXI@Z ENDP				; CRSymbol::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7CRSymbol@@6B@				; CRSymbol::`vftable'
EXTRN	?Read@CRSymbol@@UAEHPAU_iobuf@@@Z:NEAR		; CRSymbol::Read
;	COMDAT ??_7CRSymbol@@6B@
CONST	SEGMENT
??_7CRSymbol@@6B@ DD FLAT:?Read@CRSymbol@@UAEHPAU_iobuf@@@Z ; CRSymbol::`vftable'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??1CRSymbol@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CRSymbol@@QAE@XZ PROC NEAR				; CRSymbol::~CRSymbol, COMDAT
; _this$ = ecx

; 28   : 	~CRSymbol() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CRSymbol@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSymbol@@QAE@XZ			; CSymbol::~CSymbol
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CRSymbol@@QAE@XZ ENDP				; CRSymbol::~CRSymbol
_TEXT	ENDS
PUBLIC	??1CTextBlock@@QAE@XZ				; CTextBlock::~CTextBlock
PUBLIC	??_ECTextBlock@@QAEPAXI@Z			; CTextBlock::`vector deleting destructor'
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??_ECTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ECTextBlock@@QAEPAXI@Z PROC NEAR			; CTextBlock::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $L93241
	push	OFFSET FLAT:??1CTextBlock@@QAE@XZ	; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	144					; 00000090H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93242
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L93242:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $L93240
$L93241:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93244
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93244:
	mov	eax, DWORD PTR _this$[ebp]
$L93240:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECTextBlock@@QAEPAXI@Z ENDP				; CTextBlock::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbloc.hpp
;	COMDAT ??1CTextBlock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CTextBlock@@QAE@XZ PROC NEAR				; CTextBlock::~CTextBlock, COMDAT
; _this$ = ecx

; 9    :    ~CTextBlock() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTextBlock@@QAE@XZ ENDP				; CTextBlock::~CTextBlock
_TEXT	ENDS
PUBLIC	?CTextBlockCmp@@YAHPBX0@Z			; CTextBlockCmp
PUBLIC	?IDstring@CTextBlock@@QAEPADXZ			; CTextBlock::IDstring
EXTRN	_strcmp:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbary.cpp
;	COMDAT ?CTextBlockCmp@@YAHPBX0@Z
_TEXT	SEGMENT
_t2$ = -20						; size = 4
_t1$ = -8						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
?CTextBlockCmp@@YAHPBX0@Z PROC NEAR			; CTextBlockCmp, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13   :  CTextBlock **t1, **t2;
; 14   : 
; 15   :  t1 =(CTextBlock **) p1;

	mov	eax, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _t1$[ebp], eax

; 16   :  t2 =(CTextBlock **) p2;

	mov	eax, DWORD PTR _p2$[ebp]
	mov	DWORD PTR _t2$[ebp], eax

; 17   :  return( strcmp( (*t1)->IDstring(), (*t2)->IDstring() ) );

	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IDstring@CTextBlock@@QAEPADXZ		; CTextBlock::IDstring
	push	eax
	mov	ecx, DWORD PTR _t1$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?IDstring@CTextBlock@@QAEPADXZ		; CTextBlock::IDstring
	push	eax
	call	_strcmp
	add	esp, 8

; 18   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CTextBlockCmp@@YAHPBX0@Z ENDP				; CTextBlockCmp
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbloc.hpp
_TEXT	ENDS
;	COMDAT ?IDstring@CTextBlock@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IDstring@CTextBlock@@QAEPADXZ PROC NEAR		; CTextBlock::IDstring, COMDAT
; _this$ = ecx

; 11   :    char *IDstring() { return _IDstring; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IDstring@CTextBlock@@QAEPADXZ ENDP			; CTextBlock::IDstring
_TEXT	ENDS
PUBLIC	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z	; CTextBlockAry::Find
EXTRN	_lfind:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbary.cpp
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z
_TEXT	SEGMENT
_ptb$ = -20						; size = 4
_this$ = -8						; size = 4
_b$ = 8							; size = 4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z PROC NEAR ; CTextBlockAry::Find, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 24   :  CTextBlock **ptb;
; 25   :                         
; 26   :  ptb = (CTextBlock **) lfind( &b, _array, (unsigned *)&_nElements,
; 27   : 	    sizeof(CTextBlock *), CTextBlockCmp );

	push	OFFSET FLAT:?CTextBlockCmp@@YAHPBX0@Z	; CTextBlockCmp
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_lfind
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ptb$[ebp], eax

; 28   :  if ( ptb == NULL )

	cmp	DWORD PTR _ptb$[ebp], 0
	jne	SHORT $L93300

; 29   :     return( NULL );

	xor	eax, eax
	jmp	SHORT $L93295
$L93300:

; 30   :  else
; 31   :     return( *ptb );

	mov	eax, DWORD PTR _ptb$[ebp]
	mov	eax, DWORD PTR [eax]
$L93295:

; 32   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z ENDP	; CTextBlockAry::Find
_TEXT	ENDS
PUBLIC	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z	; CTextBlockAry::Find
PUBLIC	??0CTextBlock@@QAE@XZ				; CTextBlock::CTextBlock
EXTRN	__except_list:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?SetID@CTextBlock@@QAEHPADH@Z:NEAR		; CTextBlock::SetID
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z$0
__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
_TEXT	SEGMENT
$T93540 = -380						; size = 4
_tb$ = -176						; size = 144
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_id$ = 8						; size = 4
_n$ = 12						; size = 4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z PROC NEAR	; CTextBlockAry::Find, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 37   :  CTextBlock tb;

	lea	ecx, DWORD PTR _tb$[ebp]
	call	??0CTextBlock@@QAE@XZ			; CTextBlock::CTextBlock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 38   : 
; 39   :  tb.SetID( id, n );

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tb$[ebp]
	call	?SetID@CTextBlock@@QAEHPADH@Z		; CTextBlock::SetID

; 40   :  return( Find( &tb ) );

	lea	eax, DWORD PTR _tb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z ; CTextBlockAry::Find
	mov	DWORD PTR $T93540[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tb$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR $T93540[ebp]

; 41   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93552
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93552:
	DD	1
	DD	$L93551
$L93551:
	DD	-176					; ffffff50H
	DD	144					; 00000090H
	DD	$L93546
$L93546:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z$0:
	lea	ecx, DWORD PTR _tb$[ebp]
	jmp	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z ENDP	; CTextBlockAry::Find
PUBLIC	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbloc.hpp
;	COMDAT ??0CTextBlock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CTextBlock@@QAE@XZ PROC NEAR				; CTextBlock::CTextBlock, COMDAT
; _this$ = ecx

; 8    :    CTextBlock() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTextBlock@@QAE@XZ ENDP				; CTextBlock::CTextBlock
_TEXT	ENDS
PUBLIC	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z	; CTextBlockAry::Find
EXTRN	?SetID@CTextBlock@@QAEHPAD0@Z:NEAR		; CTextBlock::SetID
;	COMDAT xdata$x
; File c:\astrow32dev\tbt32\textbary.cpp
xdata$x	SEGMENT
__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z$0
__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
_TEXT	SEGMENT
$T93565 = -380						; size = 4
_tb$ = -176						; size = 144
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_id1$ = 8						; size = 4
_id2$ = 12						; size = 4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z PROC NEAR	; CTextBlockAry::Find, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 45   :  CTextBlock tb;

	lea	ecx, DWORD PTR _tb$[ebp]
	call	??0CTextBlock@@QAE@XZ			; CTextBlock::CTextBlock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 46   : 
; 47   :  tb.SetID( id1, id2 );

	mov	eax, DWORD PTR _id2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id1$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tb$[ebp]
	call	?SetID@CTextBlock@@QAEHPAD0@Z		; CTextBlock::SetID

; 48   :  return( Find( &tb ) );

	lea	eax, DWORD PTR _tb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z ; CTextBlockAry::Find
	mov	DWORD PTR $T93565[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tb$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR $T93565[ebp]

; 49   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93573
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93573:
	DD	1
	DD	$L93572
$L93572:
	DD	-176					; ffffff50H
	DD	144					; 00000090H
	DD	$L93569
$L93569:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z$0:
	lea	ecx, DWORD PTR _tb$[ebp]
	jmp	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z ENDP	; CTextBlockAry::Find
PUBLIC	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z	; CTextBlockAry::Find
EXTRN	?SetID@CTextBlock@@QAEHPAD00@Z:NEAR		; CTextBlock::SetID
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z$0
__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
_TEXT	SEGMENT
$T93580 = -380						; size = 4
_tb$ = -176						; size = 144
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_id1$ = 8						; size = 4
_id2$ = 12						; size = 4
_id3$ = 16						; size = 4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z PROC NEAR ; CTextBlockAry::Find, COMDAT
; _this$ = ecx

; 52   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 53   :  CTextBlock tb;

	lea	ecx, DWORD PTR _tb$[ebp]
	call	??0CTextBlock@@QAE@XZ			; CTextBlock::CTextBlock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 54   : 
; 55   :  tb.SetID( id1, id2, id3 );

	mov	eax, DWORD PTR _id3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id1$[ebp]
	push	edx
	lea	ecx, DWORD PTR _tb$[ebp]
	call	?SetID@CTextBlock@@QAEHPAD00@Z		; CTextBlock::SetID

; 56   :  return( Find( &tb ) );

	lea	eax, DWORD PTR _tb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z ; CTextBlockAry::Find
	mov	DWORD PTR $T93580[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tb$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR $T93580[ebp]

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93588
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L93588:
	DD	1
	DD	$L93587
$L93587:
	DD	-176					; ffffff50H
	DD	144					; 00000090H
	DD	$L93584
$L93584:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z$0:
	lea	ecx, DWORD PTR _tb$[ebp]
	jmp	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z ENDP	; CTextBlockAry::Find
PUBLIC	?Save@CTextBlockAry@@QAEHPAD@Z			; CTextBlockAry::Save
PUBLIC	??_C@_02BKFDOEMK@wt?$AA@			; `string'
EXTRN	?setupBuf@@YAXH@Z:NEAR				; setupBuf
EXTRN	?do_error@@YAXPBD@Z:NEAR			; do_error
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	?WriteText@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR	; CTextBlock::WriteText
EXTRN	?WriteHeader@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR	; CTextBlock::WriteHeader
EXTRN	?WriteHeaderR@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR ; CTextBlock::WriteHeaderR
;	COMDAT ??_C@_02BKFDOEMK@wt?$AA@
CONST	SEGMENT
??_C@_02BKFDOEMK@wt?$AA@ DB 'wt', 00H			; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Save@CTextBlockAry@@QAEHPAD@Z
_TEXT	SEGMENT
_p$ = -44						; size = 4
_stream$ = -32						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_name$ = 8						; size = 4
?Save@CTextBlockAry@@QAEHPAD@Z PROC NEAR		; CTextBlockAry::Save, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   :  int i;
; 63   :  FILE *stream;
; 64   :  CTextBlock *p;
; 65   : 
; 66   :  if ( ( stream = fopen( name, "wt" ) ) == NULL ) {

	push	OFFSET FLAT:??_C@_02BKFDOEMK@wt?$AA@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], eax
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $L93331

; 67   :     do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 68   :     return( 0 );

	xor	eax, eax
	jmp	$L93327
$L93331:

; 69   :     }
; 70   :  setupBuf(1);

	push	1
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 71   :  for ( i = 0, p = _array; i < _nElements; i++, p++ ) {

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $L93333
$L93334:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 144				; 00000090H
	mov	DWORD PTR _p$[ebp], ecx
$L93333:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $L93335

; 72   :      if ( _type == 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $L93336

; 73   : 	    p->WriteHeaderR( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?WriteHeaderR@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::WriteHeaderR

; 74   :      else

	jmp	SHORT $L93337
$L93336:

; 75   : 	    p->WriteHeader( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?WriteHeader@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::WriteHeader
$L93337:

; 76   :      p->WriteText( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?WriteText@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::WriteText

; 77   :      }

	jmp	SHORT $L93334
$L93335:

; 78   :  fclose( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 79   :  setupBuf(0);

	push	0
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 80   :  return( 1 );

	mov	eax, 1
$L93327:

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Save@CTextBlockAry@@QAEHPAD@Z ENDP			; CTextBlockAry::Save
_TEXT	ENDS
PUBLIC	?Load@CTextBlockAry@@QAEHPADH@Z			; CTextBlockAry::Load
PUBLIC	??_C@_02BMJICGCB@rt?$AA@			; `string'
PUBLIC	??_C@_15JJPIMNBO@?$AAr?$AAb?$AA?$AA@		; `string'
PUBLIC	??_GCTextBlock@@QAEPAXI@Z			; CTextBlock::`scalar deleting destructor'
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:NEAR			; `eh vector constructor iterator'
EXTRN	__wfopen:NEAR
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
EXTRN	@_RTC_Check_4_to_1@4:NEAR
EXTRN	_fgetc:NEAR
EXTRN	_ungetc:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
EXTRN	_strlen:NEAR
EXTRN	_mbstowcs:NEAR
EXTRN	?ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z:NEAR ; CTextBlock::ReadTextMbs
EXTRN	?ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z:NEAR	; CTextBlock::ReadText
EXTRN	?ReadHeader@CTextBlock@@QAEHPAU_iobuf@@PAHPAD@Z:NEAR ; CTextBlock::ReadHeader
EXTRN	?ReadHeader2@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR	; CTextBlock::ReadHeader2
EXTRN	?ReadHeader3@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR	; CTextBlock::ReadHeader3
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CTextBlockAry@@QAEHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CTextBlockAry@@QAEHPADH@Z$0
__ehfuncinfo$?Load@CTextBlockAry@@QAEHPADH@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CTextBlockAry@@QAEHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_02BMJICGCB@rt?$AA@
CONST	SEGMENT
??_C@_02BMJICGCB@rt?$AA@ DB 'rt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15JJPIMNBO@?$AAr?$AAb?$AA?$AA@
CONST	SEGMENT
??_C@_15JJPIMNBO@?$AAr?$AAb?$AA?$AA@ DB 'r', 00H, 'b', 00H, 00H, 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Load@CTextBlockAry@@QAEHPADH@Z
_TEXT	SEGMENT
tv199 = -896						; size = 4
tv196 = -896						; size = 4
tv179 = -896						; size = 4
$T93597 = -888						; size = 4
$T93598 = -876						; size = 4
$T93599 = -864						; size = 4
$T93602 = -852						; size = 4
$T93603 = -840						; size = 4
_newname$ = -636					; size = 200
_prch$ = -425						; size = 1
_prid$ = -416						; size = 300
_e$ = -108						; size = 4
_prev$ = -96						; size = 4
_i$ = -84						; size = 4
_stream$ = -72						; size = 4
_t$ = -60						; size = 4
_par$ = -48						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_name$ = 8						; size = 4
_help$ = 12						; size = 4
?Load@CTextBlockAry@@QAEHPADH@Z PROC NEAR		; CTextBlockAry::Load, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Load@CTextBlockAry@@QAEHPADH@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 884				; 00000374H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-896]
	mov	ecx, 221				; 000000ddH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 87   :  CTextBlock *pblk, *par, *t;
; 88   :  FILE *stream;
; 89   :  int i, prev, e;
; 90   :  char prid[300], prch;
; 91   :  TCHAR newname[100];
; 92   : 
; 93   :  if ( ( stream = fopen( name, "rt" ) ) == NULL ) {

	push	OFFSET FLAT:??_C@_02BMJICGCB@rt?$AA@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], eax
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $L93353

; 94   :     do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 95   :     return( 0 );

	xor	eax, eax
	jmp	$L93342
$L93353:

; 96   :     }
; 97   :  setupBuf(1);

	push	1
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 98   :  e = fgetc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _e$[ebp], eax

; 99   :  if ( e != '#' && e != '@') {

	cmp	DWORD PTR _e$[ebp], 35			; 00000023H
	je	$L93355
	cmp	DWORD PTR _e$[ebp], 64			; 00000040H
	je	$L93355
$L93357:

; 100  : 	 while ( e != '#' && e != '@' ) {

	cmp	DWORD PTR _e$[ebp], 35			; 00000023H
	je	SHORT $L93358
	cmp	DWORD PTR _e$[ebp], 64			; 00000040H
	je	SHORT $L93358

; 101  : 		 e = fgetc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _e$[ebp], eax

; 102  : 	     prch = e; 

	mov	ecx, DWORD PTR _e$[ebp]
	call	@_RTC_Check_4_to_1@4
	mov	BYTE PTR _prch$[ebp], al

; 103  : 	 }

	jmp	SHORT $L93357
$L93358:

; 104  :      prch = e;

	mov	ecx, DWORD PTR _e$[ebp]
	call	@_RTC_Check_4_to_1@4
	mov	BYTE PTR _prch$[ebp], al

; 105  : 	 e = fgetc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _e$[ebp], eax

; 106  : #ifdef _UNICODE
; 107  : 	 if ( e == 0 ) {

	cmp	DWORD PTR _e$[ebp], 0
	jne	$L93359

; 108  :        ungetc(e,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8

; 109  : 	   ungetc((int)prch,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	movsx	ecx, BYTE PTR _prch$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8

; 110  : 	   fclose(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 111  :        mbstowcs((wchar_t *)newname,name,strlen(name));

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	lea	edx, DWORD PTR _newname$[ebp]
	push	edx
	call	_mbstowcs
	add	esp, 12					; 0000000cH

; 112  : 	   newname[strlen(name)]=_T('\0');

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	WORD PTR _newname$[ebp+eax*2], 0

; 113  : 	   if ( ( stream = _tfopen( newname, _T("rb") ) ) == NULL ) {

	push	OFFSET FLAT:??_C@_15JJPIMNBO@?$AAr?$AAb?$AA?$AA@
	lea	eax, DWORD PTR _newname$[ebp]
	push	eax
	call	__wfopen
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], eax
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $L93362

; 114  :           do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 115  :           return( 0 );

	xor	eax, eax
	jmp	$L93342
$L93362:

; 116  :           }
; 117  : 	   charsize = 2;

	mov	DWORD PTR ?charsize@@3HA, 2		; charsize

; 118  : 	   e = fgetc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _e$[ebp], eax

; 119  :       if ( e != '#' && e != '@' ) {

	cmp	DWORD PTR _e$[ebp], 35			; 00000023H
	je	SHORT $L93364
	cmp	DWORD PTR _e$[ebp], 64			; 00000040H
	je	SHORT $L93364
$L93366:

; 120  : 	     while ( e != '#' && e != '@' )

	cmp	DWORD PTR _e$[ebp], 35			; 00000023H
	je	SHORT $L93367
	cmp	DWORD PTR _e$[ebp], 64			; 00000040H
	je	SHORT $L93367

; 121  : 		     e = fgetc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _e$[ebp], eax
	jmp	SHORT $L93366
$L93367:

; 122  : 		 ungetc(e,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8
$L93364:

; 123  : 	    }
; 124  : 	 }
; 125  : 	 else

	jmp	SHORT $L93368
$L93359:

; 126  : #endif
; 127  : 	    ungetc(e,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8
$L93368:

; 128  : 	    ungetc(prch, stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	movsx	ecx, BYTE PTR _prch$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8

; 129  :  }
; 130  :  else

	jmp	SHORT $L93369
$L93355:

; 131  :     ungetc(e,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8
$L93369:

; 132  :  for ( par = _array, i = 0; !feof( stream ); i++, par++ ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _par$[ebp], ecx
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L93370
$L93371:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _par$[ebp]
	add	ecx, 144				; 00000090H
	mov	DWORD PTR _par$[ebp], ecx
$L93370:
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	jne	$L93372

; 133  :      if ( i >= _nAlloc-2 ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 2
	cmp	DWORD PTR _i$[ebp], ecx
	jl	$L93373

; 134  : 	    _nAlloc += 100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 100				; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 135  : 	    t = new CTextBlock [_nAlloc];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T93597[ebp], ecx
	mov	edx, DWORD PTR $T93597[ebp]
	imul	edx, 144				; 00000090H
	add	edx, 4
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T93599[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T93599[ebp], 0
	je	SHORT $L93600
	mov	eax, DWORD PTR $T93599[ebp]
	mov	ecx, DWORD PTR $T93597[ebp]
	mov	DWORD PTR [eax], ecx
	push	OFFSET FLAT:??1CTextBlock@@QAE@XZ	; CTextBlock::~CTextBlock
	push	OFFSET FLAT:??0CTextBlock@@QAE@XZ	; CTextBlock::CTextBlock
	mov	edx, DWORD PTR $T93597[ebp]
	push	edx
	push	144					; 00000090H
	mov	eax, DWORD PTR $T93599[ebp]
	add	eax, 4
	push	eax
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	ecx, DWORD PTR $T93599[ebp]
	add	ecx, 4
	mov	DWORD PTR tv179[ebp], ecx
	jmp	SHORT $L93601
$L93600:
	mov	DWORD PTR tv179[ebp], 0
$L93601:
	mov	edx, DWORD PTR tv179[ebp]
	mov	DWORD PTR $T93598[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T93598[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 136  : 	    if ( t == NULL ) {

	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $L93381

; 137  : 	       setupBuf(0);

	push	0
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 138  : 	       return( 0 );

	xor	eax, eax
	jmp	$L93342
$L93381:

; 139  : 			}
; 140  : 	    memset( t, 0, sizeof(CTextBlock) * _nAlloc);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	ecx, 144				; 00000090H
	push	ecx
	push	0
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 141  : 	    memcpy( t, _array, sizeof(CTextBlock) * i);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 144				; 00000090H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 142  : 	    delete _array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T93603[ebp], ecx
	mov	edx, DWORD PTR $T93603[ebp]
	mov	DWORD PTR $T93602[ebp], edx
	cmp	DWORD PTR $T93602[ebp], 0
	je	SHORT $L93604
	push	1
	mov	ecx, DWORD PTR $T93602[ebp]
	call	??_GCTextBlock@@QAEPAXI@Z
	mov	DWORD PTR tv196[ebp], eax
	jmp	SHORT $L93605
$L93604:
	mov	DWORD PTR tv196[ebp], 0
$L93605:

; 143  : 	    _array = t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+20], ecx
$L93373:

; 144  : 		}
; 145  : 	 if ( !help ) {

	cmp	DWORD PTR _help$[ebp], 0
	jne	$L93386

; 146  :      switch ( _type ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv199[ebp], ecx
	cmp	DWORD PTR tv199[ebp], 1
	je	SHORT $L93391
	cmp	DWORD PTR tv199[ebp], 2
	je	SHORT $L93393
	cmp	DWORD PTR tv199[ebp], 3
	je	SHORT $L93395
	jmp	SHORT $L93386
$L93391:

; 147  : 		case 1 :
; 148  : 			 if ( par->ReadHeader( stream, &prev, prid ) ) {

	lea	eax, DWORD PTR _prid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _par$[ebp]
	call	?ReadHeader@CTextBlock@@QAEHPAU_iobuf@@PAHPAD@Z ; CTextBlock::ReadHeader
	test	eax, eax
	je	SHORT $L93392

; 149  : 				do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 150  : 				break;

	jmp	SHORT $L93386
$L93392:

; 151  : 				}
; 152  : 			break;

	jmp	SHORT $L93386
$L93393:

; 153  : 		case 2 :
; 154  : 			if ( par->ReadHeader2( stream ) ) {

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _par$[ebp]
	call	?ReadHeader2@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::ReadHeader2
	test	eax, eax
	je	SHORT $L93394

; 155  : 				do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 156  : 				break;

	jmp	SHORT $L93386
$L93394:

; 157  : 				}
; 158  : 			break;

	jmp	SHORT $L93386
$L93395:

; 159  : 		case 3 :
; 160  : 			if ( par->ReadHeader3( stream ) ) {

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _par$[ebp]
	call	?ReadHeader3@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::ReadHeader3
	test	eax, eax
	je	SHORT $L93386

; 161  : 				do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4
$L93386:

; 162  : 				break;
; 163  : 				}
; 164  : 			break;
; 165  : 		default :
; 166  : 			break;
; 167  : 		}
; 168  : 	 }
; 169  :      if ( feof( stream ) )

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $L93398

; 170  : 		break;

	jmp	SHORT $L93372
$L93398:

; 171  : #ifndef _UNICODE 
; 172  :      if ( par->ReadText( stream, help ) ) {
; 173  : 		do_error( name );
; 174  : 		break;
; 175  : 		}
; 176  : #else
; 177  : 	 if ( charsize == 1 ) {

	cmp	DWORD PTR ?charsize@@3HA, 1		; charsize
	jne	SHORT $L93399

; 178  : 		if ( par->ReadTextMbs( stream, help ) ) {

	mov	eax, DWORD PTR _help$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _par$[ebp]
	call	?ReadTextMbs@CTextBlock@@QAEHPAU_iobuf@@H@Z ; CTextBlock::ReadTextMbs
	test	eax, eax
	je	SHORT $L93400

; 179  : 		  do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 180  : 	 	  break;

	jmp	SHORT $L93372
$L93400:

; 181  : 		  }
; 182  : 	 }
; 183  : 	 else {

	jmp	SHORT $L93401
$L93399:

; 184  : 		if ( par->ReadText( stream, help ) ) {

	mov	eax, DWORD PTR _help$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _par$[ebp]
	call	?ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z ; CTextBlock::ReadText
	test	eax, eax
	je	SHORT $L93401

; 185  : 		  do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 186  : 		  break;

	jmp	SHORT $L93372
$L93401:

; 187  : 		  }
; 188  : 	 }
; 189  : #endif
; 190  :      if ( feof( stream ) )

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $L93403

; 191  : 		break;

	jmp	SHORT $L93372
$L93403:

; 192  :      }

	jmp	$L93371
$L93372:

; 193  :  _bDirty = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 194  :  _nElements = i+1;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 195  :  fclose( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 196  :  setupBuf(0);

	push	0
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 197  :  return( 1 );

	mov	eax, 1
$L93342:

; 198  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93616
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 896				; 00000380H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93616:
	DD	3
	DD	$L93615
$L93615:
	DD	-96					; ffffffa0H
	DD	4
	DD	$L93610
	DD	-416					; fffffe60H
	DD	300					; 0000012cH
	DD	$L93611
	DD	-636					; fffffd84H
	DD	200					; 000000c8H
	DD	$L93612
$L93612:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$L93611:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$L93610:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CTextBlockAry@@QAEHPADH@Z$0:
	mov	eax, DWORD PTR $T93599[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?Load@CTextBlockAry@@QAEHPADH@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?Load@CTextBlockAry@@QAEHPADH@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?Load@CTextBlockAry@@QAEHPADH@Z ENDP			; CTextBlockAry::Load
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExW@4:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -296				; size = 4
_ver$ = -284						; size = 276
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-492]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

	mov	DWORD PTR _ver$[ebp], 276		; 00000114H

; 139  : 	::GetVersionEx( &ver );

	mov	esi, esp
	lea	eax, DWORD PTR _ver$[ebp]
	push	eax
	call	DWORD PTR __imp__GetVersionExW@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

	cmp	DWORD PTR _ver$[ebp+16], 2
	jne	SHORT $L24087
	cmp	DWORD PTR _ver$[ebp+4], 5
	jb	SHORT $L24087

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

	jmp	SHORT $L24088
$L24087:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24088:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

	mov	eax, DWORD PTR _pfnGetThreadACP$[ebp]
	push	eax
	push	OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	call	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

	mov	esi, esp
	call	DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	cmp	esi, esp
	call	__RTC_CheckEsp

; 152  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93626
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 492				; 000001ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93626:
	DD	1
	DD	$L93625
$L93625:
	DD	-284					; fffffee4H
	DD	276					; 00000114H
	DD	$L93623
$L93623:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

	mov	esi, esp
	mov	eax, DWORD PTR _pNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	call	DWORD PTR __imp__InterlockedExchange@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24075 = -52					; size = 4
_szACP$ = -40						; size = 7
_lcidThread$ = -24					; size = 4
_nACP$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

	mov	DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

	mov	esi, esp
	call	DWORD PTR __imp__GetThreadLocale@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

	mov	esi, esp
	push	7
	lea	eax, DWORD PTR _szACP$[ebp]
	push	eax
	push	4100					; 00001004H
	mov	ecx, DWORD PTR _lcidThread$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $L24074

; 111  : 	{
; 112  : 		char* pch = szACP;

	lea	eax, DWORD PTR _szACP$[ebp]
	mov	DWORD PTR _pch$24075[ebp], eax
$L24077:

; 113  : 		while (*pch != '\0')

	mov	eax, DWORD PTR _pch$24075[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L24074

; 114  : 		{
; 115  : 			nACP *= 10;

	mov	eax, DWORD PTR _nACP$[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _nACP$[ebp], eax

; 116  : 			nACP += *pch++ - '0';

	mov	eax, DWORD PTR _pch$24075[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _nACP$[ebp]
	lea	eax, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _nACP$[ebp], eax
	mov	ecx, DWORD PTR _pch$24075[ebp]
	add	ecx, 1
	mov	DWORD PTR _pch$24075[ebp], ecx

; 117  : 		}

	jmp	SHORT $L24077
$L24074:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

	cmp	DWORD PTR _nACP$[ebp], 0
	jne	SHORT $L24079

; 121  : 		nACP = ::GetACP();

	mov	esi, esp
	call	DWORD PTR __imp__GetACP@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nACP$[ebp], eax
$L24079:

; 122  : 
; 123  : 	return nACP;

	mov	eax, DWORD PTR _nACP$[ebp]

; 124  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93635
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93635:
	DD	1
	DD	$L93634
$L93634:
	DD	-40					; ffffffd8H
	DD	7
	DD	$L93632
$L93632:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	65					; 00000041H
	DB	67					; 00000043H
	DB	80					; 00000050H
	DB	0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 128  : 	return( CP_THREAD_ACP );

	mov	eax, 3

; 129  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_GCTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCTextBlock@@QAEPAXI@Z PROC NEAR			; CTextBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93407
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93407:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTextBlock@@QAEPAXI@Z ENDP				; CTextBlock::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
PUBLIC	?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 796  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>

; 797  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 962  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 963  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ	; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
PUBLIC	??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@	; `string'
PUBLIC	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
EXTRN	__CrtDbgReport:NEAR
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
CONST	SEGMENT
??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@ DB 'pStringMgr != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT
??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio .net 2003\vc7\atlmfc\include\at'
	DB	'lsimpstr.h', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 210  : 	explicit CSimpleStringT( IAtlStringMgr* pStringMgr ) throw()

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 	{
; 212  : 		ATLASSERT( pStringMgr != NULL );

	cmp	DWORD PTR _pStringMgr$[ebp], 0
	jne	SHORT $L93646
	push	OFFSET FLAT:??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
	push	0
	push	212					; 000000d4H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93646
	int	3
$L93646:

; 213  : 		CStringData* pData = pStringMgr->GetNilString();

	mov	eax, DWORD PTR _pStringMgr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [edx+12]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pData$[ebp], eax

; 214  : 		Attach( pData );

	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach

; 215  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
PUBLIC	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 262  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 		CStringData* pData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pData$[ebp], eax

; 264  : 		pData->Release();

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 265  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
_TEXT	ENDS
PUBLIC	??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@	; `string'
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@ DB 'nRefs != 0', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		ATLASSERT( nRefs != 0 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $L93651
	push	OFFSET FLAT:??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
	push	0
	push	93					; 0000005dH
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93651
	int	3
$L93651:

; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	test	ecx, ecx
	jg	SHORT $L26116

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	call	DWORD PTR [edx+4]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L26116:

; 98   : 		}
; 99   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetData, COMDAT
; _this$ = ecx

; 730  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 16					; 00000010H

; 732  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<unsigned short,0>::GetData
_TEXT	ENDS
EXTRN	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ:NEAR ; AfxGetStringManager
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afxstr.h
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ PROC NEAR ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager, COMDAT

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 50   : 		return( AfxGetStringManager() );

	call	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager

; 51   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ENDP ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Attach, COMDAT
; _this$ = ecx

; 711  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 713  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::Attach
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (this+1);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
END
