; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\RTFFuncs.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1KM@HBLGLEDA@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?2?$AAa?$AAn?$AAs?$AAi?$AAc?$AAp?$AAg?$AA1@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1MO@GCDCLODH@?$AA?$HL?$AA?2?$AAf?$AA1?$AA?2?$AAf?$AAr?$AAo?$AAm?$AAa?$AAn?$AA?2?$AAf?$AAp?$AAr?$AAq?$AA2?$AA?2?$AAf?$AAc@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1LE@CAPPPLAE@?$AA?2?$AAr?$AAe?$AAd?$AA0?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA2?$AA5?$AA5?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA0@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_19IMHNLALN@?$AAT?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_19NCJFHIOD@?$AAT?$AAA?$AAB?$AAS?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BA@DNKPGKDB@?$AAD?$AAE?$AAF?$AAT?$AAA?$AAB?$AAS?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BA@LGBCABEP@?$AAD?$AAe?$AAf?$AAT?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BA@PJEPACJP@?$AAD?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@GOJCFFEC@iStart?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DC@KJIHKHDE@?$CInCount?5?$DN?$DN?50?$CJ?5?$HM?$HM?5?$CI?$CIiFirst?$CLnCount@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@GIMJKKKN@AtlIsValidString?$CI?5psz?5?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1RTFFuncs@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GRTFFuncs@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditStreamInCallback@@YGKKPAEJPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditStreamOutCallback@@YGKKPAEJPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NewRTF@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoBold@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoItalic@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoUnBold@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoUnItalic@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoHeading@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoUnHeading@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@G$0A@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mid@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LockBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetManager@?$CSimpleStringT@G$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Concatenate@?$CSimpleStringT@G$0A@@ATL@@KAXAAV12@PBGH1H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringCompare@?$ChTraitsCRT@G@ATL@@SAHPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlIsValidString@ATL@@YAHPBGI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckImplicitLoad@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1FC@BMOLDHIO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAi?$AAm?$AAp?$AAl?$AAi?$AAc?$AAi?$AAt?$AA?5?$AAL?$AAo@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@GJOHDDKG@nRefs?5?$DM?$DN?51?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindChar@?$ChTraitsCRT@G@ATL@@SAPBGPBGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FB@BCKJDECD@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??NewRTF@RTFFuncs@@QAEXH@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??EditStreamOutCallback@@YGKKPAEJPAJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7RTFFuncs@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
_DATA	SEGMENT
_THIS_FILE DB	'c:\astrow32dev\tbt32\rtffuncs.cpp', 00H
_DATA	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	?EditStreamInCallback@@YGKKPAEJPAJ@Z		; EditStreamInCallback
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_strlen:NEAR
;	COMDAT rtc$IMZ
; File c:\astrow32dev\tbt32\rtffuncs.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCcsu /ZI
rtc$TMZ	ENDS
;	COMDAT ?EditStreamInCallback@@YGKKPAEJPAJ@Z
_TEXT	SEGMENT
_len$ = -20						; size = 4
_pData$ = -8						; size = 4
_dwCookie$ = 8						; size = 4
_pbBuff$ = 12						; size = 4
_cb$ = 16						; size = 4
_pcb$ = 20						; size = 4
?EditStreamInCallback@@YGKKPAEJPAJ@Z PROC NEAR		; EditStreamInCallback, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 38   :  StreamData *pData= (StreamData *)dwCookie;

	mov	eax, DWORD PTR _dwCookie$[ebp]
	mov	DWORD PTR _pData$[ebp], eax

; 39   :  LONG len;
; 40   :  len=strlen(pData->buffer+pData->offset);

	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR [edx+4]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 41   :  if ( len > cb )

	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _cb$[ebp]
	jle	SHORT $L93021

; 42   :     len = cb;

	mov	eax, DWORD PTR _cb$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$L93021:

; 43   :  memcpy(pbBuff,pData->buffer+pData->offset,(size_t)len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pData$[ebp]
	add	edx, DWORD PTR [eax+4]
	push	edx
	mov	ecx, DWORD PTR _pbBuff$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 44   :  *pcb=len;

	mov	eax, DWORD PTR _pcb$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], ecx

; 45   :  pData->offset+=len;

	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 46   :  return( 0 );

	xor	eax, eax

; 47   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?EditStreamInCallback@@YGKKPAEJPAJ@Z ENDP		; EditStreamInCallback
_TEXT	ENDS
PUBLIC	?EditStreamOutCallback@@YGKKPAEJPAJ@Z		; EditStreamOutCallback
PUBLIC	?__LINE__Var@?1??EditStreamOutCallback@@YGKKPAEJPAJ@Z@4JA ; `EditStreamOutCallback'::`2'::__LINE__Var
PUBLIC	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
EXTRN	??_U@YAPAXIPBDH@Z:NEAR				; operator new[]
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ?__LINE__Var@?1??EditStreamOutCallback@@YGKKPAEJPAJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??EditStreamOutCallback@@YGKKPAEJPAJ@Z@4JA DD 037H ; `EditStreamOutCallback'::`2'::__LINE__Var
; Function compile flags: /Odt /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?EditStreamOutCallback@@YGKKPAEJPAJ@Z
_TEXT	SEGMENT
$T93472 = -236						; size = 4
$T93473 = -224						; size = 4
_poutbuf$ = -20						; size = 4
_pStr$ = -8						; size = 4
_dwCookie$ = 8						; size = 4
_pbBuff$ = 12						; size = 4
_cb$ = 16						; size = 4
_pcb$ = 20						; size = 4
?EditStreamOutCallback@@YGKKPAEJPAJ@Z PROC NEAR		; EditStreamOutCallback, COMDAT

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 56   :  CString *pStr= (CString *)dwCookie;

	mov	eax, DWORD PTR _dwCookie$[ebp]
	mov	DWORD PTR _pStr$[ebp], eax

; 57   :  char *poutbuf = new char[cb+1];

	mov	eax, DWORD PTR ?__LINE__Var@?1??EditStreamOutCallback@@YGKKPAEJPAJ@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET FLAT:_THIS_FILE
	mov	ecx, DWORD PTR _cb$[ebp]
	add	ecx, 1
	push	ecx
	call	??_U@YAPAXIPBDH@Z			; operator new[]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T93472[ebp], eax
	mov	edx, DWORD PTR $T93472[ebp]
	mov	DWORD PTR _poutbuf$[ebp], edx

; 58   :  memcpy(poutbuf,pbBuff,(size_t)cb);

	mov	eax, DWORD PTR _cb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbBuff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _poutbuf$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 59   :  *pcb=cb;

	mov	eax, DWORD PTR _pcb$[ebp]
	mov	ecx, DWORD PTR _cb$[ebp]
	mov	DWORD PTR [eax], ecx

; 60   :  poutbuf[(size_t)cb]='\0';

	mov	eax, DWORD PTR _poutbuf$[ebp]
	add	eax, DWORD PTR _cb$[ebp]
	mov	BYTE PTR [eax], 0

; 61   :  (*pStr) += poutbuf;

	mov	eax, DWORD PTR _poutbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStr$[ebp]
	call	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=

; 62   :  delete poutbuf;

	mov	eax, DWORD PTR _poutbuf$[ebp]
	mov	DWORD PTR $T93473[ebp], eax
	mov	ecx, DWORD PTR $T93473[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 63   :  return( 0 );

	xor	eax, eax

; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?EditStreamOutCallback@@YGKKPAEJPAJ@Z ENDP		; EditStreamOutCallback
_TEXT	ENDS
PUBLIC	??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z ; ATL::operator+
PUBLIC	??_G?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEPAXI@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::`scalar deleting destructor'
PUBLIC	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z	; RTFFuncs::GetCtrl
PUBLIC	?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z ; RTFFuncs::GetRTF
PUBLIC	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ	; ATL::CSimpleStringT<unsigned short,0>::GetLength
PUBLIC	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
PUBLIC	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
PUBLIC	?__LINE__Var@?1??GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z@4JA ; `RTFFuncs::GetRTF'::`2'::__LINE__Var
PUBLIC	??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@	; `string'
PUBLIC	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
PUBLIC	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
PUBLIC	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@G$0A@@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
EXTRN	??2@YAPAXIPBDH@Z:NEAR				; operator new
EXTRN	__except_list:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	___CxxFrameHandler:NEAR
EXTRN	?ToReplacements@CStrTransform@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV23@@Z:NEAR ; CStrTransform::ToReplacements
EXTRN	?pTransformers@@3PAVCStrTransform@@A:DWORD	; pTransformers
EXTRN	?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z:NEAR ; RTFToAst
EXTRN	?StreamOut@CRichEditCtrl@@QAEJHAAU_editstream@@@Z:NEAR ; CRichEditCtrl::StreamOut
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z$2
__ehfuncinfo$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z DD 019930520H
	DD	03H
	DD	FLAT:__unwindtable$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ?__LINE__Var@?1??GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z@4JA DD 045H ; `RTFFuncs::GetRTF'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@ DB 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z
_TEXT	SEGMENT
tv153 = -352						; size = 4
tv94 = -348						; size = 4
tv87 = -348						; size = 4
tv72 = -348						; size = 4
$T93476 = -340						; size = 4
$T93479 = -328						; size = 4
$T93480 = -316						; size = 4
$T93483 = -304						; size = 4
$T93488 = -292						; size = 4
_nstr$ = -88						; size = 4
_strOut$ = -76						; size = 4
_pctrl$ = -64						; size = 4
_pStr$ = -52						; size = 4
_estr$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_id$ = 12						; size = 4
?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z PROC NEAR ; RTFFuncs::GetRTF, COMDAT
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93488[ebp], 0

; 70   : EDITSTREAM estr; 
; 71   : CString *pStr = new CString();

	mov	eax, DWORD PTR ?__LINE__Var@?1??GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET FLAT:_THIS_FILE
	push	4
	call	??2@YAPAXIPBDH@Z			; operator new
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T93476[ebp], eax
	cmp	DWORD PTR $T93476[ebp], 0
	je	SHORT $L93477
	mov	ecx, DWORD PTR $T93476[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $L93478
$L93477:
	mov	DWORD PTR tv72[ebp], 0
$L93478:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _pStr$[ebp], ecx

; 72   : estr.dwCookie= (DWORD) pStr;

	mov	eax, DWORD PTR _pStr$[ebp]
	mov	DWORD PTR _estr$[ebp], eax

; 73   : estr.pfnCallback = EditStreamOutCallback;

	mov	DWORD PTR _estr$[ebp+8], OFFSET FLAT:?EditStreamOutCallback@@YGKKPAEJPAJ@Z ; EditStreamOutCallback

; 74   : CRichEditCtrl *pctrl=GetCtrl(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ; RTFFuncs::GetCtrl
	mov	DWORD PTR _pctrl$[ebp], eax

; 75   : pctrl->StreamOut(SF_RTF,estr);

	lea	eax, DWORD PTR _estr$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pctrl$[ebp]
	call	?StreamOut@CRichEditCtrl@@QAEJHAAU_editstream@@@Z ; CRichEditCtrl::StreamOut

; 76   : CString strOut=RTFToAst(*pStr);

	mov	eax, DWORD PTR _pStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strOut$[ebp]
	push	ecx
	call	?RTFToAst@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z ; RTFToAst
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 77   : delete pStr;

	mov	eax, DWORD PTR _pStr$[ebp]
	mov	DWORD PTR $T93480[ebp], eax
	mov	ecx, DWORD PTR $T93480[ebp]
	mov	DWORD PTR $T93479[ebp], ecx
	cmp	DWORD PTR $T93479[ebp], 0
	je	SHORT $L93481
	push	1
	mov	ecx, DWORD PTR $T93479[ebp]
	call	??_G?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEPAXI@Z
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $L93482
$L93481:
	mov	DWORD PTR tv87[ebp], 0
$L93482:

; 78   : pTransformers->ToReplacements(strOut);

	lea	eax, DWORD PTR _strOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pTransformers@@3PAVCStrTransform@@A ; pTransformers
	call	?ToReplacements@CStrTransform@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV23@@Z ; CStrTransform::ToReplacements

; 79   : BasicString = strOut;

	lea	eax, DWORD PTR _strOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=

; 80   : CString nstr;

	lea	ecx, DWORD PTR _nstr$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 81   :  if ( tabstring.GetLength() > 0 ) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	test	eax, eax
	jle	SHORT $L93055

; 82   : 	 nstr= tabstring+_T("\r\n");

	push	OFFSET FLAT:??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR $T93483[ebp]
	push	ecx
	call	??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z ; ATL::operator+
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv94[ebp], eax
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR tv153[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv153[ebp]
	push	eax
	lea	ecx, DWORD PTR _nstr$[ebp]
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T93483[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >

; 83   : 	 nstr += strOut;

	lea	eax, DWORD PTR _strOut$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nstr$[ebp]
	call	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@G$0A@@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=

; 84   :     }
; 85   :  else

	jmp	SHORT $L93061
$L93055:

; 86   :     nstr = strOut;

	lea	eax, DWORD PTR _strOut$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nstr$[ebp]
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
$L93061:

; 87   : return( nstr );

	lea	eax, DWORD PTR _nstr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	ecx, DWORD PTR $T93488[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93488[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nstr$[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOut$[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 88   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93500
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93500:
	DD	3
	DD	$L93499
$L93499:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$L93494
	DD	-76					; ffffffb4H
	DD	4
	DD	$L93495
	DD	-88					; ffffffa8H
	DD	4
	DD	$L93496
$L93496:
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$L93495:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$L93494:
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z$0:
	lea	ecx, DWORD PTR _strOut$[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__unwindfunclet$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z$1:
	lea	ecx, DWORD PTR _nstr$[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__unwindfunclet$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z$2:
	lea	ecx, DWORD PTR $T93483[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__ehhandler$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?GetRTF@RTFFuncs@@QAE?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@H@Z ENDP ; RTFFuncs::GetRTF
EXTRN	?GetDlgItem@CWnd@@QBEPAV1@H@Z:NEAR		; CWnd::GetDlgItem
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\rtffuncs.h
;	COMDAT ?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_id$ = 8						; size = 4
?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z PROC NEAR	; RTFFuncs::GetCtrl, COMDAT
; _this$ = ecx

; 16   :    CRichEditCtrl *GetCtrl(int id) { return ((CRichEditCtrl *)pDialog->GetDlgItem(id));}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?GetDlgItem@CWnd@@QBEPAV1@H@Z		; CWnd::GetDlgItem
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ENDP	; RTFFuncs::GetCtrl
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_G?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEPAXI@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93065
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93065:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEPAXI@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z ; RTFFuncs::SetRTF
PUBLIC	?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z ; RTFFuncs::splitTabs
PUBLIC	?LockBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGXZ ; ATL::CSimpleStringT<unsigned short,0>::LockBuffer
PUBLIC	?__LINE__Var@?1??SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z@4JA ; `RTFFuncs::SetRTF'::`2'::__LINE__Var
EXTRN	?SetModify@CRichEditCtrl@@QAEXH@Z:NEAR		; CRichEditCtrl::SetModify
EXTRN	_memset:NEAR
EXTRN	?ToSymbols@CStrTransform@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV23@@Z:NEAR ; CStrTransform::ToSymbols
EXTRN	?AstToRTF@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z:NEAR ; AstToRTF
EXTRN	?StreamIn@CRichEditCtrl@@QAEJHAAU_editstream@@@Z:NEAR ; CRichEditCtrl::StreamIn
EXTRN	_wcstombs:NEAR
;	COMDAT xdata$x
; File c:\astrow32dev\tbt32\rtffuncs.cpp
xdata$x	SEGMENT
__unwindtable$?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$0
__ehfuncinfo$?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ?__LINE__Var@?1??SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z@4JA DD 05bH ; `RTFFuncs::SetRTF'::`2'::__LINE__Var
; Function compile flags: /Odt /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
$T93512 = -312						; size = 4
$T93513 = -300						; size = 4
_pctrl$ = -96						; size = 4
_data$ = -84						; size = 12
_estr$ = -64						; size = 12
_strRtf$ = -44						; size = 4
_buf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_str$ = 12						; size = 4
?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z PROC NEAR ; RTFFuncs::SetRTF, COMDAT
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   :  char *buf;
; 93   :  splitTabs(str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z ; RTFFuncs::splitTabs

; 94   :  pTransformers->ToSymbols(str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pTransformers@@3PAVCStrTransform@@A ; pTransformers
	call	?ToSymbols@CStrTransform@@QAEAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV23@@Z ; CStrTransform::ToSymbols

; 95   :  CString strRtf = AstToRTF(str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strRtf$[ebp]
	push	ecx
	call	?AstToRTF@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAV12@@Z ; AstToRTF
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 96   :  EDITSTREAM estr;
; 97   :  StreamData data; 
; 98   :  data.len=strRtf.GetLength();

	lea	ecx, DWORD PTR _strRtf$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	DWORD PTR _data$[ebp+8], eax

; 99   : 
; 100  : #ifdef _UNICODE
; 101  :  buf = new char[data.len+10];

	mov	eax, DWORD PTR ?__LINE__Var@?1??SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z@4JA
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET FLAT:_THIS_FILE
	mov	ecx, DWORD PTR _data$[ebp+8]
	add	ecx, 10					; 0000000aH
	push	ecx
	call	??_U@YAPAXIPBDH@Z			; operator new[]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T93512[ebp], eax
	mov	edx, DWORD PTR $T93512[ebp]
	mov	DWORD PTR _buf$[ebp], edx

; 102  :  memset(buf,0,data.len+10);

	mov	eax, DWORD PTR _data$[ebp+8]
	add	eax, 10					; 0000000aH
	push	eax
	push	0
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 103  :  wcstombs(buf,strRtf.LockBuffer(),data.len);

	mov	eax, DWORD PTR _data$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _strRtf$[ebp]
	call	?LockBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGXZ ; ATL::CSimpleStringT<unsigned short,0>::LockBuffer
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_wcstombs
	add	esp, 12					; 0000000cH

; 104  :  data.buffer = buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _data$[ebp], eax

; 105  : #else
; 106  :   data.buffer=strRtf.LockBuffer();
; 107  : #endif
; 108  :  data.offset=0;

	mov	DWORD PTR _data$[ebp+4], 0

; 109  :  estr.dwCookie= (DWORD) &data;

	lea	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _estr$[ebp], eax

; 110  :  estr.pfnCallback = EditStreamInCallback;

	mov	DWORD PTR _estr$[ebp+8], OFFSET FLAT:?EditStreamInCallback@@YGKKPAEJPAJ@Z ; EditStreamInCallback

; 111  :  CRichEditCtrl *pctrl = GetCtrl(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ; RTFFuncs::GetCtrl
	mov	DWORD PTR _pctrl$[ebp], eax

; 112  :  pctrl->StreamIn(SF_RTF,estr);

	lea	eax, DWORD PTR _estr$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pctrl$[ebp]
	call	?StreamIn@CRichEditCtrl@@QAEJHAAU_editstream@@@Z ; CRichEditCtrl::StreamIn

; 113  :  pctrl->SetModify(FALSE);

	push	0
	mov	ecx, DWORD PTR _pctrl$[ebp]
	call	?SetModify@CRichEditCtrl@@QAEXH@Z	; CRichEditCtrl::SetModify

; 114  : #ifdef _UNICODE
; 115  :  delete buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR $T93513[ebp], eax
	mov	ecx, DWORD PTR $T93513[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 116  : #else
; 117  :  strRtf.ReleaseBuffer();
; 118  : #endif
; 119  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strRtf$[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93522
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93522:
	DD	3
	DD	$L93521
$L93521:
	DD	-44					; ffffffd4H
	DD	4
	DD	$L93517
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$L93518
	DD	-84					; ffffffacH
	DD	12					; 0000000cH
	DD	$L93519
$L93519:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$L93518:
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$L93517:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	82					; 00000052H
	DB	116					; 00000074H
	DB	102					; 00000066H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$0:
	lea	ecx, DWORD PTR _strRtf$[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__ehhandler$?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?SetRTF@RTFFuncs@@QAEXHAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z ENDP ; RTFFuncs::SetRTF
PUBLIC	?NewRTF@RTFFuncs@@QAEXH@Z			; RTFFuncs::NewRTF
PUBLIC	?DoUnHeading@RTFFuncs@@QAEXH@Z			; RTFFuncs::DoUnHeading
PUBLIC	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
PUBLIC	??_C@_1KM@HBLGLEDA@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?2?$AAa?$AAn?$AAs?$AAi?$AAc?$AAp?$AAg?$AA1@ ; `string'
PUBLIC	??_C@_1MO@GCDCLODH@?$AA?$HL?$AA?2?$AAf?$AA1?$AA?2?$AAf?$AAr?$AAo?$AAm?$AAa?$AAn?$AA?2?$AAf?$AAp?$AAr?$AAq?$AA2?$AA?2?$AAf?$AAc@ ; `string'
PUBLIC	??_C@_1LE@CAPPPLAE@?$AA?2?$AAr?$AAe?$AAd?$AA0?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA2?$AA5?$AA5?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?1??NewRTF@RTFFuncs@@QAEXH@Z@4JA	; `RTFFuncs::NewRTF'::`2'::__LINE__Var
PUBLIC	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewRTF@RTFFuncs@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewRTF@RTFFuncs@@QAEXH@Z$0
__ehfuncinfo$?NewRTF@RTFFuncs@@QAEXH@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?NewRTF@RTFFuncs@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_1KM@HBLGLEDA@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?2?$AAa?$AAn?$AAs?$AAi?$AAc?$AAp?$AAg?$AA1@
CONST	SEGMENT
??_C@_1KM@HBLGLEDA@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?2?$AAa?$AAn?$AAs?$AAi?$AAc?$AAp?$AAg?$AA1@ DB '{'
	DB	00H, '\', 00H, 'r', 00H, 't', 00H, 'f', 00H, '1', 00H, '\', 00H
	DB	'a', 00H, 'n', 00H, 's', 00H, 'i', 00H, '\', 00H, 'a', 00H, 'n'
	DB	00H, 's', 00H, 'i', 00H, 'c', 00H, 'p', 00H, 'g', 00H, '1', 00H
	DB	'2', 00H, '5', 00H, '2', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'f'
	DB	00H, 'f', 00H, '0', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'l', 00H, 'a', 00H, 'n', 00H, 'g', 00H, '1', 00H, '0', 00H, '3'
	DB	00H, '3', 00H, '{', 00H, '\', 00H, 'f', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 't', 00H, 'b', 00H, 'l', 00H, '{', 00H, '\', 00H, 'f'
	DB	00H, '0', 00H, '\', 00H, 'f', 00H, 's', 00H, 'w', 00H, 'i', 00H
	DB	's', 00H, 's', 00H, '\', 00H, 'f', 00H, 'p', 00H, 'r', 00H, 'q'
	DB	00H, '2', 00H, '\', 00H, 'f', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, 's', 00H, 'e', 00H, 't', 00H, '0', 00H, ' ', 00H, 'A'
	DB	00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H, ';', 00H, '}', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@GCDCLODH@?$AA?$HL?$AA?2?$AAf?$AA1?$AA?2?$AAf?$AAr?$AAo?$AAm?$AAa?$AAn?$AA?2?$AAf?$AAp?$AAr?$AAq?$AA2?$AA?2?$AAf?$AAc@
CONST	SEGMENT
??_C@_1MO@GCDCLODH@?$AA?$HL?$AA?2?$AAf?$AA1?$AA?2?$AAf?$AAr?$AAo?$AAm?$AAa?$AAn?$AA?2?$AAf?$AAp?$AAr?$AAq?$AA2?$AA?2?$AAf?$AAc@ DB '{'
	DB	00H, '\', 00H, 'f', 00H, '1', 00H, '\', 00H, 'f', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'n', 00H, '\', 00H, 'f', 00H, 'p'
	DB	00H, 'r', 00H, 'q', 00H, '2', 00H, '\', 00H, 'f', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, 's', 00H, 'e', 00H, 't', 00H, '0'
	DB	00H, ' ', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, 'N', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'R', 00H, 'o'
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, ';', 00H, '}', 00H, '}', 00H
	DB	0dH, 00H, 0aH, 00H, '{', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'l'
	DB	00H, 'o', 00H, 'r', 00H, 't', 00H, 'b', 00H, 'l', 00H, ' ', 00H
	DB	';', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '0', 00H, '\'
	DB	00H, 'g', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, '0', 00H
	DB	'\', 00H, 'b', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '2', 00H, '5'
	DB	00H, '5', 00H, ';', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'd', 00H
	DB	'2', 00H, '5', 00H, '5', 00H, '\', 00H, 'g', 00H, 'r', 00H, 'e'
	DB	00H, 'e', 00H, 'n', 00H, '0', 00H, '\', 00H, 'b', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '0', 00H, ';', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LE@CAPPPLAE@?$AA?2?$AAr?$AAe?$AAd?$AA0?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA2?$AA5?$AA5?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA0@
CONST	SEGMENT
??_C@_1LE@CAPPPLAE@?$AA?2?$AAr?$AAe?$AAd?$AA0?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA2?$AA5?$AA5?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA0@ DB '\'
	DB	00H, 'r', 00H, 'e', 00H, 'd', 00H, '0', 00H, '\', 00H, 'g', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, '2', 00H, '5', 00H, '5'
	DB	00H, '\', 00H, 'b', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '0', 00H
	DB	';', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'd', 00H, '2', 00H, '5'
	DB	00H, '5', 00H, '\', 00H, 'g', 00H, 'r', 00H, 'e', 00H, 'e', 00H
	DB	'n', 00H, '0', 00H, '\', 00H, 'b', 00H, 'l', 00H, 'u', 00H, 'e'
	DB	00H, '2', 00H, '5', 00H, '5', 00H, ';', 00H, '}', 00H, '\', 00H
	DB	'v', 00H, 'i', 00H, 'e', 00H, 'w', 00H, 'k', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, '4', 00H, '\', 00H, 'u', 00H, 'c', 00H, '1', 00H
	DB	'\', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'f'
	DB	00H, '1', 00H, '\', 00H, 'b', 00H, '0', 00H, '\', 00H, 'i', 00H
	DB	'0', 00H, '\', 00H, 'c', 00H, 'f', 00H, '0', 00H, '\', 00H, 'f'
	DB	00H, 's', 00H, '2', 00H, '4', 00H, '\', 00H, 'q', 00H, 'l', 00H
	DB	'\', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??NewRTF@RTFFuncs@@QAEXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??NewRTF@RTFFuncs@@QAEXH@Z@4JA DD 07aH	; `RTFFuncs::NewRTF'::`2'::__LINE__Var
; Function compile flags: /Odt /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?NewRTF@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT
$T93528 = -312						; size = 4
$T93529 = -300						; size = 4
_pctrl$ = -96						; size = 4
_data$ = -84						; size = 12
_estr$ = -64						; size = 12
_strRtf$ = -44						; size = 4
_buf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
?NewRTF@RTFFuncs@@QAEXH@Z PROC NEAR			; RTFFuncs::NewRTF, COMDAT
; _this$ = ecx

; 122  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewRTF@RTFFuncs@@QAEXH@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 123  :  char *buf;
; 124  :  CString strRtf = _T("{\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang1033{\\fonttbl{\\f0\\fswiss\\fprq2\\fcharset0 Arial;}");

	push	OFFSET FLAT:??_C@_1KM@HBLGLEDA@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?2?$AAa?$AAn?$AAs?$AAi?$AAc?$AAp?$AAg?$AA1@
	lea	ecx, DWORD PTR _strRtf$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 125  :  strRtf += _T("{\\f1\\froman\\fprq2\\fcharset0 Times New Roman;}}\r\n{\\colortbl ;\\red0\\green0\\blue255;\\red255\\green0\\blue0;");

	push	OFFSET FLAT:??_C@_1MO@GCDCLODH@?$AA?$HL?$AA?2?$AAf?$AA1?$AA?2?$AAf?$AAr?$AAo?$AAm?$AAa?$AAn?$AA?2?$AAf?$AAp?$AAr?$AAq?$AA2?$AA?2?$AAf?$AAc@
	lea	ecx, DWORD PTR _strRtf$[ebp]
	call	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=

; 126  :  strRtf += _T("\\red0\\green255\\blue0;\\red255\\green0\\blue255;}\\viewkind4\\uc1\\pard\\f1\\b0\\i0\\cf0\\fs24\\ql\\par");

	push	OFFSET FLAT:??_C@_1LE@CAPPPLAE@?$AA?2?$AAr?$AAe?$AAd?$AA0?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA2?$AA5?$AA5?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA0@
	lea	ecx, DWORD PTR _strRtf$[ebp]
	call	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=

; 127  :  EDITSTREAM estr;
; 128  :  StreamData data; 
; 129  :  data.len=strRtf.GetLength();

	lea	ecx, DWORD PTR _strRtf$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	DWORD PTR _data$[ebp+8], eax

; 130  :  #ifdef _UNICODE
; 131  :  buf = new char[data.len+10];

	mov	eax, DWORD PTR ?__LINE__Var@?1??NewRTF@RTFFuncs@@QAEXH@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET FLAT:_THIS_FILE
	mov	ecx, DWORD PTR _data$[ebp+8]
	add	ecx, 10					; 0000000aH
	push	ecx
	call	??_U@YAPAXIPBDH@Z			; operator new[]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T93528[ebp], eax
	mov	edx, DWORD PTR $T93528[ebp]
	mov	DWORD PTR _buf$[ebp], edx

; 132  :   memset(buf,0,data.len+10);

	mov	eax, DWORD PTR _data$[ebp+8]
	add	eax, 10					; 0000000aH
	push	eax
	push	0
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 133  :  wcstombs(buf,strRtf.LockBuffer(),data.len);

	mov	eax, DWORD PTR _data$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _strRtf$[ebp]
	call	?LockBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGXZ ; ATL::CSimpleStringT<unsigned short,0>::LockBuffer
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_wcstombs
	add	esp, 12					; 0000000cH

; 134  :  data.buffer = buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _data$[ebp], eax

; 135  : #else
; 136  :   data.buffer=strRtf.LockBuffer();
; 137  : #endif
; 138  :  data.offset=0;

	mov	DWORD PTR _data$[ebp+4], 0

; 139  :  estr.dwCookie= (DWORD) &data;

	lea	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _estr$[ebp], eax

; 140  :  estr.pfnCallback = EditStreamInCallback;

	mov	DWORD PTR _estr$[ebp+8], OFFSET FLAT:?EditStreamInCallback@@YGKKPAEJPAJ@Z ; EditStreamInCallback

; 141  :  CRichEditCtrl *pctrl = GetCtrl(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ; RTFFuncs::GetCtrl
	mov	DWORD PTR _pctrl$[ebp], eax

; 142  :  pctrl->StreamIn(SF_RTF,estr);

	lea	eax, DWORD PTR _estr$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pctrl$[ebp]
	call	?StreamIn@CRichEditCtrl@@QAEJHAAU_editstream@@@Z ; CRichEditCtrl::StreamIn

; 143  :  pctrl->SetModify(FALSE);

	push	0
	mov	ecx, DWORD PTR _pctrl$[ebp]
	call	?SetModify@CRichEditCtrl@@QAEXH@Z	; CRichEditCtrl::SetModify

; 144  :  #ifdef _UNICODE
; 145  :  delete buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR $T93529[ebp], eax
	mov	ecx, DWORD PTR $T93529[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 146  : #else
; 147  :  strRtf.ReleaseBuffer();
; 148  : #endif
; 149  :  DoUnHeading(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoUnHeading@RTFFuncs@@QAEXH@Z		; RTFFuncs::DoUnHeading

; 150  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strRtf$[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93538
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93538:
	DD	3
	DD	$L93537
$L93537:
	DD	-44					; ffffffd4H
	DD	4
	DD	$L93533
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$L93534
	DD	-84					; ffffffacH
	DD	12					; 0000000cH
	DD	$L93535
$L93535:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$L93534:
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$L93533:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	82					; 00000052H
	DB	116					; 00000074H
	DB	102					; 00000066H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewRTF@RTFFuncs@@QAEXH@Z$0:
	lea	ecx, DWORD PTR _strRtf$[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__ehhandler$?NewRTF@RTFFuncs@@QAEXH@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?NewRTF@RTFFuncs@@QAEXH@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?NewRTF@RTFFuncs@@QAEXH@Z ENDP				; RTFFuncs::NewRTF
PUBLIC	?DoBold@RTFFuncs@@QAEXH@Z			; RTFFuncs::DoBold
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	?SetSelectionCharFormat@CRichEditCtrl@@QAEHAAU_charformatw@@@Z:NEAR ; CRichEditCtrl::SetSelectionCharFormat
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?DoBold@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT
_pctr$ = -124						; size = 4
_cf$ = -112						; size = 92
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_id$ = 8						; size = 4
?DoBold@RTFFuncs@@QAEXH@Z PROC NEAR			; RTFFuncs::DoBold, COMDAT
; _this$ = ecx

; 154  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 155  :  CHARFORMAT cf;
; 156  :  cf.dwMask = CFM_BOLD|CFM_COLOR;

	mov	DWORD PTR _cf$[ebp+4], 1073741825	; 40000001H

; 157  :  cf.dwEffects = CFE_BOLD;

	mov	DWORD PTR _cf$[ebp+8], 1

; 158  :  cf.crTextColor = RGB(0xff,0,0);

	mov	DWORD PTR _cf$[ebp+20], 255		; 000000ffH

; 159  :  cf.cbSize = sizeof(CHARFORMAT);

	mov	DWORD PTR _cf$[ebp], 92			; 0000005cH

; 160  :  CRichEditCtrl *pctr=GetCtrl(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ; RTFFuncs::GetCtrl
	mov	DWORD PTR _pctr$[ebp], eax

; 161  :  pctr->SetSelectionCharFormat(cf);

	lea	eax, DWORD PTR _cf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctr$[ebp]
	call	?SetSelectionCharFormat@CRichEditCtrl@@QAEHAAU_charformatw@@@Z ; CRichEditCtrl::SetSelectionCharFormat

; 162  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93549
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93549:
	DD	1
	DD	$L93548
$L93548:
	DD	-112					; ffffff90H
	DD	92					; 0000005cH
	DD	$L93545
$L93545:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	0
?DoBold@RTFFuncs@@QAEXH@Z ENDP				; RTFFuncs::DoBold
_TEXT	ENDS
PUBLIC	?DoItalic@RTFFuncs@@QAEXH@Z			; RTFFuncs::DoItalic
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?DoItalic@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT
_pctr$ = -124						; size = 4
_cf$ = -112						; size = 92
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_id$ = 8						; size = 4
?DoItalic@RTFFuncs@@QAEXH@Z PROC NEAR			; RTFFuncs::DoItalic, COMDAT
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 166  :  CHARFORMAT cf;
; 167  :  cf.dwMask = CFM_ITALIC|CFM_COLOR;

	mov	DWORD PTR _cf$[ebp+4], 1073741826	; 40000002H

; 168  :  cf.crTextColor = RGB(0,0xff,0);

	mov	DWORD PTR _cf$[ebp+20], 65280		; 0000ff00H

; 169  :  cf.dwEffects= CFE_ITALIC;

	mov	DWORD PTR _cf$[ebp+8], 2

; 170  :  CRichEditCtrl *pctr=GetCtrl(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ; RTFFuncs::GetCtrl
	mov	DWORD PTR _pctr$[ebp], eax

; 171  :  cf.cbSize = sizeof(CHARFORMAT);

	mov	DWORD PTR _cf$[ebp], 92			; 0000005cH

; 172  :  pctr->SetSelectionCharFormat(cf);

	lea	eax, DWORD PTR _cf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctr$[ebp]
	call	?SetSelectionCharFormat@CRichEditCtrl@@QAEHAAU_charformatw@@@Z ; CRichEditCtrl::SetSelectionCharFormat

; 173  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93557
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93557:
	DD	1
	DD	$L93556
$L93556:
	DD	-112					; ffffff90H
	DD	92					; 0000005cH
	DD	$L93554
$L93554:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	0
?DoItalic@RTFFuncs@@QAEXH@Z ENDP			; RTFFuncs::DoItalic
_TEXT	ENDS
PUBLIC	?DoUnBold@RTFFuncs@@QAEXH@Z			; RTFFuncs::DoUnBold
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?DoUnBold@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT
_pctr$ = -124						; size = 4
_cf$ = -112						; size = 92
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_id$ = 8						; size = 4
?DoUnBold@RTFFuncs@@QAEXH@Z PROC NEAR			; RTFFuncs::DoUnBold, COMDAT
; _this$ = ecx

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 177  :  CHARFORMAT cf;
; 178  :  cf.dwMask = CFM_BOLD|CFM_COLOR;

	mov	DWORD PTR _cf$[ebp+4], 1073741825	; 40000001H

; 179  :  cf.dwEffects = 0;

	mov	DWORD PTR _cf$[ebp+8], 0

; 180  :  cf.crTextColor = RGB(0xff,0xff,0xff);

	mov	DWORD PTR _cf$[ebp+20], 16777215	; 00ffffffH

; 181  :  cf.cbSize = sizeof(CHARFORMAT);

	mov	DWORD PTR _cf$[ebp], 92			; 0000005cH

; 182  :  CRichEditCtrl *pctr=GetCtrl(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ; RTFFuncs::GetCtrl
	mov	DWORD PTR _pctr$[ebp], eax

; 183  :  pctr->SetSelectionCharFormat(cf);

	lea	eax, DWORD PTR _cf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctr$[ebp]
	call	?SetSelectionCharFormat@CRichEditCtrl@@QAEHAAU_charformatw@@@Z ; CRichEditCtrl::SetSelectionCharFormat

; 184  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93564
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93564:
	DD	1
	DD	$L93563
$L93563:
	DD	-112					; ffffff90H
	DD	92					; 0000005cH
	DD	$L93561
$L93561:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	0
?DoUnBold@RTFFuncs@@QAEXH@Z ENDP			; RTFFuncs::DoUnBold
_TEXT	ENDS
PUBLIC	?DoUnItalic@RTFFuncs@@QAEXH@Z			; RTFFuncs::DoUnItalic
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?DoUnItalic@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT
_pctr$ = -124						; size = 4
_cf$ = -112						; size = 92
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_id$ = 8						; size = 4
?DoUnItalic@RTFFuncs@@QAEXH@Z PROC NEAR			; RTFFuncs::DoUnItalic, COMDAT
; _this$ = ecx

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 188  :  CHARFORMAT cf;
; 189  :  cf.dwMask = CFM_ITALIC|CFM_COLOR;

	mov	DWORD PTR _cf$[ebp+4], 1073741826	; 40000002H

; 190  :  cf.crTextColor = RGB(0xff,0xff,0xff);

	mov	DWORD PTR _cf$[ebp+20], 16777215	; 00ffffffH

; 191  :  cf.dwEffects=0;

	mov	DWORD PTR _cf$[ebp+8], 0

; 192  :  CRichEditCtrl *pctr=GetCtrl(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ; RTFFuncs::GetCtrl
	mov	DWORD PTR _pctr$[ebp], eax

; 193  :  cf.cbSize = sizeof(CHARFORMAT);

	mov	DWORD PTR _cf$[ebp], 92			; 0000005cH

; 194  :  pctr->SetSelectionCharFormat(cf);

	lea	eax, DWORD PTR _cf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctr$[ebp]
	call	?SetSelectionCharFormat@CRichEditCtrl@@QAEHAAU_charformatw@@@Z ; CRichEditCtrl::SetSelectionCharFormat

; 195  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93571
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93571:
	DD	1
	DD	$L93570
$L93570:
	DD	-112					; ffffff90H
	DD	92					; 0000005cH
	DD	$L93568
$L93568:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	0
?DoUnItalic@RTFFuncs@@QAEXH@Z ENDP			; RTFFuncs::DoUnItalic
_TEXT	ENDS
PUBLIC	?DoHeading@RTFFuncs@@QAEXH@Z			; RTFFuncs::DoHeading
PUBLIC	??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@ ; `string'
EXTRN	?SetParaFormat@CRichEditCtrl@@QAEHAAU_paraformat@@@Z:NEAR ; CRichEditCtrl::SetParaFormat
EXTRN	_wcscpy:NEAR
;	COMDAT ??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@ DB 'A', 00H, 'r', 00H
	DB	'i', 00H, 'a', 00H, 'l', 00H, 00H, 00H	; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?DoHeading@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT
_pf$ = -288						; size = 156
_pctr$ = -124						; size = 4
_cf$ = -112						; size = 92
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_id$ = 8						; size = 4
?DoHeading@RTFFuncs@@QAEXH@Z PROC NEAR			; RTFFuncs::DoHeading, COMDAT
; _this$ = ecx

; 199  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 484				; 000001e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-484]
	mov	ecx, 121				; 00000079H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 200  :  CHARFORMAT cf;
; 201  :  cf.dwMask = CFM_BOLD|CFM_COLOR|CFM_FACE|CFM_SIZE;

	mov	DWORD PTR _cf$[ebp+4], -536870911	; e0000001H

; 202  :  cf.dwEffects = CFE_BOLD;

	mov	DWORD PTR _cf$[ebp+8], 1

; 203  :  cf.yHeight = 320;

	mov	DWORD PTR _cf$[ebp+12], 320		; 00000140H

; 204  :  cf.crTextColor = RGB(0,0,0xff);

	mov	DWORD PTR _cf$[ebp+20], 16711680	; 00ff0000H

; 205  :  cf.cbSize = sizeof(CHARFORMAT);

	mov	DWORD PTR _cf$[ebp], 92			; 0000005cH

; 206  :  cf.bPitchAndFamily = FF_SWISS;

	mov	BYTE PTR _cf$[ebp+25], 32		; 00000020H

; 207  :  _tcscpy(cf.szFaceName,_T("Arial"));

	push	OFFSET FLAT:??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
	lea	eax, DWORD PTR _cf$[ebp+26]
	push	eax
	call	_wcscpy
	add	esp, 8

; 208  :  CRichEditCtrl *pctr=GetCtrl(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ; RTFFuncs::GetCtrl
	mov	DWORD PTR _pctr$[ebp], eax

; 209  :  pctr->SetSelectionCharFormat(cf);

	lea	eax, DWORD PTR _cf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctr$[ebp]
	call	?SetSelectionCharFormat@CRichEditCtrl@@QAEHAAU_charformatw@@@Z ; CRichEditCtrl::SetSelectionCharFormat

; 210  :  PARAFORMAT pf;
; 211  :  pf.cbSize=sizeof(PARAFORMAT);

	mov	DWORD PTR _pf$[ebp], 156		; 0000009cH

; 212  :  pf.dwMask=PFM_ALIGNMENT;

	mov	DWORD PTR _pf$[ebp+4], 8

; 213  :  pf.wAlignment=PFA_CENTER;

	mov	WORD PTR _pf$[ebp+24], 3

; 214  :  pctr->SetParaFormat(pf);

	lea	eax, DWORD PTR _pf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctr$[ebp]
	call	?SetParaFormat@CRichEditCtrl@@QAEHAAU_paraformat@@@Z ; CRichEditCtrl::SetParaFormat

; 215  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93579
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 484				; 000001e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93579:
	DD	2
	DD	$L93578
$L93578:
	DD	-112					; ffffff90H
	DD	92					; 0000005cH
	DD	$L93575
	DD	-288					; fffffee0H
	DD	156					; 0000009cH
	DD	$L93576
$L93576:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	0
$L93575:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	0
?DoHeading@RTFFuncs@@QAEXH@Z ENDP			; RTFFuncs::DoHeading
_TEXT	ENDS
PUBLIC	??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@ DB 'T'
	DB	00H, 'i', 00H, 'm', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'N', 00H
	DB	'e', 00H, 'w', 00H, ' ', 00H, 'R', 00H, 'o', 00H, 'm', 00H, 'a'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?DoUnHeading@RTFFuncs@@QAEXH@Z
_TEXT	SEGMENT
_pf$ = -288						; size = 156
_pctr$ = -124						; size = 4
_cf$ = -112						; size = 92
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_id$ = 8						; size = 4
?DoUnHeading@RTFFuncs@@QAEXH@Z PROC NEAR		; RTFFuncs::DoUnHeading, COMDAT
; _this$ = ecx

; 219  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 484				; 000001e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-484]
	mov	ecx, 121				; 00000079H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 220  :  CHARFORMAT cf;
; 221  :  cf.dwMask = CFM_BOLD|CFM_COLOR|CFM_FACE|CFM_SIZE|CFM_ITALIC;

	mov	DWORD PTR _cf$[ebp+4], -536870909	; e0000003H

; 222  :  cf.dwEffects = 0;

	mov	DWORD PTR _cf$[ebp+8], 0

; 223  :  cf.yHeight = 240;

	mov	DWORD PTR _cf$[ebp+12], 240		; 000000f0H

; 224  :  cf.crTextColor = RGB(0,0,0);

	mov	DWORD PTR _cf$[ebp+20], 0

; 225  :  cf.cbSize = sizeof(CHARFORMAT);

	mov	DWORD PTR _cf$[ebp], 92			; 0000005cH

; 226  :  cf.bPitchAndFamily = FF_ROMAN;

	mov	BYTE PTR _cf$[ebp+25], 16		; 00000010H

; 227  :  _tcscpy(cf.szFaceName,_T("Times New Roman"));

	push	OFFSET FLAT:??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@
	lea	eax, DWORD PTR _cf$[ebp+26]
	push	eax
	call	_wcscpy
	add	esp, 8

; 228  :  CRichEditCtrl *pctr=GetCtrl(id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCtrl@RTFFuncs@@AAEPAVCRichEditCtrl@@H@Z ; RTFFuncs::GetCtrl
	mov	DWORD PTR _pctr$[ebp], eax

; 229  :  pctr->SetSelectionCharFormat(cf);

	lea	eax, DWORD PTR _cf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctr$[ebp]
	call	?SetSelectionCharFormat@CRichEditCtrl@@QAEHAAU_charformatw@@@Z ; CRichEditCtrl::SetSelectionCharFormat

; 230  :  PARAFORMAT pf;
; 231  :  pf.cbSize=sizeof(PARAFORMAT);

	mov	DWORD PTR _pf$[ebp], 156		; 0000009cH

; 232  :  pf.dwMask=PFM_ALIGNMENT;

	mov	DWORD PTR _pf$[ebp+4], 8

; 233  :  pf.wAlignment=PFA_LEFT;

	mov	WORD PTR _pf$[ebp+24], 1

; 234  :  pctr->SetParaFormat(pf);

	lea	eax, DWORD PTR _pf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctr$[ebp]
	call	?SetParaFormat@CRichEditCtrl@@QAEHAAU_paraformat@@@Z ; CRichEditCtrl::SetParaFormat

; 235  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93587
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 484				; 000001e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93587:
	DD	2
	DD	$L93586
$L93586:
	DD	-112					; ffffff90H
	DD	92					; 0000005cH
	DD	$L93583
	DD	-288					; fffffee0H
	DD	156					; 0000009cH
	DD	$L93584
$L93584:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	0
$L93583:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	0
?DoUnHeading@RTFFuncs@@QAEXH@Z ENDP			; RTFFuncs::DoUnHeading
_TEXT	ENDS
PUBLIC	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
PUBLIC	??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@	; `string'
PUBLIC	??_C@_19IMHNLALN@?$AAT?$AAa?$AAb?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_19NCJFHIOD@?$AAT?$AAA?$AAB?$AAS?$AA?$AA@	; `string'
PUBLIC	??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1BA@DNKPGKDB@?$AAD?$AAE?$AAF?$AAT?$AAA?$AAB?$AAS?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@LGBCABEP@?$AAD?$AAe?$AAf?$AAT?$AAa?$AAb?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@PJEPACJP@?$AAD?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@ ; `string'
PUBLIC	??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ; ATL::operator==
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
PUBLIC	?Find@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHGH@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Find
PUBLIC	?Mid@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Mid
EXTRN	@_RTC_Check_4_to_1@4:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$9
__ehfuncinfo$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z DD 019930520H
	DD	09H
	DD	FLAT:__unwindtable$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@
CONST	SEGMENT
??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@ DB '^', 00H, '@', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19IMHNLALN@?$AAT?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19IMHNLALN@?$AAT?$AAa?$AAb?$AAs?$AA?$AA@ DB 'T', 00H, 'a', 00H, 'b', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19NCJFHIOD@?$AAT?$AAA?$AAB?$AAS?$AA?$AA@
CONST	SEGMENT
??_C@_19NCJFHIOD@?$AAT?$AAA?$AAB?$AAS?$AA?$AA@ DB 'T', 00H, 'A', 00H, 'B', 00H
	DB	'S', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@ DB 't', 00H, 'a', 00H, 'b', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@DNKPGKDB@?$AAD?$AAE?$AAF?$AAT?$AAA?$AAB?$AAS?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@DNKPGKDB@?$AAD?$AAE?$AAF?$AAT?$AAA?$AAB?$AAS?$AA?$AA@ DB 'D', 00H
	DB	'E', 00H, 'F', 00H, 'T', 00H, 'A', 00H, 'B', 00H, 'S', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@LGBCABEP@?$AAD?$AAe?$AAf?$AAT?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@LGBCABEP@?$AAD?$AAe?$AAf?$AAT?$AAa?$AAb?$AAs?$AA?$AA@ DB 'D', 00H
	DB	'e', 00H, 'f', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@ DB 'd', 00H
	DB	'e', 00H, 'f', 00H, 't', 00H, 'a', 00H, 'b', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@PJEPACJP@?$AAD?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@PJEPACJP@?$AAD?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@ DB 'D', 00H
	DB	'e', 00H, 'f', 00H, 't', 00H, 'a', 00H, 'b', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
tv184 = -436						; size = 4
tv261 = -432						; size = 4
tv256 = -428						; size = 4
tv294 = -424						; size = 4
tv251 = -420						; size = 4
tv292 = -416						; size = 4
tv246 = -412						; size = 4
tv290 = -408						; size = 4
tv241 = -404						; size = 4
tv288 = -400						; size = 4
tv236 = -396						; size = 4
tv286 = -392						; size = 4
tv231 = -388						; size = 4
tv284 = -384						; size = 4
tv281 = -380						; size = 4
tv279 = -380						; size = 4
tv226 = -380						; size = 4
tv297 = -376						; size = 4
tv296 = -376						; size = 4
tv282 = -376						; size = 4
$T93590 = -365						; size = 1
$T93591 = -356						; size = 4
$T93592 = -344						; size = 4
$T93594 = -332						; size = 4
$T93595 = -320						; size = 4
$T93596 = -308						; size = 4
$T93597 = -296						; size = 4
$T93598 = -284						; size = 4
$T93599 = -272						; size = 4
$T93601 = -260						; size = 4
$T93602 = -248						; size = 4
$T93603 = -236						; size = 4
_pos$93205 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z PROC NEAR ; RTFFuncs::splitTabs, COMDAT
; _this$ = ecx

; 238  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93603[ebp], 0

; 239  :  if ( s.Left(2)==_T("^@") || s.Left(4)==_T("Tabs") || s.Left(4) == _T("TABS") ||
; 240  : 	 s.Left(4)==_T("tabs") || s.Left(7)==_T("DEFTABS") || s.Left(7)==_T("DefTabs")||
; 241  : 	 s.Left(7)==_T("deftabs") || s.Left(7)==_T("Deftabs") ) {

	push	2
	lea	eax, DWORD PTR $T93591[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
	mov	DWORD PTR tv282[ebp], eax
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR tv226[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T93603[ebp]
	or	edx, 1
	mov	DWORD PTR $T93603[ebp], edx
	push	OFFSET FLAT:??_C@_15ODKNGPOG@?$AA?$FO?$AA?$EA?$AA?$AA@
	mov	eax, DWORD PTR tv226[ebp]
	push	eax
	call	??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ; ATL::operator==
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	$L93593
	push	4
	lea	edx, DWORD PTR $T93592[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
	mov	DWORD PTR tv284[ebp], eax
	mov	eax, DWORD PTR tv284[ebp]
	mov	DWORD PTR tv231[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T93603[ebp]
	or	ecx, 2
	mov	DWORD PTR $T93603[ebp], ecx
	push	OFFSET FLAT:??_C@_19IMHNLALN@?$AAT?$AAa?$AAb?$AAs?$AA?$AA@
	mov	edx, DWORD PTR tv231[ebp]
	push	edx
	call	??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ; ATL::operator==
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	$L93593
	push	4
	lea	ecx, DWORD PTR $T93594[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
	mov	DWORD PTR tv286[ebp], eax
	mov	edx, DWORD PTR tv286[ebp]
	mov	DWORD PTR tv236[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T93603[ebp]
	or	eax, 4
	mov	DWORD PTR $T93603[ebp], eax
	push	OFFSET FLAT:??_C@_19NCJFHIOD@?$AAT?$AAA?$AAB?$AAS?$AA?$AA@
	mov	ecx, DWORD PTR tv236[ebp]
	push	ecx
	call	??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ; ATL::operator==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	$L93593
	push	4
	lea	eax, DWORD PTR $T93595[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
	mov	DWORD PTR tv288[ebp], eax
	mov	ecx, DWORD PTR tv288[ebp]
	mov	DWORD PTR tv241[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T93603[ebp]
	or	edx, 8
	mov	DWORD PTR $T93603[ebp], edx
	push	OFFSET FLAT:??_C@_19MDCALDGN@?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
	mov	eax, DWORD PTR tv241[ebp]
	push	eax
	call	??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ; ATL::operator==
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	$L93593
	push	7
	lea	edx, DWORD PTR $T93596[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
	mov	DWORD PTR tv290[ebp], eax
	mov	eax, DWORD PTR tv290[ebp]
	mov	DWORD PTR tv246[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T93603[ebp]
	or	ecx, 16					; 00000010H
	mov	DWORD PTR $T93603[ebp], ecx
	push	OFFSET FLAT:??_C@_1BA@DNKPGKDB@?$AAD?$AAE?$AAF?$AAT?$AAA?$AAB?$AAS?$AA?$AA@
	mov	edx, DWORD PTR tv246[ebp]
	push	edx
	call	??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ; ATL::operator==
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	$L93593
	push	7
	lea	ecx, DWORD PTR $T93597[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
	mov	DWORD PTR tv292[ebp], eax
	mov	edx, DWORD PTR tv292[ebp]
	mov	DWORD PTR tv251[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR $T93603[ebp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR $T93603[ebp], eax
	push	OFFSET FLAT:??_C@_1BA@LGBCABEP@?$AAD?$AAe?$AAf?$AAT?$AAa?$AAb?$AAs?$AA?$AA@
	mov	ecx, DWORD PTR tv251[ebp]
	push	ecx
	call	??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ; ATL::operator==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	$L93593
	push	7
	lea	eax, DWORD PTR $T93598[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
	mov	DWORD PTR tv294[ebp], eax
	mov	ecx, DWORD PTR tv294[ebp]
	mov	DWORD PTR tv256[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR $T93603[ebp]
	or	edx, 64					; 00000040H
	mov	DWORD PTR $T93603[ebp], edx
	push	OFFSET FLAT:??_C@_1BA@OOHAHJOC@?$AAd?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
	mov	eax, DWORD PTR tv256[ebp]
	push	eax
	call	??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ; ATL::operator==
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $L93593
	push	7
	lea	edx, DWORD PTR $T93599[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
	mov	DWORD PTR tv261[ebp], eax
	mov	eax, DWORD PTR $T93603[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR $T93603[ebp], eax
	push	OFFSET FLAT:??_C@_1BA@PJEPACJP@?$AAD?$AAe?$AAf?$AAt?$AAa?$AAb?$AAs?$AA?$AA@
	mov	ecx, DWORD PTR tv261[ebp]
	push	ecx
	call	??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ; ATL::operator==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $L93593
	mov	DWORD PTR tv184[ebp], 0
	jmp	SHORT $L93600
$L93593:
	mov	DWORD PTR tv184[ebp], 1
$L93600:
	mov	ecx, DWORD PTR tv184[ebp]
	call	@_RTC_Check_4_to_1@4
	mov	BYTE PTR $T93590[ebp], al
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $L93620
	and	DWORD PTR $T93603[ebp], -129		; ffffff7fH
	lea	ecx, DWORD PTR $T93599[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93620:
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T93603[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $L93621
	and	DWORD PTR $T93603[ebp], -65		; ffffffbfH
	lea	ecx, DWORD PTR $T93598[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93621:
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR $T93603[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $L93622
	and	DWORD PTR $T93603[ebp], -33		; ffffffdfH
	lea	ecx, DWORD PTR $T93597[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93622:
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $L93623
	and	DWORD PTR $T93603[ebp], -17		; ffffffefH
	lea	ecx, DWORD PTR $T93596[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93623:
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T93603[ebp]
	and	ecx, 8
	je	SHORT $L93624
	and	DWORD PTR $T93603[ebp], -9		; fffffff7H
	lea	ecx, DWORD PTR $T93595[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93624:
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T93603[ebp]
	and	edx, 4
	je	SHORT $L93625
	and	DWORD PTR $T93603[ebp], -5		; fffffffbH
	lea	ecx, DWORD PTR $T93594[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93625:
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 2
	je	SHORT $L93626
	and	DWORD PTR $T93603[ebp], -3		; fffffffdH
	lea	ecx, DWORD PTR $T93592[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93626:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T93603[ebp]
	and	ecx, 1
	je	SHORT $L93627
	and	DWORD PTR $T93603[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T93591[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93627:
	movzx	edx, BYTE PTR $T93590[ebp]
	test	edx, edx
	je	$L93186

; 242  :      int pos = s.Find(_T('\n'));

	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Find@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHGH@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Find
	mov	DWORD PTR _pos$93205[ebp], eax

; 243  : 	 if ( pos != -1 ) {

	cmp	DWORD PTR _pos$93205[ebp], -1
	je	$L93206

; 244  : 	    tabstring = s.Left(pos+1);

	mov	eax, DWORD PTR _pos$93205[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T93601[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
	mov	DWORD PTR tv296[ebp], eax
	mov	edx, DWORD PTR tv296[ebp]
	mov	DWORD PTR tv279[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR tv279[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T93601[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >

; 245  : 		s = s.Mid(pos+1,s.GetLength()-(pos+1));

	mov	ecx, DWORD PTR _s$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	ecx, DWORD PTR _pos$93205[ebp]
	add	ecx, 1
	sub	eax, ecx
	push	eax
	mov	edx, DWORD PTR _pos$93205[ebp]
	add	edx, 1
	push	edx
	lea	eax, DWORD PTR $T93602[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Mid@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Mid
	mov	DWORD PTR tv297[ebp], eax
	mov	ecx, DWORD PTR tv297[ebp]
	mov	DWORD PTR tv281[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR tv281[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T93602[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >

; 246  : 	    }	 
; 247  : 	 else {

	jmp	SHORT $L93186
$L93206:

; 248  : 	    tabstring = s;

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=

; 249  : 		s = _T("");

	push	OFFSET FLAT:??_C@_11LOCGONAA@?$AA?$AA@
	mov	ecx, DWORD PTR _s$[ebp]
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
$L93186:

; 250  : 	   }
; 251  :     }	 
; 252  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$0:
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 1
	je	$L93605
	and	DWORD PTR $T93603[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T93591[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93605:
	ret	0
__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$1:
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 2
	je	$L93607
	and	DWORD PTR $T93603[ebp], -3		; fffffffdH
	lea	ecx, DWORD PTR $T93592[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93607:
	ret	0
__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$2:
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 4
	je	$L93609
	and	DWORD PTR $T93603[ebp], -5		; fffffffbH
	lea	ecx, DWORD PTR $T93594[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93609:
	ret	0
__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$3:
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 8
	je	$L93611
	and	DWORD PTR $T93603[ebp], -9		; fffffff7H
	lea	ecx, DWORD PTR $T93595[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93611:
	ret	0
__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$4:
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 16					; 00000010H
	je	$L93613
	and	DWORD PTR $T93603[ebp], -17		; ffffffefH
	lea	ecx, DWORD PTR $T93596[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93613:
	ret	0
__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$5:
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 32					; 00000020H
	je	$L93615
	and	DWORD PTR $T93603[ebp], -33		; ffffffdfH
	lea	ecx, DWORD PTR $T93597[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93615:
	ret	0
__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$6:
	mov	eax, DWORD PTR $T93603[ebp]
	and	eax, 64					; 00000040H
	je	$L93617
	and	DWORD PTR $T93603[ebp], -65		; ffffffbfH
	lea	ecx, DWORD PTR $T93598[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
$L93617:
	ret	0
__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$8:
	lea	ecx, DWORD PTR $T93601[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__unwindfunclet$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z$9:
	lea	ecx, DWORD PTR $T93602[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__ehhandler$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?splitTabs@RTFFuncs@@QAEXAAV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@@Z ENDP ; RTFFuncs::splitTabs
PUBLIC	??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<unsigned short,0>::operator=
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=, COMDAT
; _this$ = ecx

; 967  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 968  : 		CThisSimpleString::operator=( strSrc );

	mov	eax, DWORD PTR _strSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<unsigned short,0>::operator=

; 969  : 
; 970  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 971  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
_TEXT	ENDS
PUBLIC	??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<unsigned short,0>::operator+=
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@G$0A@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_str$ = 8						; size = 4
??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@G$0A@@1@@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=, COMDAT
; _this$ = ecx

; 1028 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		CThisSimpleString::operator+=( str );

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<unsigned short,0>::operator+=

; 1030 : 
; 1031 : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 1032 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@G$0A@@1@@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z	; ATL::CSimpleStringT<unsigned short,0>::operator+=
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=, COMDAT
; _this$ = ecx

; 1042 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1043 : 		CThisSimpleString::operator+=( pszSrc );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z ; ATL::CSimpleStringT<unsigned short,0>::operator+=

; 1044 : 
; 1045 : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 1046 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
_TEXT	ENDS
PUBLIC	?GetManager@?$CSimpleStringT@G$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetManager
PUBLIC	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z$0
__ehfuncinfo$??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
$T93645 = -236						; size = 4
_str$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pszSrc$ = 8						; size = 4
??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=, COMDAT
; _this$ = ecx

; 1055 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1056 : 		CStringT str( pszSrc, GetManager() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetManager@?$CSimpleStringT@G$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetManager
	push	eax
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1057 : 
; 1058 : 		return( operator+=( str ) );

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@G$0A@@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
	mov	DWORD PTR $T93645[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _str$[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	eax, DWORD PTR $T93645[ebp]

; 1059 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93652
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L93652:
	DD	1
	DD	$L93651
$L93651:
	DD	-32					; ffffffe0H
	DD	4
	DD	$L93649
$L93649:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z$0:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__ehhandler$??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
	jmp	___CxxFrameHandler
text$x	ENDS
??Y?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator+=
PUBLIC	??_C@_0M@GOJCFFEC@iStart?5?$DO?$DN?50?$AA@	; `string'
PUBLIC	??_C@_0FB@BCKJDECD@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ	; ATL::CSimpleStringT<unsigned short,0>::GetString
PUBLIC	?StringFindChar@?$ChTraitsCRT@G@ATL@@SAPBGPBGG@Z ; ATL::ChTraitsCRT<unsigned short>::StringFindChar
EXTRN	__CrtDbgReport:NEAR
;	COMDAT ??_C@_0M@GOJCFFEC@iStart?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0M@GOJCFFEC@iStart?5?$DO?$DN?50?$AA@ DB 'iStart >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@BCKJDECD@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT
??_C@_0FB@BCKJDECD@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio .net 2003\vc7\atlmfc\include\cs'
	DB	'tringt.h', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Find@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHGH@Z
_TEXT	SEGMENT
tv89 = -232						; size = 4
_psz$ = -32						; size = 4
_nLength$ = -20						; size = 4
_this$ = -8						; size = 4
_ch$ = 8						; size = 2
_iStart$ = 12						; size = 4
?Find@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHGH@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Find, COMDAT
; _this$ = ecx

; 1368 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1369 : 		// iStart is in XCHARs
; 1370 : 		ATLASSERT( iStart >= 0 );

	cmp	DWORD PTR _iStart$[ebp], 0
	jge	SHORT $L93658
	push	OFFSET FLAT:??_C@_0M@GOJCFFEC@iStart?5?$DO?$DN?50?$AA@
	push	0
	push	1370					; 0000055aH
	push	OFFSET FLAT:??_C@_0FB@BCKJDECD@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93658
	int	3
$L93658:

; 1371 : 
; 1372 : 		// nLength is in XCHARs
; 1373 : 		int nLength = GetLength();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	DWORD PTR _nLength$[ebp], eax

; 1374 : 		if( iStart < 0 || iStart >= nLength)

	cmp	DWORD PTR _iStart$[ebp], 0
	jl	SHORT $L93229
	mov	eax, DWORD PTR _iStart$[ebp]
	cmp	eax, DWORD PTR _nLength$[ebp]
	jl	SHORT $L93228
$L93229:

; 1375 : 		{
; 1376 : 			return( -1 );

	or	eax, -1
	jmp	SHORT $L93224
$L93228:

; 1377 : 		}
; 1378 : 
; 1379 : 		// find first single character
; 1380 : 		PCXSTR psz = StringTraits::StringFindChar( GetString()+iStart, ch );

	mov	ax, WORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	mov	ecx, DWORD PTR _iStart$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?StringFindChar@?$ChTraitsCRT@G@ATL@@SAPBGPBGG@Z ; ATL::ChTraitsCRT<unsigned short>::StringFindChar
	add	esp, 8
	mov	DWORD PTR _psz$[ebp], eax

; 1381 : 
; 1382 : 		// return -1 if not found and index otherwise
; 1383 : 		return( (psz == NULL) ? -1 : int( psz-GetString() ) );

	cmp	DWORD PTR _psz$[ebp], 0
	jne	SHORT $L93659
	mov	DWORD PTR tv89[ebp], -1
	jmp	SHORT $L93660
$L93659:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	mov	ecx, DWORD PTR _psz$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	mov	DWORD PTR tv89[ebp], ecx
$L93660:
	mov	eax, DWORD PTR tv89[ebp]
$L93224:

; 1384 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Find@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHGH@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Find
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExW@4:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -296				; size = 4
_ver$ = -284						; size = 276
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-492]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

	mov	DWORD PTR _ver$[ebp], 276		; 00000114H

; 139  : 	::GetVersionEx( &ver );

	mov	esi, esp
	lea	eax, DWORD PTR _ver$[ebp]
	push	eax
	call	DWORD PTR __imp__GetVersionExW@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

	cmp	DWORD PTR _ver$[ebp+16], 2
	jne	SHORT $L24087
	cmp	DWORD PTR _ver$[ebp+4], 5
	jb	SHORT $L24087

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

	jmp	SHORT $L24088
$L24087:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L24088:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

	mov	eax, DWORD PTR _pfnGetThreadACP$[ebp]
	push	eax
	push	OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	call	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

	mov	esi, esp
	call	DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	cmp	esi, esp
	call	__RTC_CheckEsp

; 152  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93667
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 492				; 000001ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93667:
	DD	1
	DD	$L93666
$L93666:
	DD	-284					; fffffee4H
	DD	276					; 00000114H
	DD	$L93664
$L93664:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

	mov	esi, esp
	mov	eax, DWORD PTR _pNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	call	DWORD PTR __imp__InterlockedExchange@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$24075 = -52					; size = 4
_szACP$ = -40						; size = 7
_lcidThread$ = -24					; size = 4
_nACP$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

	mov	DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

	mov	esi, esp
	call	DWORD PTR __imp__GetThreadLocale@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

	mov	esi, esp
	push	7
	lea	eax, DWORD PTR _szACP$[ebp]
	push	eax
	push	4100					; 00001004H
	mov	ecx, DWORD PTR _lcidThread$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $L24074

; 111  : 	{
; 112  : 		char* pch = szACP;

	lea	eax, DWORD PTR _szACP$[ebp]
	mov	DWORD PTR _pch$24075[ebp], eax
$L24077:

; 113  : 		while (*pch != '\0')

	mov	eax, DWORD PTR _pch$24075[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L24074

; 114  : 		{
; 115  : 			nACP *= 10;

	mov	eax, DWORD PTR _nACP$[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _nACP$[ebp], eax

; 116  : 			nACP += *pch++ - '0';

	mov	eax, DWORD PTR _pch$24075[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _nACP$[ebp]
	lea	eax, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _nACP$[ebp], eax
	mov	ecx, DWORD PTR _pch$24075[ebp]
	add	ecx, 1
	mov	DWORD PTR _pch$24075[ebp], ecx

; 117  : 		}

	jmp	SHORT $L24077
$L24074:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

	cmp	DWORD PTR _nACP$[ebp], 0
	jne	SHORT $L24079

; 121  : 		nACP = ::GetACP();

	mov	esi, esp
	call	DWORD PTR __imp__GetACP@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nACP$[ebp], eax
$L24079:

; 122  : 
; 123  : 	return nACP;

	mov	eax, DWORD PTR _nACP$[ebp]

; 124  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93676
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93676:
	DD	1
	DD	$L93675
$L93675:
	DD	-40					; ffffffd8H
	DD	7
	DD	$L93673
$L93673:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	65					; 00000041H
	DB	67					; 00000043H
	DB	80					; 00000050H
	DB	0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 128  : 	return( CP_THREAD_ACP );

	mov	eax, 3

; 129  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
PUBLIC	??_C@_0DC@KJIHKHDE@?$CInCount?5?$DN?$DN?50?$CJ?5?$HM?$HM?5?$CI?$CIiFirst?$CLnCount@ ; `string'
PUBLIC	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
;	COMDAT ??_C@_0DC@KJIHKHDE@?$CInCount?5?$DN?$DN?50?$CJ?5?$HM?$HM?5?$CI?$CIiFirst?$CLnCount@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
CONST	SEGMENT
??_C@_0DC@KJIHKHDE@?$CInCount?5?$DN?$DN?50?$CJ?5?$HM?$HM?5?$CI?$CIiFirst?$CLnCount@ DB '('
	DB	'nCount == 0) || ((iFirst+nCount) <= GetLength())', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Mid@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@HH@Z
_TEXT	SEGMENT
$T93683 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iFirst$ = 12						; size = 4
_nCount$ = 16						; size = 4
?Mid@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@HH@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Mid, COMDAT
; _this$ = ecx

; 1712 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93683[ebp], 0

; 1713 : 		// nCount is in XCHARs
; 1714 : 
; 1715 : 		// out-of-bounds requests return sensible things
; 1716 : 		if (iFirst < 0)

	cmp	DWORD PTR _iFirst$[ebp], 0
	jge	SHORT $L93234

; 1717 : 			iFirst = 0;

	mov	DWORD PTR _iFirst$[ebp], 0
$L93234:

; 1718 : 		if (nCount < 0)

	cmp	DWORD PTR _nCount$[ebp], 0
	jge	SHORT $L93235

; 1719 : 			nCount = 0;

	mov	DWORD PTR _nCount$[ebp], 0
$L93235:

; 1720 : 
; 1721 : 		if( (iFirst+nCount) > GetLength() )

	mov	esi, DWORD PTR _iFirst$[ebp]
	add	esi, DWORD PTR _nCount$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	cmp	esi, eax
	jle	SHORT $L93236

; 1722 : 		{
; 1723 : 			nCount = GetLength()-iFirst;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	sub	eax, DWORD PTR _iFirst$[ebp]
	mov	DWORD PTR _nCount$[ebp], eax
$L93236:

; 1724 : 		}
; 1725 : 		if( iFirst > GetLength() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	cmp	DWORD PTR _iFirst$[ebp], eax
	jle	SHORT $L93237

; 1726 : 		{
; 1727 : 			nCount = 0;

	mov	DWORD PTR _nCount$[ebp], 0
$L93237:

; 1728 : 		}
; 1729 : 
; 1730 : 		ATLASSERT( (nCount == 0) || ((iFirst+nCount) <= GetLength()) );

	cmp	DWORD PTR _nCount$[ebp], 0
	je	SHORT $L93681
	mov	esi, DWORD PTR _iFirst$[ebp]
	add	esi, DWORD PTR _nCount$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	cmp	esi, eax
	jle	SHORT $L93681
	push	OFFSET FLAT:??_C@_0DC@KJIHKHDE@?$CInCount?5?$DN?$DN?50?$CJ?5?$HM?$HM?5?$CI?$CIiFirst?$CLnCount@
	push	0
	push	1730					; 000006c2H
	push	OFFSET FLAT:??_C@_0FB@BCKJDECD@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93681
	int	3
$L93681:

; 1731 : 
; 1732 : 		// optimize case of returning entire string
; 1733 : 		if( (iFirst == 0) && ((iFirst+nCount) == GetLength()) )

	cmp	DWORD PTR _iFirst$[ebp], 0
	jne	SHORT $L93240
	mov	esi, DWORD PTR _iFirst$[ebp]
	add	esi, DWORD PTR _nCount$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	cmp	esi, eax
	jne	SHORT $L93240

; 1734 : 		{
; 1735 : 			return( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	ecx, DWORD PTR $T93683[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93683[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $L93233
$L93240:

; 1736 : 		}
; 1737 : 
; 1738 : 		return( CStringT( GetString()+iFirst, nCount, GetManager() ) );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetManager@?$CSimpleStringT@G$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetManager
	push	eax
	mov	eax, DWORD PTR _nCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	mov	ecx, DWORD PTR _iFirst$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	eax, DWORD PTR $T93683[ebp]
	or	eax, 1
	mov	DWORD PTR $T93683[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$L93233:

; 1739 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Mid@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@HH@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Mid
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z
_TEXT	SEGMENT
$T93688 = -224						; size = 4
_nLength$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_nCount$ = 12						; size = 4
?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left, COMDAT
; _this$ = ecx

; 1759 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93688[ebp], 0

; 1760 : 		// nCount is in XCHARs
; 1761 : 		if (nCount < 0)

	cmp	DWORD PTR _nCount$[ebp], 0
	jge	SHORT $L93245

; 1762 : 			nCount = 0;

	mov	DWORD PTR _nCount$[ebp], 0
$L93245:

; 1763 : 
; 1764 : 		int nLength = GetLength();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	DWORD PTR _nLength$[ebp], eax

; 1765 : 		if( nCount >= nLength )

	mov	eax, DWORD PTR _nCount$[ebp]
	cmp	eax, DWORD PTR _nLength$[ebp]
	jl	SHORT $L93247

; 1766 : 		{
; 1767 : 			return( *this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	ecx, DWORD PTR $T93688[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93688[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $L93244
$L93247:

; 1768 : 		}
; 1769 : 
; 1770 : 		return( CStringT( GetString(), nCount, GetManager() ) );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetManager@?$CSimpleStringT@G$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetManager
	push	eax
	mov	eax, DWORD PTR _nCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	ecx, DWORD PTR $T93688[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93688[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$L93244:

; 1771 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Left@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBE?AV12@H@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Left
_TEXT	ENDS
PUBLIC	??B?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ		; ATL::CSimpleStringT<unsigned short,0>::operator unsigned short const *
PUBLIC	?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::StringLength
PUBLIC	?Concatenate@?$CSimpleStringT@G$0A@@ATL@@KAXAAV12@PBGH1H@Z ; ATL::CSimpleStringT<unsigned short,0>::Concatenate
PUBLIC	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z$0
__ehfuncinfo$??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z
_TEXT	SEGMENT
$T93694 = -224						; size = 4
_strResult$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str1$ = 12						; size = 4
_psz2$ = 16						; size = 4
??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z PROC NEAR ; ATL::operator+, COMDAT

; 2023 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	DWORD PTR $T93694[ebp], 0

; 2024 : 		CStringT strResult( str1.GetManager() );

	mov	ecx, DWORD PTR _str1$[ebp]
	call	?GetManager@?$CSimpleStringT@G$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetManager
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2025 : 
; 2026 : 		Concatenate( strResult, str1, str1.GetLength(), psz2, StringLength( psz2 ) );

	mov	eax, DWORD PTR _psz2$[ebp]
	push	eax
	call	?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::StringLength
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _psz2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _str1$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	push	eax
	mov	ecx, DWORD PTR _str1$[ebp]
	call	??B?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ	; ATL::CSimpleStringT<unsigned short,0>::operator unsigned short const *
	push	eax
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	?Concatenate@?$CSimpleStringT@G$0A@@ATL@@KAXAAV12@PBGH1H@Z ; ATL::CSimpleStringT<unsigned short,0>::Concatenate
	add	esp, 20					; 00000014H

; 2027 : 
; 2028 : 		return( strResult );

	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	ecx, DWORD PTR $T93694[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93694[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2029 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93701
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L93701:
	DD	1
	DD	$L93700
$L93700:
	DD	-20					; ffffffecH
	DD	4
	DD	$L93698
$L93698:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z$0:
	lea	ecx, DWORD PTR _strResult$[ebp]
	jmp	??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
__ehhandler$??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z
	jmp	___CxxFrameHandler
text$x	ENDS
??HATL@@YA?AV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@ABV10@PBG@Z ENDP ; ATL::operator+
PUBLIC	?Compare@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHPBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Compare
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_psz2$ = 12						; size = 4
??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z PROC NEAR ; ATL::operator==, COMDAT

; 2087 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2088 : 		return( str1.Compare( psz2 ) == 0 );

	mov	eax, DWORD PTR _psz2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str1$[ebp]
	call	?Compare@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHPBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Compare
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	ecx, eax
	call	@_RTC_Check_4_to_1@4

; 2089 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??8ATL@@YA_NABV?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@0@PBG@Z ENDP ; ATL::operator==
_TEXT	ENDS
PUBLIC	?IsShared@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsShared
PUBLIC	?Lock@CStringData@ATL@@QAEXXZ			; ATL::CStringData::Lock
PUBLIC	?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<unsigned short,0>::Fork
PUBLIC	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?LockBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGXZ
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
?LockBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGXZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::LockBuffer, COMDAT
; _this$ = ecx

; 517  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 518  : 		CStringData* pData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pData$[ebp], eax

; 519  : 		if( pData->IsShared() )

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?IsShared@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsShared
	movzx	eax, al
	test	eax, eax
	je	SHORT $L93256

; 520  : 		{
; 521  : 			Fork( pData->nDataLength );

	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::Fork

; 522  : 			pData = GetData();  // Do it again, because the fork might have changed it

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pData$[ebp], eax
$L93256:

; 523  : 		}
; 524  : 		pData->Lock();

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?Lock@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Lock

; 525  : 
; 526  : 		return( m_pszData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 527  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?LockBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGXZ ENDP	; ATL::CSimpleStringT<unsigned short,0>::LockBuffer
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pStringMgr$ = 8					; size = 4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 800  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pStringMgr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>

; 801  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
PUBLIC	?CheckImplicitLoad@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAE_NPBX@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CheckImplicitLoad
PUBLIC	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
PUBLIC	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z$0
__ehfuncinfo$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pszSrc$ = 8						; size = 4
_pStringMgr$ = 12					; size = 4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 840  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pStringMgr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 841  : 		if( !CheckImplicitLoad( pszSrc ) )

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckImplicitLoad@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAE_NPBX@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CheckImplicitLoad
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $L93260

; 842  : 		{
; 843  : 			// nDestLength is in XCHARs
; 844  : 			*this = pszSrc;

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
$L93260:

; 845  : 		}
; 846  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ	; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
__ehhandler$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBDPAUIAtlStringMgr@1@@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
PUBLIC	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pch$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pStringMgr$ = 16					; size = 4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 923  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pStringMgr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pch$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>

; 924  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
PUBLIC	??_C@_0BI@GIMJKKKN@AtlIsValidString?$CI?5psz?5?$CJ?$AA@ ; `string'
PUBLIC	?StringCompare@?$ChTraitsCRT@G@ATL@@SAHPBG0@Z	; ATL::ChTraitsCRT<unsigned short>::StringCompare
PUBLIC	?AtlIsValidString@ATL@@YAHPBGI@Z		; ATL::AtlIsValidString
;	COMDAT ??_C@_0BI@GIMJKKKN@AtlIsValidString?$CI?5psz?5?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@GIMJKKKN@AtlIsValidString?$CI?5psz?5?$CJ?$AA@ DB 'AtlIsValidStr'
	DB	'ing( psz )', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Compare@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHPBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_psz$ = 8						; size = 4
?Compare@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHPBG@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Compare, COMDAT
; _this$ = ecx

; 1087 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1088 : 		ATLASSERT( AtlIsValidString( psz ) );

	push	2147483647				; 7fffffffH
	mov	eax, DWORD PTR _psz$[ebp]
	push	eax
	call	?AtlIsValidString@ATL@@YAHPBGI@Z	; ATL::AtlIsValidString
	add	esp, 8
	test	eax, eax
	jne	SHORT $L93725
	push	OFFSET FLAT:??_C@_0BI@GIMJKKKN@AtlIsValidString?$CI?5psz?5?$CJ?$AA@
	push	0
	push	1088					; 00000440H
	push	OFFSET FLAT:??_C@_0FB@BCKJDECD@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93725
	int	3
$L93725:

; 1089 : 		return( StringTraits::StringCompare( GetString(), psz ) );

	mov	eax, DWORD PTR _psz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	push	eax
	call	?StringCompare@?$ChTraitsCRT@G@ATL@@SAHPBG0@Z ; ATL::ChTraitsCRT<unsigned short>::StringCompare
	add	esp, 8

; 1090 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Compare@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QBEHPBG@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::Compare
_TEXT	ENDS
PUBLIC	?IsLocked@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsLocked
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
PUBLIC	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString
PUBLIC	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
PUBLIC	?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<unsigned short,0>::CloneData
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_pNewData$93276 = -44					; size = 4
_pOldData$ = -32					; size = 4
_pSrcData$ = -20					; size = 4
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::operator=, COMDAT
; _this$ = ecx

; 273  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 274  : 		CStringData* pSrcData = strSrc.GetData();

	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pSrcData$[ebp], eax

; 275  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 276  : 		if( pSrcData != pOldData)

	mov	eax, DWORD PTR _pSrcData$[ebp]
	cmp	eax, DWORD PTR _pOldData$[ebp]
	je	SHORT $L93272

; 277  : 		{
; 278  : 			if( pOldData->IsLocked() || pSrcData->pStringMgr != pOldData->pStringMgr )

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?IsLocked@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsLocked
	movzx	eax, al
	test	eax, eax
	jne	SHORT $L93274
	mov	eax, DWORD PTR _pSrcData$[ebp]
	mov	ecx, DWORD PTR _pOldData$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $L93273
$L93274:

; 279  : 			{
; 280  : 				SetString( strSrc.GetString(), strSrc.GetLength() );

	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	push	eax
	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString

; 281  : 			}
; 282  : 			else

	jmp	SHORT $L93272
$L93273:

; 283  : 			{
; 284  : 				CStringData* pNewData = CloneData( pSrcData );

	mov	eax, DWORD PTR _pSrcData$[ebp]
	push	eax
	call	?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<unsigned short,0>::CloneData
	add	esp, 4
	mov	DWORD PTR _pNewData$93276[ebp], eax

; 285  : 				pOldData->Release();

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 286  : 				Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$93276[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L93272:

; 287  : 			}
; 288  : 		}
; 289  : 
; 290  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 291  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::operator=
_TEXT	ENDS
PUBLIC	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXABV12@@Z ; ATL::CSimpleStringT<unsigned short,0>::Append
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::operator+=, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 		Append( strSrc );

	mov	eax, DWORD PTR _strSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXABV12@@Z ; ATL::CSimpleStringT<unsigned short,0>::Append

; 324  : 
; 325  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 326  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@ABV01@@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::operator+=
_TEXT	ENDS
PUBLIC	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z	; ATL::CSimpleStringT<unsigned short,0>::Append
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::operator+=, COMDAT
; _this$ = ecx

; 336  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 		Append( pszSrc );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::Append

; 338  : 
; 339  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 340  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::operator+=
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetManager@?$CSimpleStringT@G$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?GetManager@?$CSimpleStringT@G$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetManager, COMDAT
; _this$ = ecx

; 504  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 505  : 		return( GetData()->pStringMgr->Clone() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv68[ebp]
	call	DWORD PTR [edx+16]
	cmp	esi, esp
	call	__RTC_CheckEsp

; 506  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetManager@?$CSimpleStringT@G$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ENDP ; ATL::CSimpleStringT<unsigned short,0>::GetManager
_TEXT	ENDS
PUBLIC	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
PUBLIC	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength
PUBLIC	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?Concatenate@?$CSimpleStringT@G$0A@@ATL@@KAXAAV12@PBGH1H@Z
_TEXT	SEGMENT
_pszBuffer$ = -20					; size = 4
_nNewLength$ = -8					; size = 4
_strResult$ = 8						; size = 4
_psz1$ = 12						; size = 4
_nLength1$ = 16						; size = 4
_psz2$ = 20						; size = 4
_nLength2$ = 24						; size = 4
?Concatenate@?$CSimpleStringT@G$0A@@ATL@@KAXAAV12@PBGH1H@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Concatenate, COMDAT

; 696  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : 		int nNewLength = nLength1+nLength2;

	mov	eax, DWORD PTR _nLength1$[ebp]
	add	eax, DWORD PTR _nLength2$[ebp]
	mov	DWORD PTR _nNewLength$[ebp], eax

; 698  : 		PXSTR pszBuffer = strResult.GetBuffer( nNewLength );

	mov	eax, DWORD PTR _nNewLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strResult$[ebp]
	call	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
	mov	DWORD PTR _pszBuffer$[ebp], eax

; 699  : 		CopyChars( pszBuffer, psz1, nLength1 );

	mov	eax, DWORD PTR _nLength1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psz1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszBuffer$[ebp]
	push	edx
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH

; 700  : 		CopyChars( pszBuffer+nLength1, psz2, nLength2 );

	mov	eax, DWORD PTR _nLength2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psz2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLength1$[ebp]
	mov	eax, DWORD PTR _pszBuffer$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	push	ecx
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH

; 701  : 		strResult.ReleaseBufferSetLength( nNewLength );

	mov	eax, DWORD PTR _nNewLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strResult$[ebp]
	call	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength

; 702  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Concatenate@?$CSimpleStringT@G$0A@@ATL@@KAXAAV12@PBGH1H@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::Concatenate
_TEXT	ENDS
PUBLIC	??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@	; `string'
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
PUBLIC	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
PUBLIC	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<unsigned short,0>::SetLength
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@ DB 'pStringMgr != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT
??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio .net 2003\vc7\atlmfc\include\at'
	DB	'lsimpstr.h', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
_pchSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pStringMgr$ = 16					; size = 4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 245  : 	CSimpleStringT( const XCHAR* pchSrc, int nLength, IAtlStringMgr* pStringMgr )

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 	{
; 247  : 		ATLASSERT( pStringMgr != NULL );

	cmp	DWORD PTR _pStringMgr$[ebp], 0
	jne	SHORT $L93738
	push	OFFSET FLAT:??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
	push	0
	push	247					; 000000f7H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93738
	int	3
$L93738:

; 248  : 		
; 249  : 		if(pchSrc == NULL && nLength != 0)

	cmp	DWORD PTR _pchSrc$[ebp], 0
	jne	SHORT $L93292
	cmp	DWORD PTR _nLength$[ebp], 0
	je	SHORT $L93292

; 250  : 			AtlThrow(E_INVALIDARG);

	push	-2147024809				; 80070057H
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L93292:

; 251  : 
; 252  : 		CStringData* pData = pStringMgr->Allocate( nLength, sizeof( XCHAR ) );

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [edx]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pData$[ebp], eax

; 253  : 		if( pData == NULL )

	cmp	DWORD PTR _pData$[ebp], 0
	jne	SHORT $L93296

; 254  : 		{
; 255  : 			ThrowMemoryException();

	call	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
$L93296:

; 256  : 		}
; 257  : 		Attach( pData );

	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach

; 258  : 		SetLength( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetLength

; 259  : 		CopyChars( m_pszData, pchSrc, nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pchSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH

; 260  : 	}

	mov	eax, DWORD PTR _this$[ebp]
$L93737:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$CSimpleStringT@G$0A@@ATL@@QAE@PBGHPAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
_TEXT	ENDS
PUBLIC	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z	; ATL::CSimpleStringT<unsigned short,0>::Append
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::Append, COMDAT
; _this$ = ecx

; 383  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 384  : 		Append( pszSrc, StringLength( pszSrc ) );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	call	?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::StringLength
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::Append

; 385  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::Append
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXABV12@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Append, COMDAT
; _this$ = ecx

; 412  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 		Append( strSrc.GetString(), strSrc.GetLength() );

	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	push	eax
	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::Append

; 414  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXABV12@@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::Append
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT
_pszBuffer$ = -56					; size = 4
_nNewLength$ = -44					; size = 4
_nOldLength$ = -32					; size = 4
_nOffset$ = -20						; size = 4
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Append, COMDAT
; _this$ = ecx

; 387  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 388  : 		// See comment in SetString() about why we do this
; 389  : 		UINT_PTR nOffset = pszSrc-GetString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	mov	DWORD PTR _nOffset$[ebp], ecx

; 390  : 
; 391  : 		UINT nOldLength = GetLength();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	DWORD PTR _nOldLength$[ebp], eax

; 392  : 		int nNewLength = nOldLength+nLength;

	mov	eax, DWORD PTR _nOldLength$[ebp]
	add	eax, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR _nNewLength$[ebp], eax

; 393  : 		PXSTR pszBuffer = GetBuffer( nNewLength );

	mov	eax, DWORD PTR _nNewLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
	mov	DWORD PTR _pszBuffer$[ebp], eax

; 394  : 		if( nOffset <= nOldLength )

	mov	eax, DWORD PTR _nOffset$[ebp]
	cmp	eax, DWORD PTR _nOldLength$[ebp]
	ja	SHORT $L93307

; 395  : 		{
; 396  : 			pszSrc = pszBuffer+nOffset;

	mov	eax, DWORD PTR _nOffset$[ebp]
	mov	ecx, DWORD PTR _pszBuffer$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pszSrc$[ebp], edx
$L93307:

; 397  : 			// No need to call CopyCharsOverlapped, since the destination is
; 398  : 			// beyond the end of the original buffer
; 399  : 		}
; 400  : 		CopyChars( pszBuffer+nOldLength, pszSrc, nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nOldLength$[ebp]
	mov	eax, DWORD PTR _pszBuffer$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	push	ecx
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH

; 401  : 		ReleaseBufferSetLength( nNewLength );

	mov	eax, DWORD PTR _nNewLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength

; 402  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Append@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::Append
_TEXT	ENDS
PUBLIC	??BCTraceCategory@ATL@@QBEKXZ			; ATL::CTraceCategory::operator unsigned long
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA	; `ATL::AtlThrow'::`2'::__LINE__Var
PUBLIC	??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@ ; `string'
EXTRN	?atlTraceException@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceException
EXTRN	?AfxThrowMemoryException@@YGXXZ:NEAR		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:NEAR		; AfxThrowOleException
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
CONST	SEGMENT
??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@ DB 'A'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'o', 00H
	DB	'w', 00H, ':', 00H, ' ', 00H, 'h', 00H, 'r', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'x', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA DD 03dH	; `ATL::AtlThrow'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT
??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio .net 2003\vc7\atlmfc\include\at'
	DB	'lexcept.h', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T93747 = -204						; size = 8
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6@
	push	0
	mov	ecx, OFFSET FLAT:?atlTraceException@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceException
	call	??BCTraceCategory@ATL@@QBEKXZ		; ATL::CTraceCategory::operator unsigned long
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
	add	ecx, 1
	push	ecx
	push	OFFSET FLAT:??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
	lea	ecx, DWORD PTR $T93747[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ ; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 20					; 00000014H

; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )

	cmp	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jne	SHORT $L25398

; 65   : 	{
; 66   : 		AfxThrowMemoryException();

	call	?AfxThrowMemoryException@@YGXXZ		; AfxThrowMemoryException
$L25398:

; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	call	?AfxThrowOleException@@YGXJ@Z		; AfxThrowOleException
$L93746:

; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );
; 74   : #endif
; 75   : };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atltrace.h
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC NEAR	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 158  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pszFileName$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nLineNo$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
PUBLIC	?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z		; ATL::CTrace::TraceV
EXTRN	?s_trace@CTrace@ATL@@2V12@A:QWORD		; ATL::CTrace::s_trace
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ PROC NEAR	; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 168  : 		va_list ptr; va_start(ptr, pszFmt);

	lea	eax, DWORD PTR _pszFmt$[ebp+4]
	mov	DWORD PTR _ptr$[ebp], eax

; 169  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwCategory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET FLAT:?s_trace@CTrace@ATL@@2V12@A
	call	?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z	; ATL::CTrace::TraceV
	add	esp, 28					; 0000001cH

; 170  : 		va_end(ptr);

	mov	DWORD PTR _ptr$[ebp], 0

; 171  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
EXTRN	_AtlTraceVU:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFileName$ = 12					; size = 4
_nLine$ = 16						; size = 4
_dwCategory$ = 20					; size = 4
_nLevel$ = 24						; size = 4
_pszFmt$ = 28						; size = 4
_args$ = 32						; size = 4
?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z PROC NEAR	; ATL::CTrace::TraceV, COMDAT

; 126  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 127  : 		AtlTraceVU(m_dwModule, pszFileName, nLine, dwCategory, nLevel, pszFmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwCategory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_AtlTraceVU
	add	esp, 28					; 0000001cH

; 128  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?TraceV@CTrace@ATL@@QBAXPBDHKIPBGPAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??BCTraceCategory@ATL@@QBEKXZ PROC NEAR			; ATL::CTraceCategory::operator unsigned long, COMDAT
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	return( m_dwCategory );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BCTraceCategory@ATL@@QBEKXZ ENDP			; ATL::CTraceCategory::operator unsigned long
_TEXT	ENDS
EXTRN	__except_handler3:NEAR
;	COMDAT CONST
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
CONST	SEGMENT
__sehtable$?AtlIsValidString@ATL@@YAHPBGI@Z DD 0ffffffffH
	DD	FLAT:$L93759
	DD	FLAT:$L93760
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?AtlIsValidString@ATL@@YAHPBGI@Z
_TEXT	SEGMENT
tv75 = -256						; size = 4
_ch$25537 = -56						; size = 2
_pchEnd$ = -44						; size = 4
_pch$ = -32						; size = 4
__$SEHRec$ = -24					; size = 24
_psz$ = 8						; size = 4
_nMaxLength$ = 12					; size = 4
?AtlIsValidString@ATL@@YAHPBGI@Z PROC NEAR		; ATL::AtlIsValidString, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	OFFSET FLAT:__sehtable$?AtlIsValidString@ATL@@YAHPBGI@Z
	push	OFFSET FLAT:__except_handler3
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	add	esp, -240				; ffffff10H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	DWORD PTR __$SEHRec$[ebp], esp

; 38   : #if defined(_DEBUG)
; 39   : 	// Implement ourselves because ::IsBadStringPtrW() isn't implemented on Win9x.
; 40   : 	if ((psz == NULL) || (nMaxLength == 0))

	cmp	DWORD PTR _psz$[ebp], 0
	je	SHORT $L25533
	cmp	DWORD PTR _nMaxLength$[ebp], 0
	jne	SHORT $L25532
$L25533:

; 41   : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $L93758
$L25532:

; 42   : 
; 43   : 	LPCWSTR pch;
; 44   : 	LPCWSTR pchEnd;
; 45   : 	__try

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 46   : 	{
; 47   : 		wchar_t ch;
; 48   : 
; 49   : 		pch = psz;

	mov	eax, DWORD PTR _psz$[ebp]
	mov	DWORD PTR _pch$[ebp], eax

; 50   : 		pchEnd = psz+nMaxLength-1;

	mov	eax, DWORD PTR _nMaxLength$[ebp]
	mov	ecx, DWORD PTR _psz$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _pchEnd$[ebp], edx

; 51   : 		ch = *(volatile wchar_t*)pch;

	mov	eax, DWORD PTR _pch$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _ch$25537[ebp], cx
$L25540:

; 52   : 		while ((ch != L'\0') && (pch != pchEnd))

	movzx	eax, WORD PTR _ch$25537[ebp]
	test	eax, eax
	je	SHORT $L25536
	mov	eax, DWORD PTR _pch$[ebp]
	cmp	eax, DWORD PTR _pchEnd$[ebp]
	je	SHORT $L25536

; 53   : 		{
; 54   : 			pch++;

	mov	eax, DWORD PTR _pch$[ebp]
	add	eax, 2
	mov	DWORD PTR _pch$[ebp], eax

; 55   : 			ch = *(volatile wchar_t*)pch;

	mov	eax, DWORD PTR _pch$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _ch$25537[ebp], cx

; 56   : 		}

	jmp	SHORT $L25540
$L25536:
	mov	DWORD PTR __$SEHRec$[ebp+20], -1
	jmp	SHORT $L93762
$L93759:
$L93772:

; 57   : 	}
; 58   : 	__except (EXCEPTION_EXECUTE_HANDLER)

	mov	eax, 1
$L93761:
$L93771:
	ret	0
$L93760:
	mov	esp, DWORD PTR __$SEHRec$[ebp]
	mov	DWORD PTR tv75[ebp], 0
	mov	DWORD PTR __$SEHRec$[ebp+20], -1

; 59   : 	{
; 60   : 		return FALSE;

	mov	eax, DWORD PTR tv75[ebp]
	jmp	SHORT $L93758
$L93762:

; 61   : 	}
; 62   : 
; 63   : 	return TRUE;

	mov	eax, 1
$L93758:

; 64   : #else
; 65   : 	(nMaxLength);
; 66   : 	return (psz != NULL);
; 67   : #endif	
; 68   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93770
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L93770:
	DD	3
	DD	$L93769
$L93769:
	DD	-32					; ffffffe0H
	DD	4
	DD	$L93765
	DD	-44					; ffffffd4H
	DD	4
	DD	$L93766
	DD	-56					; ffffffc8H
	DD	2
	DD	$L93767
$L93767:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$L93766:
	DB	112					; 00000070H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$L93765:
	DB	112					; 00000070H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
?AtlIsValidString@ATL@@YAHPBGI@Z ENDP			; ATL::AtlIsValidString
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsLocked@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsLocked, COMDAT
; _this$ = ecx

; 75   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 		return nRefs < 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12], 0
	setl	cl
	call	@_RTC_Check_4_to_1@4

; 77   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLocked@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsLocked
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsShared@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsShared, COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return( nRefs > 1 ); 

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12], 1
	setg	cl
	call	@_RTC_Check_4_to_1@4

; 81   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShared@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsShared
_TEXT	ENDS
PUBLIC	??_C@_0L@GJOHDDKG@nRefs?5?$DM?$DN?51?$AA@	; `string'
;	COMDAT ??_C@_0L@GJOHDDKG@nRefs?5?$DM?$DN?51?$AA@
CONST	SEGMENT
??_C@_0L@GJOHDDKG@nRefs?5?$DM?$DN?51?$AA@ DB 'nRefs <= 1', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Lock@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Lock@CStringData@ATL@@QAEXXZ PROC NEAR			; ATL::CStringData::Lock, COMDAT
; _this$ = ecx

; 83   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 		ATLASSERT( nRefs <= 1 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jle	SHORT $L93781
	push	OFFSET FLAT:??_C@_0L@GJOHDDKG@nRefs?5?$DM?$DN?51?$AA@
	push	0
	push	84					; 00000054H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93781
	int	3
$L93781:

; 85   : 		nRefs--;  // Locked buffers can't be shared, so no interlocked operation necessary

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 86   : 		if( nRefs == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $L26111

; 87   : 		{
; 88   : 			nRefs = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
$L26111:

; 89   : 		}
; 90   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Lock@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Lock
_TEXT	ENDS
PUBLIC	??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@	; `string'
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@ DB 'nRefs != 0', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		ATLASSERT( nRefs != 0 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $L93784
	push	OFFSET FLAT:??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
	push	0
	push	93					; 0000005dH
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93784
	int	3
$L93784:

; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	test	ecx, ecx
	jg	SHORT $L26116

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	call	DWORD PTR [edx+4]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L26116:

; 98   : 		}
; 99   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
EXTRN	_wcscmp:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?StringCompare@?$ChTraitsCRT@G@ATL@@SAHPBG0@Z
_TEXT	SEGMENT
_pszA$ = 8						; size = 4
_pszB$ = 12						; size = 4
?StringCompare@?$ChTraitsCRT@G@ATL@@SAHPBG0@Z PROC NEAR	; ATL::ChTraitsCRT<unsigned short>::StringCompare, COMDAT

; 573  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 574  : 		return wcscmp( pszA, pszB );

	mov	eax, DWORD PTR _pszB$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszA$[ebp]
	push	ecx
	call	_wcscmp
	add	esp, 8

; 575  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StringCompare@?$ChTraitsCRT@G@ATL@@SAHPBG0@Z ENDP	; ATL::ChTraitsCRT<unsigned short>::StringCompare
_TEXT	ENDS
EXTRN	_wcschr:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?StringFindChar@?$ChTraitsCRT@G@ATL@@SAPBGPBGG@Z
_TEXT	SEGMENT
_pszBlock$ = 8						; size = 4
_chMatch$ = 12						; size = 2
?StringFindChar@?$ChTraitsCRT@G@ATL@@SAPBGPBGG@Z PROC NEAR ; ATL::ChTraitsCRT<unsigned short>::StringFindChar, COMDAT

; 603  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 604  : 		return wcschr( pszBlock, chMatch );

	mov	ax, WORD PTR _chMatch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszBlock$[ebp]
	push	ecx
	call	_wcschr
	add	esp, 8

; 605  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StringFindChar@?$ChTraitsCRT@G@ATL@@SAPBGPBGG@Z ENDP	; ATL::ChTraitsCRT<unsigned short>::StringFindChar
_TEXT	ENDS
PUBLIC	?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 796  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>

; 797  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z	; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 814  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _strSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>

; 815  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@ABV01@@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z$0
__ehfuncinfo$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pszSrc$ = 8						; size = 4
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 830  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 831  : 		if( !CheckImplicitLoad( pszSrc ) )

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckImplicitLoad@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAE_NPBX@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CheckImplicitLoad
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $L92623

; 832  : 		{
; 833  : 			// nDestLength is in XCHARs
; 834  : 			*this = pszSrc;

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
$L92623:

; 835  : 		}
; 836  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ	; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
__ehhandler$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@PBG@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >, COMDAT
; _this$ = ecx

; 962  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 963  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ	; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::~CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >
_TEXT	ENDS
PUBLIC	??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z	; ATL::CSimpleStringT<unsigned short,0>::operator=
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=, COMDAT
; _this$ = ecx

; 982  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 983  : 		CThisSimpleString::operator=( pszSrc );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z ; ATL::CSimpleStringT<unsigned short,0>::operator=

; 984  : 
; 985  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 986  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBG@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::operator unsigned short const *, COMDAT
; _this$ = ecx

; 378  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 379  : 		return( m_pszData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 380  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ENDP		; ATL::CSimpleStringT<unsigned short,0>::operator unsigned short const *
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::GetLength, COMDAT
; _this$ = ecx

; 500  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 501  : 		return( GetData()->nDataLength );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	eax, DWORD PTR [eax+4]

; 502  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ENDP	; ATL::CSimpleStringT<unsigned short,0>::GetLength
_TEXT	ENDS
PUBLIC	?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ	; ATL::CSimpleStringT<unsigned short,0>::Empty
PUBLIC	?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z ; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength
PUBLIC	?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
tv67 = -232						; size = 4
_pszBuffer$92707 = -32					; size = 4
_nDestLength$ = -20					; size = 4
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=, COMDAT
; _this$ = ecx

; 989  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 990  : 		// nDestLength is in XCHARs
; 991  : 		int nDestLength = (pszSrc != NULL) ? StringTraits::GetBaseTypeLength( pszSrc ) : 0;

	cmp	DWORD PTR _pszSrc$[ebp], 0
	je	SHORT $L93813
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	call	?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z ; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength
	add	esp, 4
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $L93814
$L93813:
	mov	DWORD PTR tv67[ebp], 0
$L93814:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _nDestLength$[ebp], ecx

; 992  : 		if( nDestLength > 0 )

	cmp	DWORD PTR _nDestLength$[ebp], 0
	jle	SHORT $L92706

; 993  : 		{
; 994  : 			PXSTR pszBuffer = GetBuffer( nDestLength );

	mov	eax, DWORD PTR _nDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
	mov	DWORD PTR _pszBuffer$92707[ebp], eax

; 995  : 			StringTraits::ConvertToBaseType( pszBuffer, nDestLength, pszSrc );

	push	-1
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nDestLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszBuffer$92707[ebp]
	push	edx
	call	?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType
	add	esp, 16					; 00000010H

; 996  : 			ReleaseBufferSetLength( nDestLength );

	mov	eax, DWORD PTR _nDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength

; 997  : 		}
; 998  : 		else

	jmp	SHORT $L92708
$L92706:

; 999  : 		{
; 1000 : 			Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<unsigned short,0>::Empty
$L92708:

; 1001 : 		}
; 1002 : 
; 1003 : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 1004 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEAAV01@PBD@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::operator=
_TEXT	ENDS
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
EXTRN	__imp__MultiByteToWideChar@24:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z PROC NEAR ; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength, COMDAT

; 653  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 654  : 		// Returns required buffer size in wchar_ts
; 655  : 		return ::MultiByteToWideChar( _AtlGetConversionACP(), 0, pszSrc, -1, NULL, 0 )-1;

	mov	esi, esp
	push	0
	push	0
	push	-1
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	push	0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	push	eax
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1

; 656  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBD@Z ENDP	; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 158  : 	return( g_pfnGetThreadACP() );

	mov	esi, esp
	call	DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	cmp	esi, esp
	call	__RTC_CheckEsp

; 159  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_nDestLength$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nSrcLength$ = 20					; size = 4
?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z PROC NEAR ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType, COMDAT

; 679  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 680  : 		// nLen is in wchar_ts
; 681  : 		::MultiByteToWideChar( _AtlGetConversionACP(), 0, pszSrc, nSrcLength, pszDest, nDestLength );

	mov	esi, esp
	mov	eax, DWORD PTR _nDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nSrcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	push	0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	push	eax
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp

; 682  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBDH@Z ENDP ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType
_TEXT	ENDS
PUBLIC	?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHI@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::LoadStringW
PUBLIC	??_C@_1FC@BMOLDHIO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAi?$AAm?$AAp?$AAl?$AAi?$AAc?$AAi?$AAt?$AA?5?$AAL?$AAo@ ; `string'
EXTRN	?atlTraceString@ATL@@3VCTraceCategory@1@A:DWORD	; ATL::atlTraceString
EXTRN	@_RTC_Check_4_to_2@4:NEAR
;	COMDAT ??_C@_1FC@BMOLDHIO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAi?$AAm?$AAp?$AAl?$AAi?$AAc?$AAi?$AAt?$AA?5?$AAL?$AAo@
CONST	SEGMENT
??_C@_1FC@BMOLDHIO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAi?$AAm?$AAp?$AAl?$AAi?$AAc?$AAi?$AAt?$AA?5?$AAL?$AAo@ DB 'W'
	DB	00H, 'a', 00H, 'r', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	':', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'i'
	DB	00H, 'c', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'L', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '(', 00H, '%', 00H, 'u', 00H, ')', 00H, ' ', 00H
	DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, 0aH
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?CheckImplicitLoad@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT
$T93823 = -240						; size = 8
_nID$92726 = -32					; size = 4
_bRet$ = -17						; size = 1
_this$ = -8						; size = 4
_pv$ = 8						; size = 4
?CheckImplicitLoad@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAE_NPBX@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CheckImplicitLoad, COMDAT
; _this$ = ecx

; 2229 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2230 : 		bool bRet = false;

	mov	BYTE PTR _bRet$[ebp], 0

; 2231 : 
; 2232 : 		if( (pv != NULL) && IS_INTRESOURCE( pv ) )

	cmp	DWORD PTR _pv$[ebp], 0
	je	SHORT $L92725
	mov	eax, DWORD PTR _pv$[ebp]
	shr	eax, 16					; 00000010H
	test	eax, eax
	jne	SHORT $L92725

; 2233 : 		{
; 2234 : 			UINT nID = LOWORD( reinterpret_cast< DWORD_PTR >( pv ) );

	mov	ecx, DWORD PTR _pv$[ebp]
	and	ecx, 65535				; 0000ffffH
	call	@_RTC_Check_4_to_2@4
	movzx	eax, ax
	mov	DWORD PTR _nID$92726[ebp], eax

; 2235 : 			if( !LoadString( nID ) )

	mov	eax, DWORD PTR _nID$92726[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHI@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::LoadStringW
	test	eax, eax
	jne	SHORT $L92730

; 2236 : 			{
; 2237 : 				ATLTRACE( atlTraceString, 2, _T( "Warning: implicit LoadString(%u) failed\n" ), nID );

	mov	eax, DWORD PTR _nID$92726[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1FC@BMOLDHIO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAi?$AAm?$AAp?$AAl?$AAi?$AAc?$AAi?$AAt?$AA?5?$AAL?$AAo@
	push	2
	mov	ecx, OFFSET FLAT:?atlTraceString@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceString
	call	??BCTraceCategory@ATL@@QBEKXZ		; ATL::CTraceCategory::operator unsigned long
	push	eax
	push	2237					; 000008bdH
	push	OFFSET FLAT:??_C@_0FB@BCKJDECD@c?3?2program?5files?2microsoft?5visua@
	lea	ecx, DWORD PTR $T93823[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBGZZ ; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 20					; 00000014H
$L92730:

; 2238 : 			}
; 2239 : 			bRet = true;

	mov	BYTE PTR _bRet$[ebp], 1
$L92725:

; 2240 : 		}
; 2241 : 
; 2242 : 		return( bRet );

	mov	al, BYTE PTR _bRet$[ebp]

; 2243 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckImplicitLoad@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@AAE_NPBX@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::CheckImplicitLoad
_TEXT	ENDS
PUBLIC	?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::LoadStringW
PUBLIC	?FindStringResourceInstance@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUHINSTANCE__@@I@Z ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::FindStringResourceInstance
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHI@Z
_TEXT	SEGMENT
_hInst$ = -20						; size = 4
_this$ = -8						; size = 4
_nID$ = 8						; size = 4
?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHI@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::LoadStringW, COMDAT
; _this$ = ecx

; 1969 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1970 : 		HINSTANCE hInst = StringTraits::FindStringResourceInstance( nID );

	mov	eax, DWORD PTR _nID$[ebp]
	push	eax
	call	?FindStringResourceInstance@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUHINSTANCE__@@I@Z ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::FindStringResourceInstance
	add	esp, 4
	mov	DWORD PTR _hInst$[ebp], eax

; 1971 : 		if( hInst == NULL )

	cmp	DWORD PTR _hInst$[ebp], 0
	jne	SHORT $L92647

; 1972 : 		{
; 1973 : 			return( FALSE );

	xor	eax, eax
	jmp	SHORT $L92645
$L92647:

; 1974 : 		}
; 1975 : 
; 1976 : 		return( LoadString( hInst, nID ) );		

	mov	eax, DWORD PTR _nID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hInst$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::LoadStringW
$L92645:

; 1977 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHI@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::LoadStringW
_TEXT	ENDS
PUBLIC	?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z ; ATL::AtlGetStringResourceImage
PUBLIC	?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBGH@Z ; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength
PUBLIC	?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBGH@Z ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT
_pszBuffer$ = -44					; size = 4
_nLength$ = -32						; size = 4
_pImage$ = -20						; size = 4
_this$ = -8						; size = 4
_hInstance$ = 8						; size = 4
_nID$ = 12						; size = 4
?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z PROC NEAR ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::LoadStringW, COMDAT
; _this$ = ecx

; 1981 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1982 : 		const ATLSTRINGRESOURCEIMAGE* pImage = AtlGetStringResourceImage( hInstance, nID );

	mov	eax, DWORD PTR _nID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z ; ATL::AtlGetStringResourceImage
	add	esp, 8
	mov	DWORD PTR _pImage$[ebp], eax

; 1983 : 		if( pImage == NULL )

	cmp	DWORD PTR _pImage$[ebp], 0
	jne	SHORT $L92718

; 1984 : 		{
; 1985 : 			return( FALSE );

	xor	eax, eax
	jmp	SHORT $L92716
$L92718:

; 1986 : 		}
; 1987 : 
; 1988 : 		int nLength = StringTraits::GetBaseTypeLength( pImage->achString, pImage->nLength );

	mov	eax, DWORD PTR _pImage$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pImage$[ebp]
	add	edx, 2
	push	edx
	call	?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBGH@Z ; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength
	add	esp, 8
	mov	DWORD PTR _nLength$[ebp], eax

; 1989 : 		PXSTR pszBuffer = GetBuffer( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
	mov	DWORD PTR _pszBuffer$[ebp], eax

; 1990 : 		StringTraits::ConvertToBaseType( pszBuffer, nLength, pImage->achString, pImage->nLength );

	mov	eax, DWORD PTR _pImage$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pImage$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszBuffer$[ebp]
	push	ecx
	call	?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBGH@Z ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType
	add	esp, 16					; 00000010H

; 1991 : 		ReleaseBufferSetLength( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength

; 1992 : 
; 1993 : 		return( TRUE );

	mov	eax, 1
$L92716:

; 1994 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?LoadStringW@?$CStringT@GV?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ENDP ; ATL::CStringT<unsigned short,StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::LoadStringW
_TEXT	ENDS
PUBLIC	?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ; ATL::_AtlGetStringResourceImage
EXTRN	__imp__FindResourceW@12:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT
_hResource$ = -8					; size = 4
_hInstance$ = 8						; size = 4
_id$ = 12						; size = 4
?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z PROC NEAR ; ATL::AtlGetStringResourceImage, COMDAT

; 280  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 281  : 	HRSRC hResource;
; 282  : 
; 283  : 	hResource = ::FindResource( hInstance, MAKEINTRESOURCE( ((id>>4)+1) ), RT_STRING );

	mov	esi, esp
	push	6
	mov	ecx, DWORD PTR _id$[ebp]
	shr	ecx, 4
	add	ecx, 1
	call	@_RTC_Check_4_to_2@4
	movzx	eax, ax
	push	eax
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	DWORD PTR __imp__FindResourceW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hResource$[ebp], eax

; 284  : 	if( hResource == NULL )

	cmp	DWORD PTR _hResource$[ebp], 0
	jne	SHORT $L25769

; 285  : 	{
; 286  : 		return( NULL );

	xor	eax, eax
	jmp	SHORT $L25761
$L25769:

; 287  : 	}
; 288  : 
; 289  : 	return _AtlGetStringResourceImage( hInstance, hResource, id );

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hResource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hInstance$[ebp]
	push	edx
	call	?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ; ATL::_AtlGetStringResourceImage
	add	esp, 12					; 0000000cH
$L25761:

; 290  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z ENDP ; ATL::AtlGetStringResourceImage
_TEXT	ENDS
EXTRN	__imp__LockResource@4:NEAR
EXTRN	__imp__LoadResource@8:NEAR
EXTRN	__imp__SizeofResource@8:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT
_iIndex$ = -56						; size = 4
_hGlobal$ = -44						; size = 4
_nResourceSize$ = -32					; size = 4
_pImageEnd$ = -20					; size = 4
_pImage$ = -8						; size = 4
_hInstance$ = 8						; size = 4
_hResource$ = 12					; size = 4
_id$ = 16						; size = 4
?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z PROC NEAR ; ATL::_AtlGetStringResourceImage, COMDAT

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 240  : 	const ATLSTRINGRESOURCEIMAGE* pImage;
; 241  : 	const ATLSTRINGRESOURCEIMAGE* pImageEnd;
; 242  : 	ULONG nResourceSize;
; 243  : 	HGLOBAL hGlobal;
; 244  : 	UINT iIndex;
; 245  : 
; 246  : 	hGlobal = ::LoadResource( hInstance, hResource );

	mov	esi, esp
	mov	eax, DWORD PTR _hResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	DWORD PTR __imp__LoadResource@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hGlobal$[ebp], eax

; 247  : 	if( hGlobal == NULL )

	cmp	DWORD PTR _hGlobal$[ebp], 0
	jne	SHORT $L25746

; 248  : 	{
; 249  : 		return( NULL );

	xor	eax, eax
	jmp	$L25740
$L25746:

; 250  : 	}
; 251  : 
; 252  : 	pImage = (const ATLSTRINGRESOURCEIMAGE*)::LockResource( hGlobal );

	mov	esi, esp
	mov	eax, DWORD PTR _hGlobal$[ebp]
	push	eax
	call	DWORD PTR __imp__LockResource@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pImage$[ebp], eax

; 253  : 	if( pImage == NULL )

	cmp	DWORD PTR _pImage$[ebp], 0
	jne	SHORT $L25748

; 254  : 	{
; 255  : 		return( NULL );

	xor	eax, eax
	jmp	SHORT $L25740
$L25748:

; 256  : 	}
; 257  : 
; 258  : 	nResourceSize = ::SizeofResource( hInstance, hResource );

	mov	esi, esp
	mov	eax, DWORD PTR _hResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	DWORD PTR __imp__SizeofResource@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nResourceSize$[ebp], eax

; 259  : 	pImageEnd = (const ATLSTRINGRESOURCEIMAGE*)(LPBYTE( pImage )+nResourceSize);

	mov	eax, DWORD PTR _pImage$[ebp]
	add	eax, DWORD PTR _nResourceSize$[ebp]
	mov	DWORD PTR _pImageEnd$[ebp], eax

; 260  : 	iIndex = id&0x000f;

	mov	eax, DWORD PTR _id$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _iIndex$[ebp], eax
$L25751:

; 261  : 
; 262  : 	while( (iIndex > 0) && (pImage < pImageEnd) )

	cmp	DWORD PTR _iIndex$[ebp], 0
	jbe	SHORT $L25752
	mov	eax, DWORD PTR _pImage$[ebp]
	cmp	eax, DWORD PTR _pImageEnd$[ebp]
	jae	SHORT $L25752

; 263  : 	{
; 264  : 		pImage = (const ATLSTRINGRESOURCEIMAGE*)(LPBYTE( pImage )+(sizeof( ATLSTRINGRESOURCEIMAGE )+(pImage->nLength*sizeof( WCHAR ))));

	mov	eax, DWORD PTR _pImage$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _pImage$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+2]
	mov	DWORD PTR _pImage$[ebp], eax

; 265  : 		iIndex--;

	mov	eax, DWORD PTR _iIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _iIndex$[ebp], eax

; 266  : 	}

	jmp	SHORT $L25751
$L25752:

; 267  : 	if( pImage >= pImageEnd )

	mov	eax, DWORD PTR _pImage$[ebp]
	cmp	eax, DWORD PTR _pImageEnd$[ebp]
	jb	SHORT $L25756

; 268  : 	{
; 269  : 		return( NULL );

	xor	eax, eax
	jmp	SHORT $L25740
$L25756:

; 270  : 	}
; 271  : 	if( pImage->nLength == 0 )

	mov	eax, DWORD PTR _pImage$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $L25757

; 272  : 	{
; 273  : 		return( NULL );

	xor	eax, eax
	jmp	SHORT $L25740
$L25757:

; 274  : 	}
; 275  : 
; 276  : 	return( pImage );

	mov	eax, DWORD PTR _pImage$[ebp]
$L25740:

; 277  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ENDP ; ATL::_AtlGetStringResourceImage
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBGH@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBGH@Z PROC NEAR ; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength, COMDAT

; 671  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 672  : 		(void)pszSrc;
; 673  : 		// Returns required buffer size in wchar_ts
; 674  : 		return nLength;

	mov	eax, DWORD PTR _nLength$[ebp]

; 675  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseTypeLength@?$ChTraitsCRT@G@ATL@@SAHPBGH@Z ENDP	; ATL::ChTraitsCRT<unsigned short>::GetBaseTypeLength
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBGH@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_nDestLength$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nSrcLength$ = 20					; size = 4
?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBGH@Z PROC NEAR ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType, COMDAT

; 686  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 687  : 		(void)nSrcLength;
; 688  : 		// nLen is in wchar_ts
; 689  : 		memcpy( pszDest, pszSrc, nDestLength*sizeof( wchar_t ) );

	mov	eax, DWORD PTR _nDestLength$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 690  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ConvertToBaseType@?$ChTraitsCRT@G@ATL@@SAXPAGHPBGH@Z ENDP ; ATL::ChTraitsCRT<unsigned short>::ConvertToBaseType
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 210  : 	explicit CSimpleStringT( IAtlStringMgr* pStringMgr ) throw()

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 	{
; 212  : 		ATLASSERT( pStringMgr != NULL );

	cmp	DWORD PTR _pStringMgr$[ebp], 0
	jne	SHORT $L93839
	push	OFFSET FLAT:??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
	push	0
	push	212					; 000000d4H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93839
	int	3
$L93839:

; 213  : 		CStringData* pData = pStringMgr->GetNilString();

	mov	eax, DWORD PTR _pStringMgr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [edx+12]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pData$[ebp], eax

; 214  : 		Attach( pData );

	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach

; 215  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_pNewData$ = -32					; size = 4
_pSrcData$ = -20					; size = 4
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 217  : 	CSimpleStringT( const CSimpleStringT& strSrc )

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	{
; 219  : 		CStringData* pSrcData = strSrc.GetData();

	mov	ecx, DWORD PTR _strSrc$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pSrcData$[ebp], eax

; 220  : 		CStringData* pNewData = CloneData( pSrcData );

	mov	eax, DWORD PTR _pSrcData$[ebp]
	push	eax
	call	?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<unsigned short,0>::CloneData
	add	esp, 4
	mov	DWORD PTR _pNewData$[ebp], eax

; 221  : 		Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach

; 222  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CSimpleStringT@G$0A@@ATL@@QAE@ABV01@@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::CSimpleStringT<unsigned short,0>
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>, COMDAT
; _this$ = ecx

; 262  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 		CStringData* pData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pData$[ebp], eax

; 264  : 		pData->Release();

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 265  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleStringT@G$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<unsigned short,0>::~CSimpleStringT<unsigned short,0>
_TEXT	ENDS
PUBLIC	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::operator=, COMDAT
; _this$ = ecx

; 315  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 		SetString( pszSrc );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString

; 317  : 
; 318  : 		return( *this );

	mov	eax, DWORD PTR _this$[ebp]

; 319  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CSimpleStringT@G$0A@@ATL@@QAEAAV01@PBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::operator=
_TEXT	ENDS
PUBLIC	?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nMinBufferLength$ = 8					; size = 4
?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer, COMDAT
; _this$ = ecx

; 489  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 490  : 		return( PrepareWrite( nMinBufferLength ) );

	mov	eax, DWORD PTR _nMinBufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite

; 491  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
_TEXT	ENDS
EXTRN	_wcslen:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::StringLength, COMDAT

; 685  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 686  : 		if( psz == NULL )

	cmp	DWORD PTR _psz$[ebp], 0
	jne	SHORT $L92752

; 687  : 		{
; 688  : 			return( 0 );

	xor	eax, eax
	jmp	SHORT $L92751
$L92752:

; 689  : 		}
; 690  : 		return( int( wcslen( psz ) ) );

	mov	eax, DWORD PTR _psz$[ebp]
	push	eax
	call	_wcslen
	add	esp, 4
$L92751:

; 691  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::StringLength
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetData, COMDAT
; _this$ = ecx

; 730  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 16					; 00000010H

; 732  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<unsigned short,0>::GetData
_TEXT	ENDS
PUBLIC	?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z
_TEXT	SEGMENT
_nTooShort$ = -44					; size = 4
_nShared$ = -32						; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite, COMDAT
; _this$ = ecx

; 734  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 735  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 736  : 		int nShared = 1-pOldData->nRefs;  // nShared < 0 means true, >= 0 means false

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nShared$[ebp], ecx

; 737  : 		int nTooShort = pOldData->nAllocLength-nLength;  // nTooShort < 0 means true, >= 0 means false

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR _nTooShort$[ebp], ecx

; 738  : 		if( (nShared|nTooShort) < 0 )  // If either sign bit is set (i.e. either is less than zero), we need to copy data

	mov	eax, DWORD PTR _nShared$[ebp]
	or	eax, DWORD PTR _nTooShort$[ebp]
	jge	SHORT $L92761

; 739  : 		{
; 740  : 			PrepareWrite2( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2
$L92761:

; 741  : 		}
; 742  : 
; 743  : 		return( m_pszData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 744  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PrepareWrite@?$CSimpleStringT@G$0A@@ATL@@AAEPAGH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite
_TEXT	ENDS
PUBLIC	??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@	; `string'
PUBLIC	??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@ ; `string'
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@ DB 'nLength >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT
??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@ DB 'n'
	DB	'Length <= GetData()->nAllocLength', 00H	; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::SetLength, COMDAT
; _this$ = ecx

; 789  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 790  : 		ATLASSERT( nLength >= 0 );

	cmp	DWORD PTR _nLength$[ebp], 0
	jge	SHORT $L93856
	push	OFFSET FLAT:??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
	push	0
	push	790					; 00000316H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93856
	int	3
$L93856:

; 791  : 		ATLASSERT( nLength <= GetData()->nAllocLength );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	ecx, DWORD PTR _nLength$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $L93857
	push	OFFSET FLAT:??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
	push	0
	push	791					; 00000317H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93857
	int	3
$L93857:

; 792  : 
; 793  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

	cmp	DWORD PTR _nLength$[ebp], 0
	jl	SHORT $L92769
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	ecx, DWORD PTR _nLength$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $L92768
$L92769:

; 794  : 			AtlThrow(E_INVALIDARG);

	push	-2147024809				; 80070057H
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L92768:

; 795  : 			
; 796  : 		GetData()->nDataLength = nLength;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	ecx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 797  : 		m_pszData[nLength] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nLength$[ebp]
	mov	WORD PTR [ecx+edx*2], 0
$L93855:

; 798  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::SetLength
_TEXT	ENDS
EXTRN	?AfxFindStringResourceHandle@@YGPAUHINSTANCE__@@I@Z:NEAR ; AfxFindStringResourceHandle
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afxstr.h
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT
_nID$ = 8						; size = 4
?FindStringResourceInstance@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUHINSTANCE__@@I@Z PROC NEAR ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::FindStringResourceInstance, COMDAT

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 45   : 		return( AfxFindStringResourceHandle( nID ) );

	mov	eax, DWORD PTR _nID$[ebp]
	push	eax
	call	?AfxFindStringResourceHandle@@YGPAUHINSTANCE__@@I@Z ; AfxFindStringResourceHandle

; 46   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?FindStringResourceInstance@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUHINSTANCE__@@I@Z ENDP ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::FindStringResourceInstance
_TEXT	ENDS
EXTRN	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ:NEAR ; AfxGetStringManager
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ PROC NEAR ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager, COMDAT

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 50   : 		return( AfxGetStringManager() );

	call	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager

; 51   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefaultManager@?$StrTraitMFC@GV?$ChTraitsCRT@G@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ENDP ; StrTraitMFC<unsigned short,ATL::ChTraitsCRT<unsigned short> >::GetDefaultManager
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT
_pNewData$92796 = -44					; size = 4
_pStringMgr$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::Empty, COMDAT
; _this$ = ecx

; 421  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 423  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pStringMgr$[ebp], ecx

; 424  : 		if( pOldData->nDataLength == 0 )

	mov	eax, DWORD PTR _pOldData$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L92793

; 425  : 		{
; 426  : 			return;

	jmp	SHORT $L92790
$L92793:

; 427  : 		}
; 428  : 
; 429  : 		if( pOldData->IsLocked() )

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?IsLocked@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsLocked
	movzx	eax, al
	test	eax, eax
	je	SHORT $L92794

; 430  : 		{
; 431  : 			// Don't reallocate a locked buffer that's shrinking
; 432  : 			SetLength( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetLength

; 433  : 		}
; 434  : 		else

	jmp	SHORT $L92790
$L92794:

; 435  : 		{
; 436  : 			pOldData->Release();

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 437  : 			CStringData* pNewData = pStringMgr->GetNilString();

	mov	eax, DWORD PTR _pStringMgr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [edx+12]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$92796[ebp], eax

; 438  : 			Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$92796[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L92790:

; 439  : 		}
; 440  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ ENDP		; ATL::CSimpleStringT<unsigned short,0>::Empty
_TEXT	ENDS
PUBLIC	??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@	; `string'
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@ DB 'nNewLength >= 0', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nNewLength$ = 8					; size = 4
?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength, COMDAT
; _this$ = ecx

; 546  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 547  : 		ATLASSERT( nNewLength >= 0 );

	cmp	DWORD PTR _nNewLength$[ebp], 0
	jge	SHORT $L93866
	push	OFFSET FLAT:??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
	push	0
	push	547					; 00000223H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93866
	int	3
$L93866:

; 548  : 		SetLength( nNewLength );

	mov	eax, DWORD PTR _nNewLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLength@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetLength

; 549  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::SetString, COMDAT
; _this$ = ecx

; 579  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 580  : 		SetString( pszSrc, StringLength( pszSrc ) );

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	call	?StringLength@?$CSimpleStringT@G$0A@@ATL@@SAHPBG@Z ; ATL::CSimpleStringT<unsigned short,0>::StringLength
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::SetString

; 581  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBG@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::SetString
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Attach, COMDAT
; _this$ = ecx

; 711  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 713  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::Attach
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (this+1);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
PUBLIC	?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<unsigned short,0>::Reallocate
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nNewLength$92813 = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2, COMDAT
; _this$ = ecx

; 746  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 748  : 		if( pOldData->nDataLength > nLength )

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _nLength$[ebp]
	jle	SHORT $L92809

; 749  : 		{
; 750  : 			nLength = pOldData->nDataLength;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nLength$[ebp], ecx
$L92809:

; 751  : 		}
; 752  : 		if( pOldData->IsShared() )

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?IsShared@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsShared
	movzx	eax, al
	test	eax, eax
	je	SHORT $L92810

; 753  : 		{
; 754  : 			Fork( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::Fork

; 755  : 		}
; 756  : 		else if( pOldData->nAllocLength < nLength )

	jmp	SHORT $L92807
$L92810:
	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _nLength$[ebp]
	jge	SHORT $L92807

; 757  : 		{
; 758  : 			// Grow exponentially, until we hit 1K.
; 759  : 			int nNewLength = pOldData->nAllocLength;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nNewLength$92813[ebp], ecx

; 760  : 			if( nNewLength > 1024 )

	cmp	DWORD PTR _nNewLength$92813[ebp], 1024	; 00000400H
	jle	SHORT $L92814

; 761  : 			{
; 762  : 				nNewLength += 1024;

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	add	eax, 1024				; 00000400H
	mov	DWORD PTR _nNewLength$92813[ebp], eax

; 763  : 			}
; 764  : 			else

	jmp	SHORT $L92815
$L92814:

; 765  : 			{
; 766  : 				nNewLength *= 2;

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	shl	eax, 1
	mov	DWORD PTR _nNewLength$92813[ebp], eax
$L92815:

; 767  : 			}
; 768  : 			if( nNewLength < nLength )

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	cmp	eax, DWORD PTR _nLength$[ebp]
	jge	SHORT $L92816

; 769  : 			{
; 770  : 				nNewLength = nLength;

	mov	eax, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR _nNewLength$92813[ebp], eax
$L92816:

; 771  : 			}
; 772  : 			Reallocate( nNewLength );

	mov	eax, DWORD PTR _nNewLength$92813[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::Reallocate
$L92807:

; 773  : 		}
; 774  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PrepareWrite2@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::PrepareWrite2
_TEXT	ENDS
PUBLIC	?AddRef@CStringData@ATL@@QAEXXZ			; ATL::CStringData::AddRef
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT
_pNewStringMgr$ = -20					; size = 4
_pNewData$ = -8						; size = 4
_pData$ = 8						; size = 4
?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CloneData, COMDAT

; 801  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 802  : 		CStringData* pNewData = NULL;

	mov	DWORD PTR _pNewData$[ebp], 0

; 803  : 
; 804  : 		IAtlStringMgr* pNewStringMgr = pData->pStringMgr->Clone();

	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR [edx+16]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewStringMgr$[ebp], eax

; 805  : 		if( !pData->IsLocked() && (pNewStringMgr == pData->pStringMgr) )

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?IsLocked@CStringData@ATL@@QBE_NXZ	; ATL::CStringData::IsLocked
	movzx	eax, al
	test	eax, eax
	jne	SHORT $L92820
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR _pNewStringMgr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $L92820

; 806  : 		{
; 807  : 			pNewData = pData;

	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pNewData$[ebp], eax

; 808  : 			pNewData->AddRef();

	mov	ecx, DWORD PTR _pNewData$[ebp]
	call	?AddRef@CStringData@ATL@@QAEXXZ		; ATL::CStringData::AddRef

; 809  : 		}
; 810  : 		else

	jmp	SHORT $L92821
$L92820:

; 811  : 		{
; 812  : 			pNewData = pNewStringMgr->Allocate( pData->nDataLength, sizeof( XCHAR ) );

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pNewStringMgr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pNewStringMgr$[ebp]
	call	DWORD PTR [eax]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$[ebp], eax

; 813  : 			if( pNewData == NULL )

	cmp	DWORD PTR _pNewData$[ebp], 0
	jne	SHORT $L92823

; 814  : 			{
; 815  : 				ThrowMemoryException();

	call	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
$L92823:

; 816  : 			}
; 817  : 			pNewData->nDataLength = pData->nDataLength;

	mov	eax, DWORD PTR _pNewData$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 818  : 			CopyChars( PXSTR( pNewData->data() ), PCXSTR( pData->data() ), pData->nDataLength+1 );  // Copy '\0'

	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _pData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	mov	ecx, DWORD PTR _pNewData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH
$L92821:

; 819  : 		}
; 820  : 
; 821  : 		return( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
$L93876:

; 822  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CloneData@?$CSimpleStringT@G$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CloneData
_TEXT	ENDS
PUBLIC	??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@		; `string'
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@ DB 'nRefs > 0', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AddRef@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::AddRef, COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		ATLASSERT(nRefs > 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jg	SHORT $L93879
	push	OFFSET FLAT:??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
	push	0
	push	71					; 00000047H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93879
	int	3
$L93879:

; 72   : 		_InterlockedIncrement(&nRefs);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, 1
	lock	 xadd	 DWORD PTR [eax], ecx

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AddRef@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::AddRef
_TEXT	ENDS
PUBLIC	?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z
_TEXT	SEGMENT
_pszBuffer$92832 = -44					; size = 4
_nOffset$92831 = -32					; size = 4
_nOldLength$92830 = -20					; size = 4
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::SetString, COMDAT
; _this$ = ecx

; 583  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 584  : 		if( nLength == 0 )

	cmp	DWORD PTR _nLength$[ebp], 0
	jne	SHORT $L92826

; 585  : 		{
; 586  : 			Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CSimpleStringT@G$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<unsigned short,0>::Empty

; 587  : 		}
; 588  : 		else

	jmp	$L93881
$L92826:

; 589  : 		{
; 590  : 			// It is possible that pszSrc points to a location inside of our 
; 591  : 			// buffer.  GetBuffer() might change m_pszData if (1) the buffer 
; 592  : 			// is shared or (2) the buffer is too small to hold the new 
; 593  : 			// string.  We detect this aliasing, and modify pszSrc to point
; 594  : 			// into the newly allocated buffer instead.
; 595  : 			
; 596  : 			if(pszSrc == NULL)

	cmp	DWORD PTR _pszSrc$[ebp], 0
	jne	SHORT $L92828

; 597  : 				AtlThrow(E_INVALIDARG);			

	push	-2147024809				; 80070057H
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L92828:

; 598  : 				
; 599  : 			UINT nOldLength = GetLength();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLength@?$CSimpleStringT@G$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<unsigned short,0>::GetLength
	mov	DWORD PTR _nOldLength$92830[ebp], eax

; 600  : 			UINT_PTR nOffset = pszSrc-GetString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ; ATL::CSimpleStringT<unsigned short,0>::GetString
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	sub	ecx, eax
	sar	ecx, 1
	mov	DWORD PTR _nOffset$92831[ebp], ecx

; 601  : 			// If 0 <= nOffset <= nOldLength, then pszSrc points into our 
; 602  : 			// buffer
; 603  : 
; 604  : 			PXSTR pszBuffer = GetBuffer( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBuffer@?$CSimpleStringT@G$0A@@ATL@@QAEPAGH@Z ; ATL::CSimpleStringT<unsigned short,0>::GetBuffer
	mov	DWORD PTR _pszBuffer$92832[ebp], eax

; 605  : 			if( nOffset <= nOldLength )

	mov	eax, DWORD PTR _nOffset$92831[ebp]
	cmp	eax, DWORD PTR _nOldLength$92830[ebp]
	ja	SHORT $L92833

; 606  : 			{
; 607  : 				CopyCharsOverlapped( pszBuffer, pszBuffer+nOffset, nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nOffset$92831[ebp]
	mov	edx, DWORD PTR _pszBuffer$92832[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _pszBuffer$92832[ebp]
	push	ecx
	call	?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped
	add	esp, 12					; 0000000cH

; 608  : 			}
; 609  : 			else

	jmp	SHORT $L92834
$L92833:

; 610  : 			{
; 611  : 				CopyChars( pszBuffer, pszSrc, nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszBuffer$92832[ebp]
	push	edx
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH
$L92834:

; 612  : 			}
; 613  : 			ReleaseBufferSetLength( nLength );

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseBufferSetLength@?$CSimpleStringT@G$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<unsigned short,0>::ReleaseBufferSetLength
$L93881:

; 614  : 		}
; 615  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetString@?$CSimpleStringT@G$0A@@ATL@@QAEXPBGH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::SetString
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CopyChars, COMDAT

; 652  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 653  : 		memcpy( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

	mov	eax, DWORD PTR _nChars$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pchSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pchDest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 654  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ
_TEXT	SEGMENT
?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException, COMDAT

; 704  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 705  : 		AtlThrow( E_OUTOFMEMORY );

	push	-2147024882				; 8007000eH
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L93885:

; 706  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ENDP ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
tv82 = -256						; size = 4
tv74 = -256						; size = 4
_nCharsToCopy$ = -56					; size = 4
_pNewData$ = -44					; size = 4
_nOldLength$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR	; ATL::CSimpleStringT<unsigned short,0>::Fork, COMDAT
; _this$ = ecx

; 715  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 716  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 717  : 		int nOldLength = pOldData->nDataLength;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldLength$[ebp], ecx

; 718  : 		CStringData* pNewData = pOldData->pStringMgr->Clone()->Allocate( nLength, sizeof( XCHAR ) );

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pOldData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR [edx+16]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv74[ebp]
	call	DWORD PTR [edx]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$[ebp], eax

; 719  : 		if( pNewData == NULL )

	cmp	DWORD PTR _pNewData$[ebp], 0
	jne	SHORT $L92845

; 720  : 		{
; 721  : 			ThrowMemoryException();

	call	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
$L92845:

; 722  : 		}
; 723  : 		int nCharsToCopy = ((nOldLength < nLength) ? nOldLength : nLength)+1;  // Copy '\0'

	mov	eax, DWORD PTR _nOldLength$[ebp]
	cmp	eax, DWORD PTR _nLength$[ebp]
	jge	SHORT $L93888
	mov	ecx, DWORD PTR _nOldLength$[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $L93889
$L93888:
	mov	edx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR tv82[ebp], edx
$L93889:
	mov	eax, DWORD PTR tv82[ebp]
	add	eax, 1
	mov	DWORD PTR _nCharsToCopy$[ebp], eax

; 724  : 		CopyChars( PXSTR( pNewData->data() ), PCXSTR( pOldData->data() ), nCharsToCopy );

	mov	eax, DWORD PTR _nCharsToCopy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	mov	ecx, DWORD PTR _pNewData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	push	eax
	call	?CopyChars@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ; ATL::CSimpleStringT<unsigned short,0>::CopyChars
	add	esp, 12					; 0000000cH

; 725  : 		pNewData->nDataLength = nOldLength;

	mov	eax, DWORD PTR _pNewData$[ebp]
	mov	ecx, DWORD PTR _nOldLength$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 726  : 		pOldData->Release();

	mov	ecx, DWORD PTR _pOldData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 727  : 		Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L93887:

; 728  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Fork@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP		; ATL::CSimpleStringT<unsigned short,0>::Fork
_TEXT	ENDS
PUBLIC	??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@ ; `string'
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT
??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@ DB 'pOldDat'
	DB	'a->nAllocLength < nLength', 00H		; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_pNewData$ = -44					; size = 4
_pStringMgr$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::Reallocate, COMDAT
; _this$ = ecx

; 776  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		CStringData* pOldData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@G$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<unsigned short,0>::GetData
	mov	DWORD PTR _pOldData$[ebp], eax

; 778  : 		ATLASSERT( pOldData->nAllocLength < nLength );

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _nLength$[ebp]
	jl	SHORT $L93892
	push	OFFSET FLAT:??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
	push	0
	push	778					; 0000030aH
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93892
	int	3
$L93892:

; 779  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;

	mov	eax, DWORD PTR _pOldData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pStringMgr$[ebp], ecx

; 780  : 		CStringData* pNewData = pStringMgr->Reallocate( pOldData, nLength, sizeof( XCHAR ) );

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOldData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pStringMgr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [eax+8]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewData$[ebp], eax

; 781  : 		if( pNewData == NULL )

	cmp	DWORD PTR _pNewData$[ebp], 0
	jne	SHORT $L92855

; 782  : 		{
; 783  : 			ThrowMemoryException();

	call	?ThrowMemoryException@?$CSimpleStringT@G$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<unsigned short,0>::ThrowMemoryException
$L92855:

; 784  : 		}
; 785  : 		Attach( pNewData );

	mov	eax, DWORD PTR _pNewData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@G$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<unsigned short,0>::Attach
$L93891:

; 786  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reallocate@?$CSimpleStringT@G$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<unsigned short,0>::Reallocate
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::GetString, COMDAT
; _this$ = ecx

; 509  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		return( m_pszData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 511  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetString@?$CSimpleStringT@G$0A@@ATL@@QBEPBGXZ ENDP	; ATL::CSimpleStringT<unsigned short,0>::GetString
_TEXT	ENDS
EXTRN	_memmove:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z PROC NEAR ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped, COMDAT

; 656  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 657  : 		memmove( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

	mov	eax, DWORD PTR _nChars$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pchSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pchDest$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 658  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CopyCharsOverlapped@?$CSimpleStringT@G$0A@@ATL@@SAXPAGPBGH@Z ENDP ; ATL::CSimpleStringT<unsigned short,0>::CopyCharsOverlapped
_TEXT	ENDS
END
