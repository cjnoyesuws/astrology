; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\Textbary.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_02BKFDOEMK@wt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BMJICGCB@rt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRSymbol@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSymbolAry@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSymbolAry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECSymbol@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECRSymbol@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTextBlock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTextBlock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IDstring@CTextBlock@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CTextBlockCmp@@YAHPBX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CTextBlockAry@@QAEHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CTextBlockAry@@QAEHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__LINE__Var@?1??AtlThrow@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FC@IPKABFFL@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRSymbol@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSymbol@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?charsize@@3HA					; charsize
_DATA	SEGMENT
?charsize@@3HA DD 01H					; charsize
_DATA	ENDS
PUBLIC	??1CSymbol@@QAE@XZ				; CSymbol::~CSymbol
PUBLIC	??_ECSymbol@@QAEPAXI@Z				; CSymbol::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCcsu /ZI
rtc$TMZ	ENDS
;	COMDAT ??_ECSymbol@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ECSymbol@@QAEPAXI@Z PROC NEAR			; CSymbol::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $L93113
	push	OFFSET FLAT:??1CSymbol@@QAE@XZ		; CSymbol::~CSymbol
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	164					; 000000a4H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93114
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L93114:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $L93112
$L93113:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSymbol@@QAE@XZ			; CSymbol::~CSymbol
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93116
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93116:
	mov	eax, DWORD PTR _this$[ebp]
$L93112:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECSymbol@@QAEPAXI@Z ENDP				; CSymbol::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7CSymbol@@6B@				; CSymbol::`vftable'
EXTRN	?Read@CSymbol@@UAEHPAU_iobuf@@@Z:NEAR		; CSymbol::Read
;	COMDAT ??_7CSymbol@@6B@
; File c:\astrow32dev\tbt32\symbol.hpp
CONST	SEGMENT
??_7CSymbol@@6B@ DD FLAT:?Read@CSymbol@@UAEHPAU_iobuf@@@Z ; CSymbol::`vftable'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??1CSymbol@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CSymbol@@QAE@XZ PROC NEAR				; CSymbol::~CSymbol, COMDAT
; _this$ = ecx

; 14   : 	~CSymbol() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CSymbol@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSymbol@@QAE@XZ ENDP					; CSymbol::~CSymbol
_TEXT	ENDS
PUBLIC	??1CRSymbol@@QAE@XZ				; CRSymbol::~CRSymbol
PUBLIC	??_ECRSymbol@@QAEPAXI@Z				; CRSymbol::`vector deleting destructor'
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??_ECRSymbol@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ECRSymbol@@QAEPAXI@Z PROC NEAR			; CRSymbol::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $L93164
	push	OFFSET FLAT:??1CRSymbol@@QAE@XZ		; CRSymbol::~CRSymbol
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	164					; 000000a4H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93165
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L93165:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $L93163
$L93164:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CRSymbol@@QAE@XZ			; CRSymbol::~CRSymbol
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93167
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93167:
	mov	eax, DWORD PTR _this$[ebp]
$L93163:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECRSymbol@@QAEPAXI@Z ENDP				; CRSymbol::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7CRSymbol@@6B@				; CRSymbol::`vftable'
EXTRN	?Read@CRSymbol@@UAEHPAU_iobuf@@@Z:NEAR		; CRSymbol::Read
;	COMDAT ??_7CRSymbol@@6B@
CONST	SEGMENT
??_7CRSymbol@@6B@ DD FLAT:?Read@CRSymbol@@UAEHPAU_iobuf@@@Z ; CRSymbol::`vftable'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??1CRSymbol@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CRSymbol@@QAE@XZ PROC NEAR				; CRSymbol::~CRSymbol, COMDAT
; _this$ = ecx

; 28   : 	~CRSymbol() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CRSymbol@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSymbol@@QAE@XZ			; CSymbol::~CSymbol
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CRSymbol@@QAE@XZ ENDP				; CRSymbol::~CRSymbol
_TEXT	ENDS
PUBLIC	??_ECTextBlock@@QAEPAXI@Z			; CTextBlock::`vector deleting destructor'
PUBLIC	??1CTextBlock@@QAE@XZ				; CTextBlock::~CTextBlock
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??_ECTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ECTextBlock@@QAEPAXI@Z PROC NEAR			; CTextBlock::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $L93320
	push	OFFSET FLAT:??1CTextBlock@@QAE@XZ	; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	144					; 00000090H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93321
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L93321:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $L93319
$L93320:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93323
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93323:
	mov	eax, DWORD PTR _this$[ebp]
$L93319:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECTextBlock@@QAEPAXI@Z ENDP				; CTextBlock::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbloc.hpp
;	COMDAT ??1CTextBlock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CTextBlock@@QAE@XZ PROC NEAR				; CTextBlock::~CTextBlock, COMDAT
; _this$ = ecx

; 9    :    ~CTextBlock() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTextBlock@@QAE@XZ ENDP				; CTextBlock::~CTextBlock
_TEXT	ENDS
PUBLIC	?CTextBlockCmp@@YAHPBX0@Z			; CTextBlockCmp
PUBLIC	?IDstring@CTextBlock@@QAEPADXZ			; CTextBlock::IDstring
EXTRN	_strcmp:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbary.cpp
;	COMDAT ?CTextBlockCmp@@YAHPBX0@Z
_TEXT	SEGMENT
_t2$ = -20						; size = 4
_t1$ = -8						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
?CTextBlockCmp@@YAHPBX0@Z PROC NEAR			; CTextBlockCmp, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13   :  CTextBlock **t1, **t2;
; 14   : 
; 15   :  t1 =(CTextBlock **) p1;

	mov	eax, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _t1$[ebp], eax

; 16   :  t2 =(CTextBlock **) p2;

	mov	eax, DWORD PTR _p2$[ebp]
	mov	DWORD PTR _t2$[ebp], eax

; 17   :  return( strcmp( (*t1)->IDstring(), (*t2)->IDstring() ) );

	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IDstring@CTextBlock@@QAEPADXZ		; CTextBlock::IDstring
	push	eax
	mov	ecx, DWORD PTR _t1$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?IDstring@CTextBlock@@QAEPADXZ		; CTextBlock::IDstring
	push	eax
	call	_strcmp
	add	esp, 8

; 18   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CTextBlockCmp@@YAHPBX0@Z ENDP				; CTextBlockCmp
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbloc.hpp
_TEXT	ENDS
;	COMDAT ?IDstring@CTextBlock@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IDstring@CTextBlock@@QAEPADXZ PROC NEAR		; CTextBlock::IDstring, COMDAT
; _this$ = ecx

; 11   :    char *IDstring() { return _IDstring; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IDstring@CTextBlock@@QAEPADXZ ENDP			; CTextBlock::IDstring
_TEXT	ENDS
PUBLIC	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z	; CTextBlockAry::Find
EXTRN	_lfind:NEAR
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbary.cpp
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z
_TEXT	SEGMENT
_ptb$ = -20						; size = 4
_this$ = -8						; size = 4
_b$ = 8							; size = 4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z PROC NEAR ; CTextBlockAry::Find, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 24   :  CTextBlock **ptb;
; 25   :                         
; 26   :  ptb = (CTextBlock **) lfind( &b, _array, (unsigned *)&_nElements,
; 27   : 	    sizeof(CTextBlock *), CTextBlockCmp );

	push	OFFSET FLAT:?CTextBlockCmp@@YAHPBX0@Z	; CTextBlockCmp
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_lfind
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ptb$[ebp], eax

; 28   :  if ( ptb == NULL )

	cmp	DWORD PTR _ptb$[ebp], 0
	jne	SHORT $L93361

; 29   :     return( NULL );

	xor	eax, eax
	jmp	SHORT $L93356
$L93361:

; 30   :  else
; 31   :     return( *ptb );

	mov	eax, DWORD PTR _ptb$[ebp]
	mov	eax, DWORD PTR [eax]
$L93356:

; 32   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z ENDP	; CTextBlockAry::Find
_TEXT	ENDS
PUBLIC	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z	; CTextBlockAry::Find
PUBLIC	??0CTextBlock@@QAE@XZ				; CTextBlock::CTextBlock
EXTRN	?SetID@CTextBlock@@QAEHPADH@Z:NEAR		; CTextBlock::SetID
EXTRN	__except_list:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z$0
__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
_TEXT	SEGMENT
$T93576 = -380						; size = 4
_tb$ = -176						; size = 144
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_id$ = 8						; size = 4
_n$ = 12						; size = 4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z PROC NEAR	; CTextBlockAry::Find, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 37   :  CTextBlock tb;

	lea	ecx, DWORD PTR _tb$[ebp]
	call	??0CTextBlock@@QAE@XZ			; CTextBlock::CTextBlock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 38   : 
; 39   :  tb.SetID( id, n );

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tb$[ebp]
	call	?SetID@CTextBlock@@QAEHPADH@Z		; CTextBlock::SetID

; 40   :  return( Find( &tb ) );

	lea	eax, DWORD PTR _tb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z ; CTextBlockAry::Find
	mov	DWORD PTR $T93576[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tb$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR $T93576[ebp]

; 41   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93588
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93588:
	DD	1
	DD	$L93587
$L93587:
	DD	-176					; ffffff50H
	DD	144					; 00000090H
	DD	$L93582
$L93582:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z$0:
	lea	ecx, DWORD PTR _tb$[ebp]
	jmp	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PADH@Z ENDP	; CTextBlockAry::Find
PUBLIC	??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\astrow32dev\tbt32\textbloc.hpp
;	COMDAT ??0CTextBlock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CTextBlock@@QAE@XZ PROC NEAR				; CTextBlock::CTextBlock, COMDAT
; _this$ = ecx

; 8    :    CTextBlock() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTextBlock@@QAE@XZ ENDP				; CTextBlock::CTextBlock
_TEXT	ENDS
PUBLIC	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z	; CTextBlockAry::Find
EXTRN	?SetID@CTextBlock@@QAEHPAD0@Z:NEAR		; CTextBlock::SetID
;	COMDAT xdata$x
; File c:\astrow32dev\tbt32\textbary.cpp
xdata$x	SEGMENT
__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z$0
__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
_TEXT	SEGMENT
$T93601 = -380						; size = 4
_tb$ = -176						; size = 144
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_id1$ = 8						; size = 4
_id2$ = 12						; size = 4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z PROC NEAR	; CTextBlockAry::Find, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 45   :  CTextBlock tb;

	lea	ecx, DWORD PTR _tb$[ebp]
	call	??0CTextBlock@@QAE@XZ			; CTextBlock::CTextBlock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 46   : 
; 47   :  tb.SetID( id1, id2 );

	mov	eax, DWORD PTR _id2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id1$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tb$[ebp]
	call	?SetID@CTextBlock@@QAEHPAD0@Z		; CTextBlock::SetID

; 48   :  return( Find( &tb ) );

	lea	eax, DWORD PTR _tb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z ; CTextBlockAry::Find
	mov	DWORD PTR $T93601[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tb$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR $T93601[ebp]

; 49   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93609
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93609:
	DD	1
	DD	$L93608
$L93608:
	DD	-176					; ffffff50H
	DD	144					; 00000090H
	DD	$L93605
$L93605:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z$0:
	lea	ecx, DWORD PTR _tb$[ebp]
	jmp	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD0@Z ENDP	; CTextBlockAry::Find
PUBLIC	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z	; CTextBlockAry::Find
EXTRN	?SetID@CTextBlock@@QAEHPAD00@Z:NEAR		; CTextBlock::SetID
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z$0
__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
_TEXT	SEGMENT
$T93616 = -380						; size = 4
_tb$ = -176						; size = 144
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_id1$ = 8						; size = 4
_id2$ = 12						; size = 4
_id3$ = 16						; size = 4
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z PROC NEAR ; CTextBlockAry::Find, COMDAT
; _this$ = ecx

; 52   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 53   :  CTextBlock tb;

	lea	ecx, DWORD PTR _tb$[ebp]
	call	??0CTextBlock@@QAE@XZ			; CTextBlock::CTextBlock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 54   : 
; 55   :  tb.SetID( id1, id2, id3 );

	mov	eax, DWORD PTR _id3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id1$[ebp]
	push	edx
	lea	ecx, DWORD PTR _tb$[ebp]
	call	?SetID@CTextBlock@@QAEHPAD00@Z		; CTextBlock::SetID

; 56   :  return( Find( &tb ) );

	lea	eax, DWORD PTR _tb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAV2@@Z ; CTextBlockAry::Find
	mov	DWORD PTR $T93616[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tb$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR $T93616[ebp]

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93624
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L93624:
	DD	1
	DD	$L93623
$L93623:
	DD	-176					; ffffff50H
	DD	144					; 00000090H
	DD	$L93620
$L93620:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z$0:
	lea	ecx, DWORD PTR _tb$[ebp]
	jmp	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
__ehhandler$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?Find@CTextBlockAry@@QAEPAVCTextBlock@@PAD00@Z ENDP	; CTextBlockAry::Find
PUBLIC	?Save@CTextBlockAry@@QAEHPAD@Z			; CTextBlockAry::Save
PUBLIC	??_C@_02BKFDOEMK@wt?$AA@			; `string'
EXTRN	_fopen:NEAR
EXTRN	?WriteHeader@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR	; CTextBlock::WriteHeader
EXTRN	?WriteHeaderR@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR ; CTextBlock::WriteHeaderR
EXTRN	?setupBuf@@YAXH@Z:NEAR				; setupBuf
EXTRN	?do_error@@YAXPBD@Z:NEAR			; do_error
EXTRN	_fclose:NEAR
EXTRN	?WriteText@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR	; CTextBlock::WriteText
;	COMDAT ??_C@_02BKFDOEMK@wt?$AA@
CONST	SEGMENT
??_C@_02BKFDOEMK@wt?$AA@ DB 'wt', 00H			; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Save@CTextBlockAry@@QAEHPAD@Z
_TEXT	SEGMENT
_p$ = -44						; size = 4
_stream$ = -32						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_name$ = 8						; size = 4
?Save@CTextBlockAry@@QAEHPAD@Z PROC NEAR		; CTextBlockAry::Save, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   :  int i;
; 63   :  FILE *stream;
; 64   :  CTextBlock *p;
; 65   : 
; 66   :  if ( ( stream = fopen( name, "wt" ) ) == NULL ) {

	push	OFFSET FLAT:??_C@_02BKFDOEMK@wt?$AA@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], eax
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $L93392

; 67   :     do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 68   :     return( 0 );

	xor	eax, eax
	jmp	$L93388
$L93392:

; 69   :     }
; 70   :  setupBuf(1);

	push	1
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 71   :  for ( i = 0, p = _array; i < _nElements; i++, p++ ) {

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $L93394
$L93395:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 144				; 00000090H
	mov	DWORD PTR _p$[ebp], ecx
$L93394:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $L93396

; 72   :      if ( _type == 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $L93397

; 73   : 	    p->WriteHeaderR( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?WriteHeaderR@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::WriteHeaderR

; 74   :      else

	jmp	SHORT $L93398
$L93397:

; 75   : 	    p->WriteHeader( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?WriteHeader@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::WriteHeader
$L93398:

; 76   :      p->WriteText( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?WriteText@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::WriteText

; 77   :      }

	jmp	SHORT $L93395
$L93396:

; 78   :  fclose( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 79   :  setupBuf(0);

	push	0
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 80   :  return( 1 );

	mov	eax, 1
$L93388:

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Save@CTextBlockAry@@QAEHPAD@Z ENDP			; CTextBlockAry::Save
_TEXT	ENDS
PUBLIC	??_GCTextBlock@@QAEPAXI@Z			; CTextBlock::`scalar deleting destructor'
PUBLIC	?Load@CTextBlockAry@@QAEHPADH@Z			; CTextBlockAry::Load
PUBLIC	??_C@_02BMJICGCB@rt?$AA@			; `string'
EXTRN	?ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z:NEAR	; CTextBlock::ReadText
EXTRN	_fgetc:NEAR
EXTRN	?ReadHeader@CTextBlock@@QAEHPAU_iobuf@@PAHPAD@Z:NEAR ; CTextBlock::ReadHeader
EXTRN	?ReadHeader2@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR	; CTextBlock::ReadHeader2
EXTRN	?ReadHeader3@CTextBlock@@QAEHPAU_iobuf@@@Z:NEAR	; CTextBlock::ReadHeader3
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:NEAR			; `eh vector constructor iterator'
EXTRN	_ungetc:NEAR
EXTRN	@_RTC_Check_4_to_1@4:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CTextBlockAry@@QAEHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CTextBlockAry@@QAEHPADH@Z$0
__ehfuncinfo$?Load@CTextBlockAry@@QAEHPADH@Z DD 019930520H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CTextBlockAry@@QAEHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_02BMJICGCB@rt?$AA@
CONST	SEGMENT
??_C@_02BMJICGCB@rt?$AA@ DB 'rt', 00H			; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Load@CTextBlockAry@@QAEHPADH@Z
_TEXT	SEGMENT
tv164 = -796						; size = 4
tv161 = -796						; size = 4
tv144 = -796						; size = 4
$T93633 = -788						; size = 4
$T93634 = -776						; size = 4
$T93635 = -764						; size = 4
$T93638 = -752						; size = 4
$T93639 = -740						; size = 4
_prch$ = -425						; size = 1
_prid$ = -416						; size = 300
_e$ = -108						; size = 4
_prev$ = -96						; size = 4
_i$ = -84						; size = 4
_stream$ = -72						; size = 4
_t$ = -60						; size = 4
_par$ = -48						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_name$ = 8						; size = 4
_help$ = 12						; size = 4
?Load@CTextBlockAry@@QAEHPADH@Z PROC NEAR		; CTextBlockAry::Load, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Load@CTextBlockAry@@QAEHPADH@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 784				; 00000310H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-796]
	mov	ecx, 196				; 000000c4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 87   :  CTextBlock *pblk, *par, *t;
; 88   :  FILE *stream;
; 89   :  int i, prev, e;
; 90   :  char prid[300], prch;
; 91   :  TCHAR newname[100];
; 92   : 
; 93   :  if ( ( stream = fopen( name, "rt" ) ) == NULL ) {

	push	OFFSET FLAT:??_C@_02BMJICGCB@rt?$AA@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], eax
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $L93414

; 94   :     do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 95   :     return( 0 );

	xor	eax, eax
	jmp	$L93403
$L93414:

; 96   :     }
; 97   :  setupBuf(1);

	push	1
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 98   :  e = fgetc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _e$[ebp], eax

; 99   :  if ( e != '#' && e != '@') {

	cmp	DWORD PTR _e$[ebp], 35			; 00000023H
	je	SHORT $L93416
	cmp	DWORD PTR _e$[ebp], 64			; 00000040H
	je	SHORT $L93416
$L93418:

; 100  : 	 while ( e != '#' && e != '@' ) {

	cmp	DWORD PTR _e$[ebp], 35			; 00000023H
	je	SHORT $L93419
	cmp	DWORD PTR _e$[ebp], 64			; 00000040H
	je	SHORT $L93419

; 101  : 		 e = fgetc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _e$[ebp], eax

; 102  : 	     prch = e; 

	mov	ecx, DWORD PTR _e$[ebp]
	call	@_RTC_Check_4_to_1@4
	mov	BYTE PTR _prch$[ebp], al

; 103  : 	 }

	jmp	SHORT $L93418
$L93419:

; 104  : 	 e = fgetc(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _e$[ebp], eax

; 105  : #ifdef _UNICODE
; 106  : 	 if ( e == 0 ) {
; 107  :        ungetc(e,stream);
; 108  : 	   ungetc((int)prch,stream);
; 109  : 	   fclose(stream);
; 110  :        mbstowcs(newname,name,strlen(name));
; 111  : 	   newname[strlen(name)]=_T('\0');
; 112  : 	   if ( ( stream = _tfopen( newname, _T("rb") ) ) == NULL ) {
; 113  :           do_error( name );
; 114  :           return( 0 );
; 115  :           }
; 116  : 	   charsize = 2;
; 117  : 	   e = fgetc(stream);
; 118  :       if ( e != '#' && e != '@' ) {
; 119  : 	     while ( e != '#' && e != '@' )
; 120  : 		     e = fgetc(stream);
; 121  : 		 ungetc(e,stream);
; 122  : 	    }
; 123  : 	 }
; 124  : 	 else
; 125  : #endif
; 126  : 	    ungetc(e,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8

; 127  :  }
; 128  :  else

	jmp	SHORT $L93420
$L93416:

; 129  :     ungetc(e,stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	_ungetc
	add	esp, 8
$L93420:

; 130  :  for ( par = _array, i = 0; !feof( stream ); i++, par++ ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _par$[ebp], ecx
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L93421
$L93422:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _par$[ebp]
	add	ecx, 144				; 00000090H
	mov	DWORD PTR _par$[ebp], ecx
$L93421:
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	jne	$L93423

; 131  :      if ( i >= _nAlloc-2 ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 2
	cmp	DWORD PTR _i$[ebp], ecx
	jl	$L93424

; 132  : 	    _nAlloc += 100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 100				; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 133  : 	    t = new CTextBlock [_nAlloc];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T93633[ebp], ecx
	mov	edx, DWORD PTR $T93633[ebp]
	imul	edx, 144				; 00000090H
	add	edx, 4
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T93635[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T93635[ebp], 0
	je	SHORT $L93636
	mov	eax, DWORD PTR $T93635[ebp]
	mov	ecx, DWORD PTR $T93633[ebp]
	mov	DWORD PTR [eax], ecx
	push	OFFSET FLAT:??1CTextBlock@@QAE@XZ	; CTextBlock::~CTextBlock
	push	OFFSET FLAT:??0CTextBlock@@QAE@XZ	; CTextBlock::CTextBlock
	mov	edx, DWORD PTR $T93633[ebp]
	push	edx
	push	144					; 00000090H
	mov	eax, DWORD PTR $T93635[ebp]
	add	eax, 4
	push	eax
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	ecx, DWORD PTR $T93635[ebp]
	add	ecx, 4
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $L93637
$L93636:
	mov	DWORD PTR tv144[ebp], 0
$L93637:
	mov	edx, DWORD PTR tv144[ebp]
	mov	DWORD PTR $T93634[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T93634[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 134  : 	    if ( t == NULL ) {

	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $L93432

; 135  : 	       setupBuf(0);

	push	0
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 136  : 	       return( 0 );

	xor	eax, eax
	jmp	$L93403
$L93432:

; 137  : 			}
; 138  : 	    memset( t, 0, sizeof(CTextBlock) * _nAlloc);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	ecx, 144				; 00000090H
	push	ecx
	push	0
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 139  : 	    memcpy( t, _array, sizeof(CTextBlock) * i);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 144				; 00000090H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 140  : 	    delete _array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T93639[ebp], ecx
	mov	edx, DWORD PTR $T93639[ebp]
	mov	DWORD PTR $T93638[ebp], edx
	cmp	DWORD PTR $T93638[ebp], 0
	je	SHORT $L93640
	push	1
	mov	ecx, DWORD PTR $T93638[ebp]
	call	??_GCTextBlock@@QAEPAXI@Z
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $L93641
$L93640:
	mov	DWORD PTR tv161[ebp], 0
$L93641:

; 141  : 	    _array = t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+20], ecx
$L93424:

; 142  : 		}
; 143  : 	 if ( !help ) {

	cmp	DWORD PTR _help$[ebp], 0
	jne	$L93437

; 144  :      switch ( _type ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv164[ebp], ecx
	cmp	DWORD PTR tv164[ebp], 1
	je	SHORT $L93442
	cmp	DWORD PTR tv164[ebp], 2
	je	SHORT $L93444
	cmp	DWORD PTR tv164[ebp], 3
	je	SHORT $L93446
	jmp	SHORT $L93437
$L93442:

; 145  : 		case 1 :
; 146  : 			 if ( par->ReadHeader( stream, &prev, prid ) ) {

	lea	eax, DWORD PTR _prid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prev$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _par$[ebp]
	call	?ReadHeader@CTextBlock@@QAEHPAU_iobuf@@PAHPAD@Z ; CTextBlock::ReadHeader
	test	eax, eax
	je	SHORT $L93443

; 147  : 				do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 148  : 				break;

	jmp	SHORT $L93437
$L93443:

; 149  : 				}
; 150  : 			break;

	jmp	SHORT $L93437
$L93444:

; 151  : 		case 2 :
; 152  : 			if ( par->ReadHeader2( stream ) ) {

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _par$[ebp]
	call	?ReadHeader2@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::ReadHeader2
	test	eax, eax
	je	SHORT $L93445

; 153  : 				do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 154  : 				break;

	jmp	SHORT $L93437
$L93445:

; 155  : 				}
; 156  : 			break;

	jmp	SHORT $L93437
$L93446:

; 157  : 		case 3 :
; 158  : 			if ( par->ReadHeader3( stream ) ) {

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _par$[ebp]
	call	?ReadHeader3@CTextBlock@@QAEHPAU_iobuf@@@Z ; CTextBlock::ReadHeader3
	test	eax, eax
	je	SHORT $L93437

; 159  : 				do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4
$L93437:

; 160  : 				break;
; 161  : 				}
; 162  : 			break;
; 163  : 		default :
; 164  : 			break;
; 165  : 		}
; 166  : 	 }
; 167  :      if ( feof( stream ) )

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $L93449

; 168  : 		break;

	jmp	SHORT $L93423
$L93449:

; 169  : #ifndef _UNICODE 
; 170  :      if ( par->ReadText( stream, help ) ) {

	mov	eax, DWORD PTR _help$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _par$[ebp]
	call	?ReadText@CTextBlock@@QAEHPAU_iobuf@@H@Z ; CTextBlock::ReadText
	test	eax, eax
	je	SHORT $L93450

; 171  : 		do_error( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?do_error@@YAXPBD@Z			; do_error
	add	esp, 4

; 172  : 		break;

	jmp	SHORT $L93423
$L93450:

; 173  : 		}
; 174  : #else
; 175  : 	 if ( charsize == 1 ) {
; 176  : 		if ( par->ReadTextMbs( stream, help ) ) {
; 177  : 		  do_error( name );
; 178  : 	 	  break;
; 179  : 		  }
; 180  : 	 }
; 181  : 	 else {
; 182  : 		if ( par->ReadText( stream, help ) ) {
; 183  : 		  do_error( name );
; 184  : 		  break;
; 185  : 		  }
; 186  : 	 }
; 187  : #endif
; 188  :      if ( feof( stream ) )

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $L93451

; 189  : 		break;

	jmp	SHORT $L93423
$L93451:

; 190  :      }

	jmp	$L93422
$L93423:

; 191  :  _bDirty = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 192  :  _nElements = i+1;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 193  :  fclose( stream );

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 194  :  setupBuf(0);

	push	0
	call	?setupBuf@@YAXH@Z			; setupBuf
	add	esp, 4

; 195  :  return( 1 );

	mov	eax, 1
$L93403:

; 196  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L93652
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 796				; 0000031cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L93652:
	DD	3
	DD	$L93651
$L93651:
	DD	-96					; ffffffa0H
	DD	4
	DD	$L93646
	DD	-416					; fffffe60H
	DD	300					; 0000012cH
	DD	$L93647
	DD	-536					; fffffde8H
	DD	100					; 00000064H
	DD	$L93648
$L93648:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$L93647:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$L93646:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CTextBlockAry@@QAEHPADH@Z$0:
	mov	eax, DWORD PTR $T93635[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?Load@CTextBlockAry@@QAEHPADH@Z:
	mov	eax, OFFSET FLAT:__ehfuncinfo$?Load@CTextBlockAry@@QAEHPADH@Z
	jmp	___CxxFrameHandler
text$x	ENDS
?Load@CTextBlockAry@@QAEHPADH@Z ENDP			; CTextBlockAry::Load
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??_GCTextBlock@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCTextBlock@@QAEPAXI@Z PROC NEAR			; CTextBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTextBlock@@QAE@XZ			; CTextBlock::~CTextBlock
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L93455
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L93455:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTextBlock@@QAEPAXI@Z ENDP				; CTextBlock::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
PUBLIC	?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 796  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>

; 797  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 962  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 963  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ	; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CStringT@DV?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,StrTraitMFC<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@	; `string'
PUBLIC	?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<char,0>::Attach
EXTRN	__CrtDbgReport:NEAR
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
CONST	SEGMENT
??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@ DB 'pStringMgr != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
CONST	SEGMENT
??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio .net 2003\vc7\atlmfc\include\at'
	DB	'lsimpstr.h', 00H				; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 210  : 	explicit CSimpleStringT( IAtlStringMgr* pStringMgr ) throw()

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 	{
; 212  : 		ATLASSERT( pStringMgr != NULL );

	cmp	DWORD PTR _pStringMgr$[ebp], 0
	jne	SHORT $L93664
	push	OFFSET FLAT:??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
	push	0
	push	212					; 000000d4H
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93664
	int	3
$L93664:

; 213  : 		CStringData* pData = pStringMgr->GetNilString();

	mov	eax, DWORD PTR _pStringMgr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pStringMgr$[ebp]
	call	DWORD PTR [edx+12]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pData$[ebp], eax

; 214  : 		Attach( pData );

	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<char,0>::Attach

; 215  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
PUBLIC	?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<char,0>::GetData
; Function compile flags: /Odt /RTCcsu /ZI
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 262  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 		CStringData* pData = GetData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<char,0>::GetData
	mov	DWORD PTR _pData$[ebp], eax

; 264  : 		pData->Release();

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?Release@CStringData@ATL@@QAEXXZ	; ATL::CStringData::Release

; 265  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@	; `string'
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@ DB 'nRefs != 0', 00H ; `string'
; Function compile flags: /Odt /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		ATLASSERT( nRefs != 0 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $L93669
	push	OFFSET FLAT:??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
	push	0
	push	93					; 0000005dH
	push	OFFSET FLAT:??_C@_0FD@JDCNPMMG@c?3?2program?5files?2microsoft?5visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L93669
	int	3
$L93669:

; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	test	ecx, ecx
	jg	SHORT $L25707

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	call	DWORD PTR [edx+4]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L25707:

; 98   : 		}
; 99   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetData, COMDAT
; _this$ = ecx

; 730  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, 16					; 00000010H

; 732  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetData
_TEXT	ENDS
EXTRN	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ:NEAR ; AfxGetStringManager
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\afxstr.h
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ PROC NEAR ; StrTraitMFC<char,ATL::ChTraitsCRT<char> >::GetDefaultManager, COMDAT

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 50   : 		return( AfxGetStringManager() );

	call	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager

; 51   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefaultManager@?$StrTraitMFC@DV?$ChTraitsCRT@D@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ENDP ; StrTraitMFC<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Odt /RTCcsu /ZI
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Attach, COMDAT
; _this$ = ecx

; 711  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

	mov	ecx, DWORD PTR _pData$[ebp]
	call	?data@CStringData@ATL@@QAEPAXXZ		; ATL::CStringData::data
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 713  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<char,0>::Attach
; Function compile flags: /Odt /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 65   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   : 		return (this+1);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
END
