#if !defined(AFX_WSPELL_H__B1084100_BFFE_4980_ABEE_8E3FC6CED25E__INCLUDED_)
#define AFX_WSPELL_H__B1084100_BFFE_4980_ABEE_8E3FC6CED25E__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CWSpell wrapper class

class CWSpell : public CWnd
{
protected:
	DECLARE_DYNCREATE(CWSpell)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x245338c3, 0xbca3, 0x4a2c, { 0xa7, 0xb7, 0x53, 0x34, 0x59, 0x99, 0xa8, 0xe8 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	short GetSuggestionCount();
	void SetSuggestionCount(short);
	CString GetMisspelledWord();
	void SetMisspelledWord(LPCTSTR);
	CString GetReplacementWord();
	void SetReplacementWord(LPCTSTR);
	CString GetText();
	void SetText(LPCTSTR);
	long GetWordOffset();
	void SetWordOffset(long);
	long GetWordCount();
	void SetWordCount(long);
	long GetWordsReplacedCount();
	void SetWordsReplacedCount(long);
	BOOL GetCaseSensitive();
	void SetCaseSensitive(BOOL);
	BOOL GetCanUndo();
	void SetCanUndo(BOOL);
	BOOL GetCatchDoubledWords();
	void SetCatchDoubledWords(BOOL);
	BOOL GetCatchMixedCaseWords();
	void SetCatchMixedCaseWords(BOOL);
	BOOL GetCatchWordsWithDigits();
	void SetCatchWordsWithDigits(BOOL);
	CString GetCurrentWord();
	void SetCurrentWord(LPCTSTR);
	BOOL GetIgnoreAllCapsWords();
	void SetIgnoreAllCapsWords(BOOL);
	BOOL GetIgnoreMixedCaseWords();
	void SetIgnoreMixedCaseWords(BOOL);
	BOOL GetIgnoreWordsWithDigits();
	void SetIgnoreWordsWithDigits(BOOL);
	short GetMainDictionaryCount();
	void SetMainDictionaryCount(short);
	CString GetMainDictionaryFiles();
	void SetMainDictionaryFiles(LPCTSTR);
	short GetMaxSuggestions();
	void SetMaxSuggestions(short);
	short GetMinSuggestionDepth();
	void SetMinSuggestionDepth(short);
	BOOL GetPhoneticSuggestions();
	void SetPhoneticSuggestions(BOOL);
	BOOL GetSplitContractedWords();
	void SetSplitContractedWords(BOOL);
	BOOL GetSplitHyphenatedWords();
	void SetSplitHyphenatedWords(BOOL);
	BOOL GetSplitWords();
	void SetSplitWords(BOOL);
	BOOL GetStripPossessives();
	void SetStripPossessives(BOOL);
	short GetSuggestionDepth();
	void SetSuggestionDepth(short);
	short GetSuggestionDepthIncrement();
	void SetSuggestionDepthIncrement(short);
	BOOL GetSuggestSplitWords();
	void SetSuggestSplitWords(BOOL);
	long GetTextLength();
	void SetTextLength(long);
	BOOL GetTypographicalSuggestions();
	void SetTypographicalSuggestions(BOOL);
	CString GetUndoNewText();
	void SetUndoNewText(LPCTSTR);
	long GetUndoOffset();
	void SetUndoOffset(long);
	CString GetUndoOldText();
	void SetUndoOldText(LPCTSTR);
	short GetUserDictionaryCount();
	void SetUserDictionaryCount(short);
	CString GetUserDictionaryFiles();
	void SetUserDictionaryFiles(LPCTSTR);
	BOOL GetIgnoreCapitalizedWords();
	void SetIgnoreCapitalizedWords(BOOL);
	BOOL GetShowContext();
	void SetShowContext(BOOL);
	BOOL GetShowDialog();
	void SetShowDialog(BOOL);
	long GetTextControlHWnd();
	void SetTextControlHWnd(long);
	long GetDialogLeft();
	void SetDialogLeft(long);
	long GetDialogTop();
	void SetDialogTop(long);
	short GetSuggestionScoreRange();
	void SetSuggestionScoreRange(short);
	short GetMinSuggestionScore();
	void SetMinSuggestionScore(short);
	BOOL GetAutoCorrect();
	void SetAutoCorrect(BOOL);
	CString GetVersion();
	void SetVersion(LPCTSTR);
	long GetMisspelledWordCount();
	void SetMisspelledWordCount(long);
	short GetErrorCode();
	void SetErrorCode(short);
	BOOL GetIgnoreNonAlphaWords();
	void SetIgnoreNonAlphaWords(BOOL);
	BOOL GetIgnoreDomainNames();
	void SetIgnoreDomainNames(BOOL);
	BOOL GetAllowAccentedCaps();
	void SetAllowAccentedCaps(BOOL);
	BOOL GetIgnoreHTMLMarkups();
	void SetIgnoreHTMLMarkups(BOOL);
	short GetCharacterSet();
	void SetCharacterSet(short);
	BOOL GetBackupUserDictionary();
	void SetBackupUserDictionary(BOOL);
	BOOL GetShowOptionsButton();
	void SetShowOptionsButton(BOOL);
	BOOL GetShowDictionariesButton();
	void SetShowDictionariesButton(BOOL);

// Operations
public:
	CString GetSuggestion(short index);
	CString GetMainDictionary(short index);
	CString GetUserDictionary(short index);
	void AddMainDictionary(LPCTSTR fileName);
	void AddUserDictionary(LPCTSTR fileName);
	void ClearTempDictionary();
	void Close();
	short CreateUserDictionary(LPCTSTR fileName, short language);
	void DeleteFromUserDictionary(LPCTSTR userDictFile, LPCTSTR word);
	void IgnoreAllWord();
	void IgnoreWord();
	BOOL NextWord();
	void RemoveMainDictionary(LPCTSTR mainDictFile);
	void RemoveUserDictionary(LPCTSTR userDictFile);
	short ReplaceAllWord();
	short ReplaceWord();
	short Resume();
	short Start();
	void Suggest();
	BOOL TestWord(LPCTSTR word);
	void Undo();
	void ShowUserDictionaryDialog();
	void ShowOptionsDialog();
	CString GetUserDictionaryWord(LPCTSTR userDict, long index);
	long GetUserDictionaryWordCount(LPCTSTR userDict);
	short GetUserDictionaryWordAction(LPCTSTR userDict, LPCTSTR word);
	CString GetUserDictionaryOtherWord(LPCTSTR userDict, LPCTSTR word);
	long DeleteWord();
	short AddToUserDictionary(LPCTSTR userDict, LPCTSTR word, short action, LPCTSTR otherWord);
	long CheckBackgroundNotify(long ctrlHWnd, BOOL changeColor, BOOL bold, BOOL italics, BOOL underline, long textColor);
	long CheckBackgroundRecheck(long ctrlHWnd, BOOL changeColor, BOOL bold, BOOL italics, BOOL underline, long textColor);
	long CheckBackgroundMenu(long ctrlHWnd, long x, long y, long options, BOOL changeColor, BOOL bold, BOOL italics, BOOL underline, long textColor);
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_WSPELL_H__B1084100_BFFE_4980_ABEE_8E3FC6CED25E__INCLUDED_)
