// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "wspell.h"
#ifndef TBT32
#include "direc.hpp"
#endif
#include "stdio.h"
#include "stdlib.h"
#include "direct.h"
/////////////////////////////////////////////////////////////////////////////
// CWSpell

IMPLEMENT_DYNCREATE(CWSpell, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CWSpell properties

CString MakeName( char *p, int one )
{
  char buf[250];
  CString ret, str;
#ifndef TBT32
  str= theDirectories.getMain();
#else
  str = getcwd(buf,249);
#endif
  if ( str[str.GetLength()-1] != '\\' )
	  str += "\\";
  str += p;
  if ( !one )
    ret = str + ".tlx;" + str + "2.clx";
  return( ret );
}

CString MakeDics()
{
 CString dirs;

 dirs = MakeName("sscream",0);
 dirs += ";";
 dirs += MakeName("ssceca",0);
 dirs += ";";
 dirs += MakeName("sscebr",0);
 dirs += ";";
 dirs += MakeName("accent.clx",1);
 dirs += ";";
 dirs += MakeName("correct.clx",1);
 dirs += ";";
 dirs += MakeName("tech.tlx",1);
 return(dirs);
}

short CWSpell::GetSuggestionCount()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetSuggestionCount(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

CString CWSpell::GetMisspelledWord()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CWSpell::SetMisspelledWord(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

CString CWSpell::GetReplacementWord()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CWSpell::SetReplacementWord(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

CString CWSpell::GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}

void CWSpell::SetText(LPCTSTR propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}

long CWSpell::GetWordOffset()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CWSpell::SetWordOffset(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long CWSpell::GetWordCount()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CWSpell::SetWordCount(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

long CWSpell::GetWordsReplacedCount()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CWSpell::SetWordsReplacedCount(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

BOOL CWSpell::GetCaseSensitive()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetCaseSensitive(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

BOOL CWSpell::GetCanUndo()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetCanUndo(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

BOOL CWSpell::GetCatchDoubledWords()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetCatchDoubledWords(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

BOOL CWSpell::GetCatchMixedCaseWords()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetCatchMixedCaseWords(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CWSpell::GetCatchWordsWithDigits()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetCatchWordsWithDigits(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

CString CWSpell::GetCurrentWord()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void CWSpell::SetCurrentWord(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

BOOL CWSpell::GetIgnoreAllCapsWords()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetIgnoreAllCapsWords(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

BOOL CWSpell::GetIgnoreMixedCaseWords()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetIgnoreMixedCaseWords(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

BOOL CWSpell::GetIgnoreWordsWithDigits()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetIgnoreWordsWithDigits(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

short CWSpell::GetMainDictionaryCount()
{
	short result;
	GetProperty(0x15, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetMainDictionaryCount(short propVal)
{
	SetProperty(0x15, VT_I2, propVal);
}

CString CWSpell::GetMainDictionaryFiles()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CWSpell::SetMainDictionaryFiles(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

short CWSpell::GetMaxSuggestions()
{
	short result;
	GetProperty(0x17, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetMaxSuggestions(short propVal)
{
	SetProperty(0x17, VT_I2, propVal);
}

short CWSpell::GetMinSuggestionDepth()
{
	short result;
	GetProperty(0x18, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetMinSuggestionDepth(short propVal)
{
	SetProperty(0x18, VT_I2, propVal);
}

BOOL CWSpell::GetPhoneticSuggestions()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetPhoneticSuggestions(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}

BOOL CWSpell::GetSplitContractedWords()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetSplitContractedWords(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

BOOL CWSpell::GetSplitHyphenatedWords()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetSplitHyphenatedWords(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

BOOL CWSpell::GetSplitWords()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetSplitWords(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

BOOL CWSpell::GetStripPossessives()
{
	BOOL result;
	GetProperty(0x1d, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetStripPossessives(BOOL propVal)
{
	SetProperty(0x1d, VT_BOOL, propVal);
}

short CWSpell::GetSuggestionDepth()
{
	short result;
	GetProperty(0x1e, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetSuggestionDepth(short propVal)
{
	SetProperty(0x1e, VT_I2, propVal);
}

short CWSpell::GetSuggestionDepthIncrement()
{
	short result;
	GetProperty(0x1f, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetSuggestionDepthIncrement(short propVal)
{
	SetProperty(0x1f, VT_I2, propVal);
}

BOOL CWSpell::GetSuggestSplitWords()
{
	BOOL result;
	GetProperty(0x20, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetSuggestSplitWords(BOOL propVal)
{
	SetProperty(0x20, VT_BOOL, propVal);
}

long CWSpell::GetTextLength()
{
	long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}

void CWSpell::SetTextLength(long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}

BOOL CWSpell::GetTypographicalSuggestions()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetTypographicalSuggestions(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

CString CWSpell::GetUndoNewText()
{
	CString result;
	GetProperty(0x23, VT_BSTR, (void*)&result);
	return result;
}

void CWSpell::SetUndoNewText(LPCTSTR propVal)
{
	SetProperty(0x23, VT_BSTR, propVal);
}

long CWSpell::GetUndoOffset()
{
	long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CWSpell::SetUndoOffset(long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

CString CWSpell::GetUndoOldText()
{
	CString result;
	GetProperty(0x25, VT_BSTR, (void*)&result);
	return result;
}

void CWSpell::SetUndoOldText(LPCTSTR propVal)
{
	SetProperty(0x25, VT_BSTR, propVal);
}

short CWSpell::GetUserDictionaryCount()
{
	short result;
	GetProperty(0x26, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetUserDictionaryCount(short propVal)
{
	SetProperty(0x26, VT_I2, propVal);
}

CString CWSpell::GetUserDictionaryFiles()
{
	CString result;
	GetProperty(0x27, VT_BSTR, (void*)&result);
	return result;
}

void CWSpell::SetUserDictionaryFiles(LPCTSTR propVal)
{
	SetProperty(0x27, VT_BSTR, propVal);
}

BOOL CWSpell::GetIgnoreCapitalizedWords()
{
	BOOL result;
	GetProperty(0x28, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetIgnoreCapitalizedWords(BOOL propVal)
{
	SetProperty(0x28, VT_BOOL, propVal);
}

BOOL CWSpell::GetShowContext()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetShowContext(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CWSpell::GetShowDialog()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetShowDialog(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

long CWSpell::GetTextControlHWnd()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CWSpell::SetTextControlHWnd(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CWSpell::GetDialogLeft()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CWSpell::SetDialogLeft(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CWSpell::GetDialogTop()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CWSpell::SetDialogTop(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

short CWSpell::GetSuggestionScoreRange()
{
	short result;
	GetProperty(0x29, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetSuggestionScoreRange(short propVal)
{
	SetProperty(0x29, VT_I2, propVal);
}

short CWSpell::GetMinSuggestionScore()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetMinSuggestionScore(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}

BOOL CWSpell::GetAutoCorrect()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetAutoCorrect(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}

CString CWSpell::GetVersion()
{
	CString result;
	GetProperty(0x2c, VT_BSTR, (void*)&result);
	return result;
}

void CWSpell::SetVersion(LPCTSTR propVal)
{
	SetProperty(0x2c, VT_BSTR, propVal);
}

long CWSpell::GetMisspelledWordCount()
{
	long result;
	GetProperty(0x2d, VT_I4, (void*)&result);
	return result;
}

void CWSpell::SetMisspelledWordCount(long propVal)
{
	SetProperty(0x2d, VT_I4, propVal);
}

short CWSpell::GetErrorCode()
{
	short result;
	GetProperty(0x2e, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetErrorCode(short propVal)
{
	SetProperty(0x2e, VT_I2, propVal);
}

BOOL CWSpell::GetIgnoreNonAlphaWords()
{
	BOOL result;
	GetProperty(0x2f, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetIgnoreNonAlphaWords(BOOL propVal)
{
	SetProperty(0x2f, VT_BOOL, propVal);
}

BOOL CWSpell::GetIgnoreDomainNames()
{
	BOOL result;
	GetProperty(0x30, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetIgnoreDomainNames(BOOL propVal)
{
	SetProperty(0x30, VT_BOOL, propVal);
}

BOOL CWSpell::GetAllowAccentedCaps()
{
	BOOL result;
	GetProperty(0x31, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetAllowAccentedCaps(BOOL propVal)
{
	SetProperty(0x31, VT_BOOL, propVal);
}

BOOL CWSpell::GetIgnoreHTMLMarkups()
{
	BOOL result;
	GetProperty(0x32, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetIgnoreHTMLMarkups(BOOL propVal)
{
	SetProperty(0x32, VT_BOOL, propVal);
}

short CWSpell::GetCharacterSet()
{
	short result;
	GetProperty(0x33, VT_I2, (void*)&result);
	return result;
}

void CWSpell::SetCharacterSet(short propVal)
{
	SetProperty(0x33, VT_I2, propVal);
}

BOOL CWSpell::GetBackupUserDictionary()
{
	BOOL result;
	GetProperty(0x34, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetBackupUserDictionary(BOOL propVal)
{
	SetProperty(0x34, VT_BOOL, propVal);
}

BOOL CWSpell::GetShowOptionsButton()
{
	BOOL result;
	GetProperty(0x35, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetShowOptionsButton(BOOL propVal)
{
	SetProperty(0x35, VT_BOOL, propVal);
}

BOOL CWSpell::GetShowDictionariesButton()
{
	BOOL result;
	GetProperty(0x36, VT_BOOL, (void*)&result);
	return result;
}

void CWSpell::SetShowDictionariesButton(BOOL propVal)
{
	SetProperty(0x36, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CWSpell operations

CString CWSpell::GetSuggestion(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x50, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

CString CWSpell::GetMainDictionary(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x51, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

CString CWSpell::GetUserDictionary(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x52, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CWSpell::AddMainDictionary(LPCTSTR fileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fileName);
}

void CWSpell::AddUserDictionary(LPCTSTR fileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fileName);
}

void CWSpell::ClearTempDictionary()
{
	InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWSpell::Close()
{
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CWSpell::CreateUserDictionary(LPCTSTR fileName, short language)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fileName, language);
	return result;
}

void CWSpell::DeleteFromUserDictionary(LPCTSTR userDictFile, LPCTSTR word)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 userDictFile, word);
}

void CWSpell::IgnoreAllWord()
{
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWSpell::IgnoreWord()
{
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CWSpell::NextWord()
{
	BOOL result;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWSpell::RemoveMainDictionary(LPCTSTR mainDictFile)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 mainDictFile);
}

void CWSpell::RemoveUserDictionary(LPCTSTR userDictFile)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 userDictFile);
}

short CWSpell::ReplaceAllWord()
{
	short result;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWSpell::ReplaceWord()
{
	short result;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWSpell::Resume()
{
	short result;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWSpell::Start()
{
	short result;
	SetMainDictionaryFiles(MakeDics());
	AddUserDictionary(MakeName("userdic.tlx",1));
	InvokeHelper(0x45, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CWSpell::Suggest()
{
	InvokeHelper(0x46, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CWSpell::TestWord(LPCTSTR word)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		word);
	return result;
}

void CWSpell::Undo()
{
	InvokeHelper(0x48, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWSpell::ShowUserDictionaryDialog()
{
	InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWSpell::ShowOptionsDialog()
{
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CWSpell::GetUserDictionaryWord(LPCTSTR userDict, long index)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x53, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		userDict, index);
	return result;
}

long CWSpell::GetUserDictionaryWordCount(LPCTSTR userDict)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x54, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		userDict);
	return result;
}

short CWSpell::GetUserDictionaryWordAction(LPCTSTR userDict, LPCTSTR word)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x55, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		userDict, word);
	return result;
}

CString CWSpell::GetUserDictionaryOtherWord(LPCTSTR userDict, LPCTSTR word)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x56, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		userDict, word);
	return result;
}

long CWSpell::DeleteWord()
{
	long result;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CWSpell::AddToUserDictionary(LPCTSTR userDict, LPCTSTR word, short action, LPCTSTR otherWord)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I2 VTS_BSTR;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		userDict, word, action, otherWord);
	return result;
}

long CWSpell::CheckBackgroundNotify(long ctrlHWnd, BOOL changeColor, BOOL bold, BOOL italics, BOOL underline, long textColor)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I4;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ctrlHWnd, changeColor, bold, italics, underline, textColor);
	return result;
}

long CWSpell::CheckBackgroundRecheck(long ctrlHWnd, BOOL changeColor, BOOL bold, BOOL italics, BOOL underline, long textColor)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I4;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ctrlHWnd, changeColor, bold, italics, underline, textColor);
	return result;
}

long CWSpell::CheckBackgroundMenu(long ctrlHWnd, long x, long y, long options, BOOL changeColor, BOOL bold, BOOL italics, BOOL underline, long textColor)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_I4;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ctrlHWnd, x, y, options, changeColor, bold, italics, underline, textColor);
	return result;
}

void CWSpell::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
