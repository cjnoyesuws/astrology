unit biocalc_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : $Revision:   1.130.1.0.1.0.1.6  $
// File generated on 9/7/2005 9:28:10 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\cjnoyessw\_biocalc.tlb (1)
// LIBID: {F2B59736-4D14-4DB1-960C-0B4F14ACE444}
// LCID: 0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\STDOLE2.TLB)
//   (2) v4.0 StdVCL, (C:\WINDOWS\system32\stdvcl40.dll)
// Errors:
//   Hint: Parameter 'file' of IBioDataCalc.SaveData changed to 'file_'
//   Error creating palette bitmap of (TCBioDataCalc) : No Server registered for this CoClass
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  biocalcMajorVersion = 1;
  biocalcMinorVersion = 0;

  LIBID_biocalc: TGUID = '{F2B59736-4D14-4DB1-960C-0B4F14ACE444}';

  IID_IBioDataCalc: TGUID = '{18B41BCD-EA9C-48FD-B6BC-EE8C411C4073}';
  CLASS_CBioDataCalc: TGUID = '{37A3EB90-807D-4CA1-921D-BCAC087ED99C}';
type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IBioDataCalc = interface;
  IBioDataCalcDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  CBioDataCalc = IBioDataCalc;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  PShortint1 = ^Shortint; {*}


// *********************************************************************//
// Interface: IBioDataCalc
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {18B41BCD-EA9C-48FD-B6BC-EE8C411C4073}
// *********************************************************************//
  IBioDataCalc = interface(IDispatch)
    ['{18B41BCD-EA9C-48FD-B6BC-EE8C411C4073}']
    procedure Set_PersName(const pVal: WideString); safecall;
    procedure Set_BirthDate(pVal: TDateTime); safecall;
    procedure Set_StartDate(pVal: TDateTime); safecall;
    procedure Set_Index(Param1: Smallint); safecall;
    function Get_Physical: Double; safecall;
    function Get_Emotional: Double; safecall;
    function Get_Intellectual: Double; safecall;
    function Get_EmotionalDesc: WideString; safecall;
    function Get_PhysicalDesc: WideString; safecall;
    function Get_IntellectualDesc: WideString; safecall;
    procedure Calc; safecall;
    procedure SaveData(var file_: PChar); safecall;
    procedure LoadData(var name: PChar); safecall;
    procedure Export(var name: PChar); safecall;
    function Get_Days: Smallint; safecall;
    function Get_Critical: Double; safecall;
    function Get_CriticalDesc: WideString; safecall;
    function Get_PersName: WideString; safecall;
    function Get_BirthDate: TDateTime; safecall;
    function Get_StartDate: TDateTime; safecall;
    property PersName: WideString read Get_PersName write Set_PersName;
    property BirthDate: TDateTime read Get_BirthDate write Set_BirthDate;
    property StartDate: TDateTime read Get_StartDate write Set_StartDate;
    property Index: Smallint write Set_Index;
    property Physical: Double read Get_Physical;
    property Emotional: Double read Get_Emotional;
    property Intellectual: Double read Get_Intellectual;
    property EmotionalDesc: WideString read Get_EmotionalDesc;
    property PhysicalDesc: WideString read Get_PhysicalDesc;
    property IntellectualDesc: WideString read Get_IntellectualDesc;
    property Days: Smallint read Get_Days;
    property Critical: Double read Get_Critical;
    property CriticalDesc: WideString read Get_CriticalDesc;
  end;

// *********************************************************************//
// DispIntf:  IBioDataCalcDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {18B41BCD-EA9C-48FD-B6BC-EE8C411C4073}
// *********************************************************************//
  IBioDataCalcDisp = dispinterface
    ['{18B41BCD-EA9C-48FD-B6BC-EE8C411C4073}']
    property PersName: WideString dispid 1;
    property BirthDate: TDateTime dispid 2;
    property StartDate: TDateTime dispid 3;
    property Index: Smallint writeonly dispid 4;
    property Physical: Double readonly dispid 5;
    property Emotional: Double readonly dispid 6;
    property Intellectual: Double readonly dispid 7;
    property EmotionalDesc: WideString readonly dispid 8;
    property PhysicalDesc: WideString readonly dispid 9;
    property IntellectualDesc: WideString readonly dispid 10;
    procedure Calc; dispid 11;
    procedure SaveData(var file_: PChar); dispid 12;
    procedure LoadData(var name: PChar); dispid 13;
    procedure Export(var name: PChar); dispid 14;
    property Days: Smallint readonly dispid 15;
    property Critical: Double readonly dispid 16;
    property CriticalDesc: WideString readonly dispid 17;
  end;

// *********************************************************************//
// The Class CoCBioDataCalc provides a Create and CreateRemote method to          
// create instances of the default interface IBioDataCalc exposed by              
// the CoClass CBioDataCalc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCBioDataCalc = class
    class function Create: IBioDataCalc;
    class function CreateRemote(const MachineName: string): IBioDataCalc;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCBioDataCalc
// Help String      : BioDataCalc Class
// Default Interface: IBioDataCalc
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCBioDataCalcProperties= class;
{$ENDIF}
  TCBioDataCalc = class(TOleServer)
  private
    FIntf:        IBioDataCalc;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCBioDataCalcProperties;
    function      GetServerProperties: TCBioDataCalcProperties;
{$ENDIF}
    function      GetDefaultInterface: IBioDataCalc;
  protected
    procedure InitServerData; override;
    procedure Set_PersName(const pVal: WideString);
    procedure Set_BirthDate(pVal: TDateTime);
    procedure Set_StartDate(pVal: TDateTime);
    procedure Set_Index(Param1: Smallint);
    function Get_Physical: Double;
    function Get_Emotional: Double;
    function Get_Intellectual: Double;
    function Get_EmotionalDesc: WideString;
    function Get_PhysicalDesc: WideString;
    function Get_IntellectualDesc: WideString;
    function Get_Days: Smallint;
    function Get_Critical: Double;
    function Get_CriticalDesc: WideString;
    function Get_PersName: WideString;
    function Get_BirthDate: TDateTime;
    function Get_StartDate: TDateTime;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IBioDataCalc);
    procedure Disconnect; override;
    procedure Calc;
    procedure SaveData(var file_: PChar);
    procedure LoadData(var name: PChar);
    procedure Export(var name: PChar);
    property DefaultInterface: IBioDataCalc read GetDefaultInterface;
    property Index: Smallint write Set_Index;
    property Physical: Double read Get_Physical;
    property Emotional: Double read Get_Emotional;
    property Intellectual: Double read Get_Intellectual;
    property EmotionalDesc: WideString read Get_EmotionalDesc;
    property PhysicalDesc: WideString read Get_PhysicalDesc;
    property IntellectualDesc: WideString read Get_IntellectualDesc;
    property Days: Smallint read Get_Days;
    property Critical: Double read Get_Critical;
    property CriticalDesc: WideString read Get_CriticalDesc;
    property PersName: WideString read Get_PersName write Set_PersName;
    property BirthDate: TDateTime read Get_BirthDate write Set_BirthDate;
    property StartDate: TDateTime read Get_StartDate write Set_StartDate;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCBioDataCalcProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCBioDataCalc
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCBioDataCalcProperties = class(TPersistent)
  private
    FServer:    TCBioDataCalc;
    function    GetDefaultInterface: IBioDataCalc;
    constructor Create(AServer: TCBioDataCalc);
  protected
    procedure Set_PersName(const pVal: WideString);
    procedure Set_BirthDate(pVal: TDateTime);
    procedure Set_StartDate(pVal: TDateTime);
    procedure Set_Index(Param1: Smallint);
    function Get_Physical: Double;
    function Get_Emotional: Double;
    function Get_Intellectual: Double;
    function Get_EmotionalDesc: WideString;
    function Get_PhysicalDesc: WideString;
    function Get_IntellectualDesc: WideString;
    function Get_Days: Smallint;
    function Get_Critical: Double;
    function Get_CriticalDesc: WideString;
    function Get_PersName: WideString;
    function Get_BirthDate: TDateTime;
    function Get_StartDate: TDateTime;
  public
    property DefaultInterface: IBioDataCalc read GetDefaultInterface;
  published
    property PersName: WideString read Get_PersName write Set_PersName;
    property BirthDate: TDateTime read Get_BirthDate write Set_BirthDate;
    property StartDate: TDateTime read Get_StartDate write Set_StartDate;
  end;
{$ENDIF}


procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

implementation

uses ComObj;

class function CoCBioDataCalc.Create: IBioDataCalc;
begin
  Result := CreateComObject(CLASS_CBioDataCalc) as IBioDataCalc;
end;

class function CoCBioDataCalc.CreateRemote(const MachineName: string): IBioDataCalc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CBioDataCalc) as IBioDataCalc;
end;

procedure TCBioDataCalc.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{37A3EB90-807D-4CA1-921D-BCAC087ED99C}';
    IntfIID:   '{18B41BCD-EA9C-48FD-B6BC-EE8C411C4073}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCBioDataCalc.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IBioDataCalc;
  end;
end;

procedure TCBioDataCalc.ConnectTo(svrIntf: IBioDataCalc);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCBioDataCalc.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCBioDataCalc.GetDefaultInterface: IBioDataCalc;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCBioDataCalc.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCBioDataCalcProperties.Create(Self);
{$ENDIF}
end;

destructor TCBioDataCalc.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCBioDataCalc.GetServerProperties: TCBioDataCalcProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCBioDataCalc.Set_PersName(const pVal: WideString);
  { Warning: The property PersName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PersName := pVal;
end;

procedure TCBioDataCalc.Set_BirthDate(pVal: TDateTime);
begin
  Exit;
end;

procedure TCBioDataCalc.Set_StartDate(pVal: TDateTime);
begin
  Exit;
end;

procedure TCBioDataCalc.Set_Index(Param1: Smallint);
begin
  Exit;
end;

function TCBioDataCalc.Get_Physical: Double;
begin
    Result := DefaultInterface.Physical;
end;

function TCBioDataCalc.Get_Emotional: Double;
begin
    Result := DefaultInterface.Emotional;
end;

function TCBioDataCalc.Get_Intellectual: Double;
begin
    Result := DefaultInterface.Intellectual;
end;

function TCBioDataCalc.Get_EmotionalDesc: WideString;
begin
    Result := DefaultInterface.EmotionalDesc;
end;

function TCBioDataCalc.Get_PhysicalDesc: WideString;
begin
    Result := DefaultInterface.PhysicalDesc;
end;

function TCBioDataCalc.Get_IntellectualDesc: WideString;
begin
    Result := DefaultInterface.IntellectualDesc;
end;

function TCBioDataCalc.Get_Days: Smallint;
begin
    Result := DefaultInterface.Days;
end;

function TCBioDataCalc.Get_Critical: Double;
begin
    Result := DefaultInterface.Critical;
end;

function TCBioDataCalc.Get_CriticalDesc: WideString;
begin
    Result := DefaultInterface.CriticalDesc;
end;

function TCBioDataCalc.Get_PersName: WideString;
begin
    Result := DefaultInterface.PersName;
end;

function TCBioDataCalc.Get_BirthDate: TDateTime;
begin
    Result := DefaultInterface.BirthDate;
end;

function TCBioDataCalc.Get_StartDate: TDateTime;
begin
    Result := DefaultInterface.StartDate;
end;

procedure TCBioDataCalc.Calc;
begin
  DefaultInterface.Calc;
end;

procedure TCBioDataCalc.SaveData(var file_: PChar);
begin
  DefaultInterface.SaveData(file_);
end;

procedure TCBioDataCalc.LoadData(var name: PChar);
begin
  DefaultInterface.LoadData(name);
end;

procedure TCBioDataCalc.Export(var name: PChar);
begin
  DefaultInterface.Export(name);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCBioDataCalcProperties.Create(AServer: TCBioDataCalc);
begin
  inherited Create;
  FServer := AServer;
end;

function TCBioDataCalcProperties.GetDefaultInterface: IBioDataCalc;
begin
  Result := FServer.DefaultInterface;
end;

procedure TCBioDataCalcProperties.Set_PersName(const pVal: WideString);
  { Warning: The property PersName has a setter and a getter whose
  types do not match. Delphi was unable to generate a property of
  this sort and so is using a Variant to set the property instead. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PersName := pVal;
end;

procedure TCBioDataCalcProperties.Set_BirthDate(pVal: TDateTime);
begin
  Exit;
end;

procedure TCBioDataCalcProperties.Set_StartDate(pVal: TDateTime);
begin
  Exit;
end;

procedure TCBioDataCalcProperties.Set_Index(Param1: Smallint);
begin
  Exit;
end;

function TCBioDataCalcProperties.Get_Physical: Double;
begin
    Result := DefaultInterface.Physical;
end;

function TCBioDataCalcProperties.Get_Emotional: Double;
begin
    Result := DefaultInterface.Emotional;
end;

function TCBioDataCalcProperties.Get_Intellectual: Double;
begin
    Result := DefaultInterface.Intellectual;
end;

function TCBioDataCalcProperties.Get_EmotionalDesc: WideString;
begin
    Result := DefaultInterface.EmotionalDesc;
end;

function TCBioDataCalcProperties.Get_PhysicalDesc: WideString;
begin
    Result := DefaultInterface.PhysicalDesc;
end;

function TCBioDataCalcProperties.Get_IntellectualDesc: WideString;
begin
    Result := DefaultInterface.IntellectualDesc;
end;

function TCBioDataCalcProperties.Get_Days: Smallint;
begin
    Result := DefaultInterface.Days;
end;

function TCBioDataCalcProperties.Get_Critical: Double;
begin
    Result := DefaultInterface.Critical;
end;

function TCBioDataCalcProperties.Get_CriticalDesc: WideString;
begin
    Result := DefaultInterface.CriticalDesc;
end;

function TCBioDataCalcProperties.Get_PersName: WideString;
begin
    Result := DefaultInterface.PersName;
end;

function TCBioDataCalcProperties.Get_BirthDate: TDateTime;
begin
    Result := DefaultInterface.BirthDate;
end;

function TCBioDataCalcProperties.Get_StartDate: TDateTime;
begin
    Result := DefaultInterface.StartDate;
end;

{$ENDIF}

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TCBioDataCalc]);
end;

end.
